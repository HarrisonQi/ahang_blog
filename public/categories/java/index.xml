<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 阿航的技术小站</title>
    <link>http://localhost:1313/categories/java/</link>
    <description>Recent content in Java on 阿航的技术小站</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 12 May 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Boot AOP 获取注解中的值</title>
      <link>http://localhost:1313/posts/post/2021/spring-boot-aop-%E8%8E%B7%E5%8F%96%E6%B3%A8%E8%A7%A3%E4%B8%AD%E7%9A%84%E5%80%BC/</link>
      <pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2021/spring-boot-aop-%E8%8E%B7%E5%8F%96%E6%B3%A8%E8%A7%A3%E4%B8%AD%E7%9A%84%E5%80%BC/</guid>
      <description>&lt;h2 id=&#34;确定需求&#34;&gt;确定需求&lt;/h2&gt;&#xA;&lt;p&gt;首先来确定一下我们的需求:&lt;/p&gt;&#xA;&lt;p&gt;我需要做一个功能, 可以通过注解的方式来使某些controller做一些事情(比如权限校验).&lt;/p&gt;&#xA;&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;java 8&lt;/li&gt;&#xA;&lt;li&gt;Spring Boot&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;&#xA;&lt;p&gt;首先来创建一个注解类&lt;code&gt;MyAnnotation&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`@Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation {      /**      * 注解值(等下要获取并处理该值)      * @return      */     String value() default &amp;quot;&amp;quot;;  }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;还有处理注解的类&lt;code&gt;MyAnnotaionAspect&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;notice&amp;rdquo;]注意, 需要将下方的@annotation内的值替换为你的注解路径![/epcl_box]&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.reflect.MethodSignature; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Component;  import java.lang.reflect.Method;  @Aspect @Component public class MyAnnotationAspect {      protected static final Logger logger = LoggerFactory.getLogger(MyAnnotationAspect.class);      // TODO 注意这里需要替换为你的注解路径     @Around(&amp;quot;@annotation(com.example.demo.MyAnnotation)&amp;quot;)     public Object doSomething(ProceedingJoinPoint point) throws Throwable {          MethodSignature signature = (MethodSignature) point.getSignature();         Method signatureMethod = signature.getMethod();          MyAnnotation myAnnotation = signatureMethod.getAnnotation(MyAnnotation.class);          String value = myAnnotation.value();                  // 这里就可以打印你的注解值了         System.out.println(value);          return point.proceed();     }  }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;写一个Controller作为例子:&lt;/p&gt;</description>
    </item>
    <item>
      <title>通过FastJson将对象Object转为Map</title>
      <link>http://localhost:1313/posts/post/2021/%E9%80%9A%E8%BF%87fastjson%E5%B0%86%E5%AF%B9%E8%B1%A1object%E8%BD%AC%E4%B8%BAmap/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2021/%E9%80%9A%E8%BF%87fastjson%E5%B0%86%E5%AF%B9%E8%B1%A1object%E8%BD%AC%E4%B8%BAmap/</guid>
      <description>&lt;p&gt;本次开发的任务是比对两个对象的属性, 查看有哪些地方不一致. 为了长期考虑, 决定将它们分别转为Map对象, 再遍历该Map, 分别比较键值对来达到效果. 本篇文章记录下如何通过FastJson将对象Object转为Map.&lt;/p&gt;&#xA;&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;引入fastjson&#34;&gt;引入FastJson&lt;/h3&gt;&#xA;&lt;p&gt;将&lt;code&gt;version&lt;/code&gt;替换为合适的版本.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`&amp;lt;dependency&amp;gt;     &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;     &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;     &amp;lt;version&amp;gt;1.2.69&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;对象转map函数&#34;&gt;对象转map函数&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;`/**  * 对象转Map  * @param object 要转换的对象  * @return 转换后的Map  */ private Map&amp;lt;String, Object&amp;gt; object2Map(Object object) {     JSONObject jsonObject = (JSONObject) JSON.toJSON(object);     Set&amp;lt;Map.Entry&amp;lt;String, Object&amp;gt;&amp;gt; entrySet = jsonObject.entrySet();     Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();     for (Map.Entry&amp;lt;String, Object&amp;gt; entry : entrySet) {         map.put(entry.getKey(), entry.getValue());     }     return map; }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;函数--运行测试&#34;&gt;函数 + 运行测试&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import com.alibaba.fastjson.JSON; import com.alibaba.fastjson.JSONObject;  import java.util.HashMap; import java.util.Map; import java.util.Set;  public class FastJsonTest {      public static void main(String[] args) {         // 创建对象         Person person = new Person();         person.setName(&amp;quot;阿航&amp;quot;);         person.setAge(18);         // 转换为Map         Map&amp;lt;String, Object&amp;gt; map = new FastJsonTest().object2Map(person);         // 打印         System.out.println(map.toString());     }      private Map&amp;lt;String, Object&amp;gt; object2Map(Object object) {         JSONObject jsonObject = (JSONObject) JSON.toJSON(object);         Set&amp;lt;Map.Entry&amp;lt;String, Object&amp;gt;&amp;gt; entrySet = jsonObject.entrySet();         Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();         for (Map.Entry&amp;lt;String, Object&amp;gt; entry : entrySet) {             map.put(entry.getKey(), entry.getValue());         }         return map;     }      private static class Person {         private String name;         private Integer age;          public String getName() {             return name;         }          public void setName(String name) {             this.name = name;         }          public Integer getAge() {             return age;         }          public void setAge(Integer age) {             this.age = age;         }     } }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;运行后打印到控制台:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Access denied for user</title>
      <link>http://localhost:1313/posts/post/2020/access-denied-for-user/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/access-denied-for-user/</guid>
      <description>&lt;p&gt;在开发的过程中坎坷不断。今天在Spring Boot中碰到了这个异常：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`Caused by: com.mysql.cj.exceptions.CJException: Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;本篇文章就来记录下可能的情况以及解决方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;问题原因&#34;&gt;问题原因&lt;/h2&gt;&#xA;&lt;p&gt;问题的根源就在数据库登陆上。肯定是账号和密码有误，所以我们要仔细检查配置文件，有以下几个地方容易出错：&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况一检查配置文件是否包含空格&#34;&gt;情况一：检查配置文件是否包含空格&lt;/h3&gt;&#xA;&lt;p&gt;因为application.yml似乎并不会给我们的配置文件进行去空格处理，所以我们来仔细检查。配置文件人模人样的，看起来没啥问题：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Access-denied-for-user-01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;结果一选中：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Access-denied-for-user-02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;呵！其实不然。所以一定要&lt;strong&gt;去除多余的空格&lt;/strong&gt;！&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况二检查username和password值是否写反&#34;&gt;情况二：检查username和password值是否写反&lt;/h3&gt;&#xA;&lt;p&gt;因为26个字母中&lt;code&gt;u&lt;/code&gt;在&lt;code&gt;p&lt;/code&gt;的后面，所以默认的yml排序中&lt;code&gt;username&lt;/code&gt;会在&lt;code&gt;password&lt;/code&gt;下面。阿航就是踩了这个坑！以为用户名在上方，导致写反！&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况三检查ip是否正确&#34;&gt;情况三：检查IP是否正确&lt;/h3&gt;&#xA;&lt;p&gt;如果确定账户密码正确，我们就来看看IP是否有误吧。&lt;/p&gt;&#xA;&lt;p&gt;在数据库中输入以下SQL进行查询（这里以MySQL为例）：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` SELECT &#x9;CONCAT( USER, &#39;@&#39;, HOST ) Result FROM &#x9;mysql.USER;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;查看返回结果是否包含你的报错。如果不包含就说明你的IP未被创建。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况四检查数据库服务器配置&#34;&gt;情况四：检查数据库服务器配置&lt;/h3&gt;&#xA;&lt;p&gt;使用其他的软件连接你的数据库（如Navicat），使用相同的用户名和密码看看能否登陆。如果不能登陆则是数据库层的问题，与代码无关了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;&#xA;&lt;p&gt;总之，解决方案就是细心。。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot Swagger-UI 404</title>
      <link>http://localhost:1313/posts/post/2020/spring-boot-swagger-ui-404/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/spring-boot-swagger-ui-404/</guid>
      <description>&lt;p&gt;这几天换了新的设备用于开发。启动项目后访问swagger地址，发现空空如也。本篇文章就来记录下Spring Boot Swagger-UI 404的可能原因及解决方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;掌握Java开发&lt;/li&gt;&#xA;&lt;li&gt;掌握SpringBoot框架&lt;/li&gt;&#xA;&lt;li&gt;掌握Swagger框架及相应配置&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;阿航的项目环境：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;JDK&lt;/td&gt;&#xA;          &lt;td&gt;14&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;SpringBoot&lt;/td&gt;&#xA;          &lt;td&gt;2.1.13.RELEASE&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Swagger&lt;/td&gt;&#xA;          &lt;td&gt;2.9.2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;问题原因&#34;&gt;问题原因&lt;/h2&gt;&#xA;&lt;p&gt;在网上翻了个遍，众说纷纭。记录下我找到的情况以及对应的解决方案。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况一检查swagger是否限制环境&#34;&gt;情况一：检查Swagger是否限制环境&lt;/h3&gt;&#xA;&lt;p&gt;很明显我们在生产环境不太希望将完整的接口文档暴露出来，我们通常会通过&lt;code&gt;@Profile&lt;/code&gt;进行限制，比如：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`@EnableSwagger2 @Configuration @Profile(&amp;quot;dev&amp;quot;) class SwaggerConfig { ...`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;上面的&lt;code&gt;@Profile&lt;/code&gt;的值就是限制了我们仅在哪些环境中展示Swagger。&lt;/p&gt;&#xA;&lt;p&gt;所以，&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;检查你的环境是否在&lt;code&gt;@Profile&lt;/code&gt;内部。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况二绑定静态资源文件&#34;&gt;情况二：绑定静态资源文件&lt;/h3&gt;&#xA;&lt;p&gt;在你的Swagger配置文件中（或任何注入Bean的类中）添加：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`@Override protected void addResourceHandlers(ResourceHandlerRegistry registry) {     // 解决静态资源无法访问     registry.addResourceHandler(&amp;quot;/**&amp;quot;)             .addResourceLocations(&amp;quot;classpath:/static/&amp;quot;);     // 解决swagger无法访问     registry.addResourceHandler(&amp;quot;/swagger-ui.html&amp;quot;)             .addResourceLocations(&amp;quot;classpath:/META-INF/resources/&amp;quot;);     // 解决swagger的js文件无法访问     registry.addResourceHandler(&amp;quot;/webjars/**&amp;quot;)             .addResourceLocations(&amp;quot;classpath:/META-INF/resources/webjars/&amp;quot;); }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;此方法存在争议，因为新版本的SpringBoot和Swagger并不需要该配置。&lt;/p&gt;</description>
    </item>
    <item>
      <title>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)</title>
      <link>http://localhost:1313/posts/post/2020/org-apache-ibatis-binding-bindingexception-invalid-bound-statement-not-found/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/org-apache-ibatis-binding-bindingexception-invalid-bound-statement-not-found/</guid>
      <description>&lt;p&gt;在使用Mybatis进行开发时， 出现了这样的报错：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`org.apache.ibatis.binding.BindingException:      Invalid bound statement (not found)`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;本篇文章就来记录下碰到上述问题的几种解决方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;情况&#34;&gt;情况&lt;/h2&gt;&#xA;&lt;p&gt;比如我们有Mapper文件&lt;code&gt;UserMapper.java&lt;/code&gt;及其对应的&lt;code&gt;UserMapper.xml&lt;/code&gt;文件&lt;/p&gt;&#xA;&lt;p&gt;这里列举出一些可能出现的情况以及对应的解决方案：&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况一mapperxml的namespace有误&#34;&gt;情况一：Mapper.xml的namespace有误&lt;/h3&gt;&#xA;&lt;p&gt;找到你的&lt;code&gt;mapper.xml&lt;/code&gt;文件，找到类似这一行：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`&amp;lt;!DOCTYPE mapper PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot; &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt; &amp;lt;mapper namespace=&amp;quot;com.bugcatt.mapper.UserMapper&amp;quot;&amp;gt;  &amp;lt;/mapper&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;仔细检查&lt;code&gt;namespace&lt;/code&gt;的值是否对应正确的路径。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况二mapper的函数未在mapperxml定义&#34;&gt;情况二：Mapper的函数未在Mapper.xml定义&lt;/h3&gt;&#xA;&lt;p&gt;检查你的UserMapper中的函数/方法，是否已在&lt;code&gt;Mapper.xml&lt;/code&gt;中定义或名称有误。如果未定义 或者函数名不同请订正。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况三查询返回值类型未妥善处理&#34;&gt;情况三：查询返回值类型未妥善处理&lt;/h3&gt;&#xA;&lt;p&gt;比如你在&lt;code&gt;UserMapper&lt;/code&gt;中定义了函数的返回值是&lt;code&gt;List&amp;lt;User&amp;gt;&lt;/code&gt;类型，但是你在&lt;code&gt;UserMapper.xml&lt;/code&gt;中未正确配置&lt;code&gt;ResultMap&lt;/code&gt;或&lt;code&gt;ResultType&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况三mapperxml路径配置&#34;&gt;情况三：mapper.xml路径配置&lt;/h3&gt;&#xA;&lt;p&gt;在你的spring-boot配置文件中查看你的xml配置：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` mybatis:   # 配置mapper.xml文件路径   mapper-locations: &#39;classpath*:/**/mapper/**Mapper.xml&#39;   # 配置映射类包名   type-aliases-package: com.bugcatt.domain`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;如果你使用的是&lt;code&gt;Mybatis-Plus&lt;/code&gt;，配置为：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` mybatis-plus:   # 配置mapper.xml文件路径   mapper-locations: &#39;classpath*:/**/mapper/**Mapper.xml&#39;   # 配置映射类包名   type-aliases-package: com.bugcatt.domain`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;情况四mapperjava文件和mapperxml文件不同名&#34;&gt;情况四：Mapper.java文件和Mapper.xml文件不同名&lt;/h3&gt;&#xA;&lt;p&gt;比如你的文件分别为&lt;code&gt;UserMapper.java&lt;/code&gt;和&lt;code&gt;UserrrMapper.xml&lt;/code&gt;（不同名）将它们的名称改为一致试试看。&lt;/p&gt;&#xA;&lt;p&gt;此方法存在争议。部分同学不同名也可以运行。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况五maven未将mapperxml打进包内&#34;&gt;情况五：maven未将mapper.xml打进包内&lt;/h3&gt;&#xA;&lt;p&gt;这种情况可能出现在你未将&lt;code&gt;mapper.xml&lt;/code&gt;放进传统的资源目录中，导致maven编译打包时忽略了你的mapper.xml文件。解决此问题需要在maven配置文件&lt;code&gt;pom.xml&lt;/code&gt;中添加：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`&amp;lt;build&amp;gt;           &amp;lt;resources&amp;gt;                   &amp;lt;resource&amp;gt;                            &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt;                            &amp;lt;includes&amp;gt;                                    &amp;lt;include&amp;gt;**/*.xml&amp;lt;/include&amp;gt;                         &amp;lt;/includes&amp;gt;         &amp;lt;/resource&amp;gt;     &amp;lt;/resources&amp;gt; &amp;lt;/build&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Mybatis-Plus 查询获取数据集最大值(Max())</title>
      <link>http://localhost:1313/posts/post/2020/mybatis-plus-%E6%9F%A5%E8%AF%A2%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E9%9B%86%E6%9C%80%E5%A4%A7%E5%80%BCmax/</link>
      <pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/mybatis-plus-%E6%9F%A5%E8%AF%A2%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E9%9B%86%E6%9C%80%E5%A4%A7%E5%80%BCmax/</guid>
      <description>&lt;p&gt;在使用Mybatis-Plus框架进行查询时, 碰到了需要查询最大值的情况. 但是截止本文章撰写前, Mybatis-Plus并没有提供直接的查询数据最大值的函数. 本篇文章就来记录下如何实现.&lt;/p&gt;&#xA;&lt;h2 id=&#34;前置条件&#34;&gt;前置条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;掌握Spring框架&lt;/li&gt;&#xA;&lt;li&gt;掌握Mybatis&lt;/li&gt;&#xA;&lt;li&gt;掌握Mybatis-Plus的基本使用&lt;/li&gt;&#xA;&lt;li&gt;掌握SQL语句&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;p&gt;我们进行普通查询的时候, 需要用到以下语句:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`xxxMapper.selectOne(QueryWrapper(...));`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;我们只需要分别添加排序(&lt;code&gt;orderByDesc&lt;/code&gt;)和取第1个(&lt;code&gt;limit 1&lt;/code&gt;)就可拿到最大值:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`xxxMapper.selectOne(QueryWrapper(...).orderByDesc(&amp;quot;排序字段名&amp;quot;).last(&amp;quot;limit 1&amp;quot;));`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;拿到最小值只需改为正序排列:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`xxxMapper.selectOne(QueryWrapper(...).orderByAsc(&amp;quot;排序字段名&amp;quot;).last(&amp;quot;limit 1&amp;quot;));`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;搞定.&lt;/p&gt;&#xA;&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;&#xA;&lt;p&gt;本文的方法虽然实现了我们的目标. 但是&lt;strong&gt;仅为代码美观&lt;/strong&gt;. 实际上这样的查询效率可能不高. 生产环境的项目慎用.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mybatis-Plus 更新字段数据为null</title>
      <link>http://localhost:1313/posts/post/2020/mybatis-plus-%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5%E6%95%B0%E6%8D%AE%E4%B8%BAnull/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/mybatis-plus-%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5%E6%95%B0%E6%8D%AE%E4%B8%BAnull/</guid>
      <description>&lt;p&gt;在使用Mybatis-Plus开发项目时, 需要将数据库某字段值设置为null. 但是仅将实体类的值赋值为null是不够的. 还需要为实体类的属性添加以下注解:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`@TableField(fill = FieldFill.UPDATE)`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;比如你需要设置某表的字段name为null, 则需要进入实体类, 在对应的属性上添加注解:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`@TableField(fill = FieldFill.UPDATE) private String name;`&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>MyBatis-Plus 读写 Mysql的Json类型字段数据</title>
      <link>http://localhost:1313/posts/post/2020/mybatis-plus-%E8%AF%BB%E5%86%99-mysql%E7%9A%84json%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/mybatis-plus-%E8%AF%BB%E5%86%99-mysql%E7%9A%84json%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E6%95%B0%E6%8D%AE/</guid>
      <description>&lt;p&gt;Mybatis-Plus是一款相当优秀的开源框架, 为单表操作提供了极大的便利. 这次阿航在写服务端时, 需要对MySQL的json类型字段进行操作, 忙活了一阵, 终于找到了解决方案, 并在本篇文章进行记录.&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;p&gt;本篇文章环境:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本号&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Mybatis-Plus&lt;/td&gt;&#xA;          &lt;td&gt;3.3.2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;本篇文章假定:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;你掌握Java/Kotlin基础(注解)&lt;/li&gt;&#xA;&lt;li&gt;你掌握Mybatis以及Mybatis-Plus的基本使用&lt;/li&gt;&#xA;&lt;li&gt;你了解FastJSON或Gson&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;notice&amp;rdquo;]如果还不具备以上的条件, 阅读本篇文章可能会有阻碍! 建议先满足条件后再尝试阅读![/epcl_box]&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]老规矩, 速度快的同学直接向下拉. 看核心代码.[/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;&#xA;&lt;p&gt;我们拥有一个json类型的数据库字段, 我们在进行写操作时, 不希望将对象转为json字符串再存数据库. 读数据也是一样. 我们希望这一切自动完成.&lt;/p&gt;&#xA;&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;&#xA;&lt;p&gt;我们先来创建一个数据库表:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE TABLE `mybatis_json_test`  (&#xA;  `id` int(10) NOT NULL AUTO_INCREMENT PRIMARY KEY,&#xA;  `extra_object` json NULL,&#xA;  `extra_list` json NULL,&#xA;  `extra_array` json NULL&#xA;);&#xA;&#xA;INSERT INTO `mybatis_json_test`&#xA;VALUES&#xA;&#x9;( 1, &amp;#39;{\&amp;#34;id\&amp;#34;: 1, \&amp;#34;name\&amp;#34;: \&amp;#34;2\&amp;#34;}&amp;#39;, &amp;#39;[{\&amp;#34;id\&amp;#34;: 1, \&amp;#34;name\&amp;#34;: \&amp;#34;2\&amp;#34;}]&amp;#39;, &amp;#39;[{\&amp;#34;id\&amp;#34;: 1, \&amp;#34;name\&amp;#34;: \&amp;#34;2\&amp;#34;}]&amp;#39; );&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建表对应实体类&#34;&gt;创建表对应实体类&lt;/h3&gt;&#xA;&lt;p&gt;首先创建实体类&lt;code&gt;MybatisJsonTest&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>MyBatis Plus 分页查询返回的 数据总数total为0 的解决方案</title>
      <link>http://localhost:1313/posts/post/2020/mybatis-plus-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9E%E7%9A%84-%E6%95%B0%E6%8D%AE%E6%80%BB%E6%95%B0total%E4%B8%BA0-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/mybatis-plus-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9E%E7%9A%84-%E6%95%B0%E6%8D%AE%E6%80%BB%E6%95%B0total%E4%B8%BA0-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>&lt;p&gt;今天在使用MyBatis-Plus在进行分页查询时, 返回的&lt;code&gt;IPage&lt;/code&gt;对象数据的&lt;code&gt;total&lt;/code&gt;属性一直是&lt;code&gt;0&lt;/code&gt;. 没有数据总数, 前端的分页部分将会比较难搞, 在此记录一下排坑过程.&lt;/p&gt;&#xA;&lt;h2 id=&#34;开发环境&#34;&gt;开发环境&lt;/h2&gt;&#xA;&lt;p&gt;本教程的开发环境如下:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;版本&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;JDK&lt;/td&gt;&#xA;          &lt;td&gt;1.8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Spring Boot&lt;/td&gt;&#xA;          &lt;td&gt;2.1.14.RELEASE&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Mybatis-Plus&lt;/td&gt;&#xA;          &lt;td&gt;3.2.0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方案一-添加配置类-注入paginationinterceptor推荐&#34;&gt;方案一: 添加配置类, 注入&lt;code&gt;PaginationInterceptor&lt;/code&gt;(推荐)&lt;/h3&gt;&#xA;&lt;p&gt;创建类文件&lt;code&gt;MybatisPlusConfig&lt;/code&gt;文件, 输入以下代码:&lt;/p&gt;&#xA;&lt;p&gt;[epcl_tabs] [epcl_tab title=&amp;ldquo;Kotlin&amp;rdquo;]&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#xA;import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor&#xA;import org.springframework.context.annotation.Bean&#xA;import org.springframework.context.annotation.Configuration&#xA;&#xA;@Configuration&#xA;class MybatisPlusConfig {&#xA;    /**&#xA;     * 分页插件&#xA;     */&#xA;    @Bean&#xA;    fun paginationInterceptor(): PaginationInterceptor {&#xA;        return PaginationInterceptor()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[/epcl_tab] [epcl_tab title=&amp;ldquo;Java&amp;rdquo;]&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#xA;import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;&#xA;import org.springframework.context.annotation.Bean;&#xA;import org.springframework.context.annotation.Configuration;&#xA;&#xA;@Configuration&#xA;public class MybatisPlusConfig {&#xA;    /**&#xA;     * 分页插件&#xA;     */&#xA;    @Bean&#xA;    public PaginationInterceptor paginationInterceptor() {&#xA;        return new PaginationInterceptor();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[/epcl_tab] [/epcl_tabs]&lt;/p&gt;</description>
    </item>
    <item>
      <title>历经1232天! 阿里正式发布《Java开发手册 泰山版》仍然免费！(附正版下载)</title>
      <link>http://localhost:1313/posts/post/2020/%E5%8E%86%E7%BB%8F1232%E5%A4%A9-%E9%98%BF%E9%87%8C%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-%E6%B3%B0%E5%B1%B1%E7%89%88/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E5%8E%86%E7%BB%8F1232%E5%A4%A9-%E9%98%BF%E9%87%8C%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-%E6%B3%B0%E5%B1%B1%E7%89%88/</guid>
      <description>&lt;p&gt;阿里巴巴的Java开发规范系列一直被大多数Java程序员认可并遵循. 这不, 在今天早上8:00, 阿里巴巴再次发布了新版本《Java开发手册泰山版》.&lt;/p&gt;&#xA;&lt;p&gt;先来看一下封面:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E6%B3%B0%E5%B1%B1%E7%89%88%E5%B0%81%E9%9D%A2.png&#34; alt=&#34;历经1232天! 阿里正式发布《Java开发手册 泰山版》仍然免费！(附正版下载)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;有种武林的感觉~&lt;/p&gt;&#xA;&lt;p&gt;我们先来看看阿里巴巴开发规范的大版本历史(数据来自github/p3c):&lt;/p&gt;&#xA;&lt;p&gt;我们先来看看阿里巴巴开发规范的大版本历史:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;版本号&lt;/th&gt;&#xA;          &lt;th&gt;版本名&lt;/th&gt;&#xA;          &lt;th&gt;更新日期&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;--&lt;/td&gt;&#xA;          &lt;td&gt;试读版&lt;/td&gt;&#xA;          &lt;td&gt;2016.12.07&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.0.0&lt;/td&gt;&#xA;          &lt;td&gt;正式版&lt;/td&gt;&#xA;          &lt;td&gt;2017.02.09&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.2.0&lt;/td&gt;&#xA;          &lt;td&gt;完美版&lt;/td&gt;&#xA;          &lt;td&gt;2017.05.20&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.3.0&lt;/td&gt;&#xA;          &lt;td&gt;终极版&lt;/td&gt;&#xA;          &lt;td&gt;2017.09.25&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.3.1&lt;/td&gt;&#xA;          &lt;td&gt;纪念版&lt;/td&gt;&#xA;          &lt;td&gt;2017.11.30&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.4.0&lt;/td&gt;&#xA;          &lt;td&gt;详尽版&lt;/td&gt;&#xA;          &lt;td&gt;2018.05.20&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.5.0&lt;/td&gt;&#xA;          &lt;td&gt;华山版&lt;/td&gt;&#xA;          &lt;td&gt;2019.06.19&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.6.0&lt;/td&gt;&#xA;          &lt;td&gt;泰山版&lt;/td&gt;&#xA;          &lt;td&gt;2020.04.22&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;个人认为, 还是华山版的封面更酷一点😏😏:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E5%8D%8E%E5%B1%B1%E7%89%88%E5%B0%81%E9%9D%A2.png&#34; alt=&#34;历经1232天! 阿里正式发布《Java开发手册 泰山版》仍然免费！(附正版下载)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;老规矩, 再次把文章目录放上来, 让各位瞧一下:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E6%B3%B0%E5%B1%B1%E7%89%88%E7%9B%AE%E5%BD%95.png&#34; alt=&#34;历经1232天! 阿里正式发布《Java开发手册 泰山版》仍然免费！(附正版下载)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;依然是熟悉的代码规范、异常处理、单元测试、安全规约、Mysql、工程结构以及设计规范.&lt;/p&gt;&#xA;&lt;p&gt;那么, 请大家自行拿走资源, 看看最新的泰山版能带给我们怎样的体验吧!&lt;/p&gt;&#xA;&lt;p&gt;关注&amp;quot;&lt;strong&gt;阿航的技术小站&lt;/strong&gt;&amp;quot;, 回复&amp;quot;&lt;strong&gt;Java开发手册&lt;/strong&gt;&amp;ldquo;立即下载!&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%BA%8C%E7%BB%B4%E7%A0%812.png&#34; alt=&#34;历经1232天! 阿里正式发布《Java开发手册 泰山版》仍然免费！(附正版下载)&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
