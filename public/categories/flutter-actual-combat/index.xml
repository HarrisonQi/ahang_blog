<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flutter-Actual-Combat on 阿航的技术小站</title>
    <link>http://localhost:1313/categories/flutter-actual-combat/</link>
    <description>Recent content in Flutter-Actual-Combat on 阿航的技术小站</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 10 Dec 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/flutter-actual-combat/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>修改Flutter APP启动图标/Launcher Icon</title>
      <link>http://localhost:1313/posts/post/2020/%E4%BF%AE%E6%94%B9flutter-app%E5%90%AF%E5%8A%A8%E5%9B%BE%E6%A0%87-launcher-icon/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E4%BF%AE%E6%94%B9flutter-app%E5%90%AF%E5%8A%A8%E5%9B%BE%E6%A0%87-launcher-icon/</guid>
      <description>&lt;h2 id=&#34;开门见山&#34;&gt;开门见山&lt;/h2&gt;&#xA;&lt;p&gt;为了简化修改Flutter启动图标的过程, &lt;code&gt;Flutter Launcher Icons&lt;/code&gt;诞生了.&lt;/p&gt;&#xA;&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;&#xA;&lt;p&gt;访问 &lt;a href=&#34;https://pub.dev/packages/flutter_launcher_icons&#34; target=&#34;_blank&#34;&gt;Flutter Launcher Icons 库网址&lt;/a&gt;&#xA; . 访问慢的同学可以使用&lt;a href=&#34;https://pub.flutter-io.cn/packages/flutter_launcher_icons&#34; target=&#34;_blank&#34;&gt;国内镜像&lt;/a&gt;&#xA;.&lt;/p&gt;&#xA;&lt;p&gt;修改你的&lt;code&gt;pubspec.yaml&lt;/code&gt;文件(版本号替换为最新的):&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` dev_dependencies:   flutter_launcher_icons: ^0.8.1`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在资源目录中创建你的icon文件, 比如路径&lt;code&gt;assets/icon/icon.png&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;然后再次修改&lt;code&gt;pubspec.yaml&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` flutter_icons:   android: &amp;quot;launcher_icon&amp;quot;   ios: true   image_path: &amp;quot;assets/icon/icon.png&amp;quot;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在终端中分别运行以下命令:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`flutter pub get`&#xA;&#xA;`flutter pub run flutter_launcher_icons:main`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;其他资源&#34;&gt;其他资源&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/fluttercommunity/flutter_launcher_icons/tree/master/example&#34; target=&#34;_blank&#34;&gt;点击此处&lt;/a&gt;&#xA;查看完整示例项目&lt;/li&gt;&#xA;&lt;li&gt;如果使用该库出现任何问题, 请&lt;a href=&#34;https://github.com/fluttercommunity/flutter_launcher_icons/issues&#34; target=&#34;_blank&#34;&gt;提issue&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Flutter 调整 Switch 组件尺寸</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E8%B0%83%E6%95%B4-switch-%E7%BB%84%E4%BB%B6%E5%B0%BA%E5%AF%B8/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E8%B0%83%E6%95%B4-switch-%E7%BB%84%E4%BB%B6%E5%B0%BA%E5%AF%B8/</guid>
      <description>&lt;p&gt;默认的Switch组件并没有提供类似&lt;code&gt;Size&lt;/code&gt;或者&lt;code&gt;Height&lt;/code&gt;,&lt;code&gt;Weight&lt;/code&gt;等参数。本篇文章就来记录下Flutter如何调整Switch组件尺寸。&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;普通的switch&#34;&gt;普通的Switch&lt;/h3&gt;&#xA;&lt;p&gt;通常，我们声明一个Switch组件会这样写。运行以下代码：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` import &#39;package:flutter/material.dart&#39;;  void main() =&amp;gt; runApp(MyApp());  class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Switch Size&#39;,       home: MyHomePage(),     );   } }  class MyHomePage extends StatefulWidget {   MyHomePage({Key key}) : super(key: key);    @override   _MyHomePageState createState() =&amp;gt; _MyHomePageState(); }  class _MyHomePageState extends State {   bool _enabled = true;    @override   Widget build(BuildContext context) {     return Scaffold(         appBar: AppBar(           title: Text(&#39;Switch Size&#39;),         ),         body: Center(           child: Column(             mainAxisAlignment: MainAxisAlignment.center,             children: [               Switch(                   value: _enabled,                   onChanged: (bool) {                     _enabled = bool;                     setState(() {});                   }),             ],           ),         ));   } }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;🟢 运行项目, 可以看到一个朴实无华的Switch：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter/Dart List去重, 去除重复列表项</title>
      <link>http://localhost:1313/posts/post/2020/flutter-dart-list%E5%8E%BB%E9%87%8D-%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%88%97%E8%A1%A8%E9%A1%B9/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-dart-list%E5%8E%BB%E9%87%8D-%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%88%97%E8%A1%A8%E9%A1%B9/</guid>
      <description>&lt;p&gt;有时我们需要过滤掉重复的列表项, 本篇文章就来介绍下Flutter/Dart 如何进行 List去重, 去除重复列表项.&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方法一-list与set互转&#34;&gt;方法一: List与Set互转&lt;/h3&gt;&#xA;&lt;p&gt;基于Set集合的不可重复特性, 我们利用该特性可轻松解决:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`void main() {   // 声明一个集合   var ids = [1, 1, 4, 4, 5, 6, 6];   // 进行去重, 存储去重后的集合   var distinctIds = ids.toSet().toList(); }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;当然, 基于该思路还有更牛逼的写法:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`var distinctIds = [...{...ids}];`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;success&amp;rdquo;]这也许是最优雅的解决方案.[/epcl_box]&lt;/p&gt;&#xA;&lt;h3 id=&#34;方法二-list与set互转保留顺序&#34;&gt;方法二: List与Set互转(保留顺序)&lt;/h3&gt;&#xA;&lt;p&gt;方案一虽然优雅, 但也不是完美的. 它无法&lt;strong&gt;保留顺序&lt;/strong&gt;. 如果我们的需求对顺序有绝对的要求时, 就需要以下方法了:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import &#39;dart:collection&#39;; void main() {   // 声明一个集合   List arr = [&amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;d&amp;quot;];   // 进行去重, 存储去重后的集合   List result = LinkedHashSet.from(arr).toList(); }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;虽然不如方法一优雅, 但是其保留了顺序.&lt;/p&gt;</description>
    </item>
    <item>
      <title>妥善处理Flutter的404 Not Found 未找到错误</title>
      <link>http://localhost:1313/posts/post/2020/%E5%A6%A5%E5%96%84%E5%A4%84%E7%90%86flutter%E7%9A%84404-not-found-%E6%9C%AA%E6%89%BE%E5%88%B0%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E5%A6%A5%E5%96%84%E5%A4%84%E7%90%86flutter%E7%9A%84404-not-found-%E6%9C%AA%E6%89%BE%E5%88%B0%E9%94%99%E8%AF%AF/</guid>
      <description>&lt;p&gt;Flutter已经支持了Web端, 我们可以使用其创建动态网站了. Flutter能够处理来自Web的错误, 比如404未找到. 但是如何为Flutter应用创建自定义的404页面呢?&lt;/p&gt;&#xA;&lt;p&gt;本文将介绍如何创建自定义页面, 用于用户在试图搜索不存在的页面时给用户友好提示.&lt;/p&gt;&#xA;&lt;h2 id=&#34;在flutter中将客户端重定向至自定义404页面&#34;&gt;在Flutter中将客户端重定向至自定义404页面&lt;/h2&gt;&#xA;&lt;p&gt;每个人在上网冲浪时都遇到过&amp;quot;404 Not Found&amp;quot;、&amp;ldquo;页面不存在&amp;quot;等等. Flutter通过自动将你重定向至初始路由来解决此问题(通常是APP首页). 观赏下一些大厂好看的404页面:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E5%A6%A5%E5%96%84%E5%A4%84%E7%90%86Flutter%E7%9A%84404-Not-Found-%E6%9C%AA%E6%89%BE%E5%88%B0%E9%94%99%E8%AF%AF-01-1500x783.gif&#34; alt=&#34;AirBnb(爱彼迎) 的404页面&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;AirBnb(爱彼迎) 的404页面&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E5%A6%A5%E5%96%84%E5%A4%84%E7%90%86Flutter%E7%9A%84404-Not-Found-%E6%9C%AA%E6%89%BE%E5%88%B0%E9%94%99%E8%AF%AF-02.png&#34; alt=&#34;Github 的 404页面&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;Github 的 404页面&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E5%A6%A5%E5%96%84%E5%A4%84%E7%90%86Flutter%E7%9A%84404-Not-Found-%E6%9C%AA%E6%89%BE%E5%88%B0%E9%94%99%E8%AF%AF-03-1500x681.png&#34; alt=&#34;Flutter 的 404页面&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 指定TextField输入框(文本框)初始值(初始文字)</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%8C%87%E5%AE%9Atextfield%E8%BE%93%E5%85%A5%E6%A1%86%E6%96%87%E6%9C%AC%E6%A1%86%E5%88%9D%E5%A7%8B%E5%80%BC%E5%88%9D%E5%A7%8B%E6%96%87%E5%AD%97/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%8C%87%E5%AE%9Atextfield%E8%BE%93%E5%85%A5%E6%A1%86%E6%96%87%E6%9C%AC%E6%A1%86%E5%88%9D%E5%A7%8B%E5%80%BC%E5%88%9D%E5%A7%8B%E6%96%87%E5%AD%97/</guid>
      <description>&lt;p&gt;输入框也许是最常用的表单项了. 添加数据时我们直接使用空的输入框就可以了. 编辑的时候, 我们需要把旧的数据预先放在输入框内. 那么如何为其指定初始值呢? 本篇文章就来记录下Flutter如何指定TextField输入框(文本框)初始值(初始文字).&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看一下我们的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E6%8C%87%E5%AE%9ATextField%E5%88%9D%E5%A7%8B%E5%80%BC-01.png&#34; alt=&#34;Flutter-指定TextField初始值-01&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]老规矩. 速度快的同学直接看下方的核心代码![/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编辑数据使用的输入框&lt;/li&gt;&#xA;&lt;li&gt;输入框提供默认数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方法一-textfield&#34;&gt;方法一: TextField&lt;/h3&gt;&#xA;&lt;p&gt;创建一个dart文件, 内容为以下代码:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import &#39;package:flutter/material.dart&#39;;  void main() =&amp;gt; runApp(MyApp());  class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Flutter Demo&#39;,       theme: ThemeData(         primarySwatch: Colors.blue,       ),       home: MyHomePage(title: &#39;为输入框提供初始值&#39;),     );   } }  class MyHomePage extends StatefulWidget {   MyHomePage({Key key, this.title}) : super(key: key);   final String title;    @override   _MyHomePageState createState() =&amp;gt; _MyHomePageState(); }  class _MyHomePageState extends State {    @override   Widget build(BuildContext context) {     return Scaffold(       appBar: AppBar(         title: Text(widget.title),       ),       body: Center(         child: Column(           mainAxisAlignment: MainAxisAlignment.center,           children: [             Container(               width: MediaQuery.of(context).size.width * 0.3,               child: TextField(                 controller: TextEditingController()..text=&amp;quot;你今天真好看&amp;quot;,               ),             )           ],         ),       ),     );   } }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;重点放在&lt;code&gt;TextField&lt;/code&gt;内部. 我们为其&lt;code&gt;controller&lt;/code&gt;参数赋值为&lt;code&gt;TextEditingController()..text=&amp;quot;你今天真好看&amp;quot;&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter根据屏幕尺寸(宽度/高度)的百分比设定元素(小部件/组件/Widget)尺寸</title>
      <link>http://localhost:1313/posts/post/2020/flutter%E6%A0%B9%E6%8D%AE%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E5%AE%BD%E5%BA%A6-%E9%AB%98%E5%BA%A6%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%BE%E5%AE%9A%E5%85%83%E7%B4%A0%E5%B0%8F%E9%83%A8%E4%BB%B6/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter%E6%A0%B9%E6%8D%AE%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E5%AE%BD%E5%BA%A6-%E9%AB%98%E5%BA%A6%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%BE%E5%AE%9A%E5%85%83%E7%B4%A0%E5%B0%8F%E9%83%A8%E4%BB%B6/</guid>
      <description>&lt;p&gt;最让前端开发人员头疼的问题之一就是屏幕尺寸兼容性问题了. Web端开发人员经常会对测试人员说: &amp;ldquo;换个浏览器试一下&amp;rdquo;.😂 虽然现在的主流的屏幕大小非常相似, 但是我们也要事先处理好. 本篇文章就来记录Flutter如何根据屏幕尺寸(宽度/高度)的百分比设定元素(小部件/组件/Widget)尺寸.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看一下效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E8%AE%BE%E7%BD%AE%E5%85%83%E7%B4%A0%E5%B0%BA%E5%AF%B8-04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你掌握Flutter基础.&lt;/li&gt;&#xA;&lt;li&gt;你了解基础的Flutter布局.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章的开发环境:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]老规矩, 速度快的同学直接看最下方的核心代码![/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;&#xA;&lt;p&gt;创建一个Flutter项目, 替换&lt;code&gt;main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import &#39;package:flutter/material.dart&#39;;  void main() =&amp;gt; runApp(MyApp());  class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Flutter Demo&#39;,       theme: ThemeData(         primarySwatch: Colors.blue,       ),       home: MyHomePage(title: &#39;屏幕百分比设定元素尺寸&#39;),     );   } }  class MyHomePage extends StatefulWidget {   MyHomePage({Key key, this.title}) : super(key: key);   final String title;    @override   _MyHomePageState createState() =&amp;gt; _MyHomePageState(); }  class _MyHomePageState extends State&amp;lt;MyHomePage&amp;gt; {    @override   Widget build(BuildContext context) {     return Scaffold(       appBar: AppBar(         title: Text(widget.title),       ),       body: Row(         children: [           Container(             color: Color(0xFFFF6666),             child: Text(&amp;quot;30%&amp;quot;, style: Theme.of(context).textTheme.headline2,),           ),           Container(             color: Color(0xFFFFFF66),             child: Text(&amp;quot;70%&amp;quot;, style: Theme.of(context).textTheme.headline2,),           )         ],       ),     );   } }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;🟢 运行项目, 应该是这样的:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 隐藏/显示某widget组件、切换显示状态</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E9%9A%90%E8%97%8F-%E6%98%BE%E7%A4%BA%E6%9F%90widget%E7%BB%84%E4%BB%B6%E5%88%87%E6%8D%A2%E6%98%BE%E7%A4%BA%E7%8A%B6%E6%80%81/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E9%9A%90%E8%97%8F-%E6%98%BE%E7%A4%BA%E6%9F%90widget%E7%BB%84%E4%BB%B6%E5%88%87%E6%8D%A2%E6%98%BE%E7%A4%BA%E7%8A%B6%E6%80%81/</guid>
      <description>&lt;p&gt;在进行Flutter开发时, 我们需要对某个widget进行显示与隐藏状态的切换. 这个需求还是蛮常见的. 本篇文章就来记录下Flutter如何隐藏/显示某widget组件、切换显示状态.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们要实现的最终效果:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E9%9A%90%E8%97%8F%E6%98%BE%E7%A4%BA%E6%9F%90widget%E7%BB%84%E4%BB%B6-06.gif&#34; alt=&#34;Flutter-隐藏显示某widget组件-06&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;隐藏Widget&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E9%9A%90%E8%97%8F%E6%98%BE%E7%A4%BA%E6%9F%90widget%E7%BB%84%E4%BB%B6-08.gif&#34; alt=&#34;Flutter 隐藏显示某widget组件-08&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;隐藏且不影响布局&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你已经掌握Flutter基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章环境:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]老规矩, 速度快的同学直接去看核心代码![/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;&#xA;&lt;p&gt;创建一个Flutter项目, 替换文件&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import &#39;package:flutter/material.dart&#39;;  void main() =&amp;gt; runApp(MyApp());  class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Show Hide widget&#39;,       theme: ThemeData(         primarySwatch: Colors.blue,       ),       home: MyHomePage(title: &#39;Show &amp;amp; Hide Widget&#39;),     );   } }  class MyHomePage extends StatefulWidget {   MyHomePage({Key key, this.title}) : super(key: key);   final String title;    @override   _MyHomePageState createState() =&amp;gt; _MyHomePageState(); }  class _MyHomePageState extends State {   // 存储&amp;quot;是否显示&amp;quot;状态   bool _isShow = true;    @override   Widget build(BuildContext context) {     return Scaffold(       appBar: AppBar(         title: Text(widget.title),       ),       body: Center(         child: Column(           mainAxisAlignment: MainAxisAlignment.center,           children: [             Text(&#39;一个文本Widget&#39;, style: Theme.of(context).textTheme.headline3),             RaisedButton(               child: Text(                 _isShow ? &amp;quot;隐藏&amp;quot; : &amp;quot;显示&amp;quot;,                 style: Theme.of(context).textTheme.headline5,               ),               onPressed: () {                 setState(() {                   _isShow = !_isShow;                 });               },             )           ],         ),       ),     );   } }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;我们创建了布尔类型的实例变量&lt;code&gt;_isShow&lt;/code&gt;, 用于保存widget的显示状态.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 隐藏/移除导航栏的默认返回按钮</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E9%9A%90%E8%97%8F-%E7%A7%BB%E9%99%A4%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E9%BB%98%E8%AE%A4%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E9%9A%90%E8%97%8F-%E7%A7%BB%E9%99%A4%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E9%BB%98%E8%AE%A4%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE/</guid>
      <description>&lt;p&gt;在实际项目开发中, 我们在进行页面跳转时, 偶尔会跳到不可返回的页面(比如退出登录后). 本篇文章就来记录下 Flutter 如何隐藏/移除导航栏的默认返回按钮.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下实际效果:&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;p&gt;移除导航栏的默认返回按钮适用于:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;退出登录后禁止返回&lt;/li&gt;&#xA;&lt;li&gt;跳转至一个全新的页面, 不可返回&lt;/li&gt;&#xA;&lt;li&gt;禁止返回的任何页面&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;掌握Flutter基础&lt;/li&gt;&#xA;&lt;li&gt;掌握Flutter页面跳转的基本操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章的环境:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flutter&lt;/td&gt;&#xA;          &lt;td&gt;1.19.0-2.0.pre&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;&#xA;&lt;p&gt;创建新文件&lt;code&gt;./lib/main.dart&lt;/code&gt;(或者其他你想要的文件名):&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Remove back button&amp;#39;,&#xA;      home: FirstPage(),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class FirstPage extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(&amp;#34;First Page&amp;#34;),&#xA;      ),&#xA;      body: Center(&#xA;        child: RaisedButton(&#xA;          child: Text(&amp;#34;跳转到下一页&amp;#34;),&#xA;          onPressed: () {&#xA;            Navigator.push(context, MaterialPageRoute(builder: (context) {&#xA;              return SecondPage();&#xA;            }));&#xA;          },&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class SecondPage extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(&amp;#34;Second Page&amp;#34;),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🟢 运行, 可以看到demo提供了正常跳转:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 禁用按钮/禁止按钮点击</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E7%A6%81%E7%94%A8%E6%8C%89%E9%92%AE-%E7%A6%81%E6%AD%A2%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E7%A6%81%E7%94%A8%E6%8C%89%E9%92%AE-%E7%A6%81%E6%AD%A2%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB/</guid>
      <description>&lt;p&gt;某些情况下我们需要禁用某个按钮的点击事件. 通过灵活的按钮禁止状态切换可以实现很多实际需求. 本篇文章就来记录下Flutter如何禁用按钮以及禁止按钮点击.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E7%A6%81%E7%94%A8%E6%8C%89%E9%92%AE%E7%A6%81%E6%AD%A2%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB-04.gif&#34; alt=&#34;Flutter-禁用按钮禁止按钮点击-04&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户权限不足, 禁止某些按钮点击.&lt;/li&gt;&#xA;&lt;li&gt;用户表单未填完, 禁止下一步.&lt;/li&gt;&#xA;&lt;li&gt;用户阅读相关条款至少X秒, 倒数结束前锁定按钮.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你了解Flutter基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章的环境:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Windows&lt;/td&gt;&#xA;          &lt;td&gt;10&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Android Studio&lt;/td&gt;&#xA;          &lt;td&gt;3.5&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flutter&lt;/td&gt;&#xA;          &lt;td&gt;1.19.0-2.0.pre&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;&#xA;&lt;p&gt;创建一个空项目.&lt;/p&gt;&#xA;&lt;p&gt;删除&lt;code&gt;./test&lt;/code&gt;目录.&lt;/p&gt;&#xA;&lt;p&gt;替换&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/cupertino.dart&amp;#39;;&#xA;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Disable Button&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyHomePage(title: &amp;#39;Disable Button&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;&#xA;  // 是否开启按钮&#xA;  bool isEnabled = true;&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(title: Text(widget.title)),&#xA;      body: Center(&#xA;        child: Column(&#xA;          mainAxisAlignment: MainAxisAlignment.center,&#xA;          children: [&#xA;&#xA;            // 开关控件&#xA;            CupertinoSwitch(&#xA;              value: this.isEnabled,&#xA;              onChanged: (bool value) {&#xA;                setState(() {&#xA;                  this.isEnabled = value;&#xA;                });&#xA;              },&#xA;            ),&#xA;            RaisedButton(child: Text(&amp;#34;目标按钮&amp;#34;, style: TextStyle(fontSize: 25,color: Colors.white)), color: Colors.blue,onPressed: (){}),&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🟢 运行项目, 应该会出现一个开关控件和一个&amp;quot;目标按钮&amp;quot;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter为widget添加border边框、下划线</title>
      <link>http://localhost:1313/posts/post/2020/flutter%E4%B8%BAwidget%E6%B7%BB%E5%8A%A0border%E8%BE%B9%E6%A1%86%E4%B8%8B%E5%88%92%E7%BA%BF/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter%E4%B8%BAwidget%E6%B7%BB%E5%8A%A0border%E8%BE%B9%E6%A1%86%E4%B8%8B%E5%88%92%E7%BA%BF/</guid>
      <description>&lt;p&gt;有时我们需要为Flutter的widget小部件添加各式各样的边框. 但是并不是所有widget都提供了边框的属性, 本篇文章就来记录下如何为Flutter 的 widget 添加border边框、下划线.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们要实现的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E4%B8%BAwidget%E6%B7%BB%E5%8A%A0border%E8%BE%B9%E6%A1%86-11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你已经掌握Flutter基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章的开发环境:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;操作系统&lt;/td&gt;&#xA;          &lt;td&gt;Windows 10&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flutter&lt;/td&gt;&#xA;          &lt;td&gt;1.19.0-2.0.pre&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;IDE&lt;/td&gt;&#xA;          &lt;td&gt;Android Studio 3.5&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]速度快的同学直接复制下方的&amp;quot;全部源码&amp;quot;自行研究! 稳一点的同学请按照教程一步一步来! [/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建项目清理代码&#34;&gt;创建项目&amp;amp;清理代码&lt;/h3&gt;&#xA;&lt;p&gt;为了便于演示, 阿航在这里创建一个空项目.&lt;/p&gt;&#xA;&lt;p&gt;创建完成后, 删除&lt;code&gt;./test&lt;/code&gt;目录. 因为我们的demo无需测试类.&lt;/p&gt;&#xA;&lt;p&gt;替换&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Awesome Border&amp;#39;,&#xA;      theme: ThemeData(primarySwatch: Colors.blue),&#xA;      home: MyHomePage(title: &amp;#39;My Awesome Border&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;  // 即将渲染的边框组件集合&#xA;  List _borderWidgets;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    // 处理带边框的对象集合&#xA;    _borderWidgets = [];&#xA;    super.initState();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    // 为了美观, 将内容全部居中处理&#xA;    _borderWidgets.forEach((element) {&#xA;      _borderWidgets[_borderWidgets.indexOf(element)] = Center(child: element);&#xA;    });&#xA;&#xA;    return Scaffold(&#xA;      appBar: AppBar(title: Text(widget.title)),&#xA;      body: Center(&#xA;          child: Container(&#xA;        padding: EdgeInsets.all(20),&#xA;        child: GridView.count(&#xA;          padding: const EdgeInsets.all(8.0),&#xA;          crossAxisCount: 3,&#xA;          crossAxisSpacing: 5,&#xA;          mainAxisSpacing: 5,&#xA;          children: _borderWidgets,&#xA;        ),&#xA;      )),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;我们首先在&lt;code&gt;26&lt;/code&gt;行定义了实例变量&lt;code&gt;_borderWidgets&lt;/code&gt;, 它将保存我们所有的用来展示边框的Widget.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 实现毛玻璃/磨砂效果</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E5%AE%9E%E7%8E%B0%E6%AF%9B%E7%8E%BB%E7%92%83-%E7%A3%A8%E7%A0%82%E6%95%88%E6%9E%9C/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E5%AE%9E%E7%8E%B0%E6%AF%9B%E7%8E%BB%E7%92%83-%E7%A3%A8%E7%A0%82%E6%95%88%E6%9E%9C/</guid>
      <description>&lt;p&gt;还记得之前风靡一时的Windows 7的毛玻璃效果吗? 虽然过去了好多年, 但毛玻璃效果一直没有过时👨‍🎓. 本篇文章就来记录下如何使用Flutter实现毛玻璃/磨砂效果.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们要实现的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E5%AE%9E%E7%8E%B0%E6%AF%9B%E7%8E%BB%E7%92%83%E7%A3%A8%E7%A0%82%E6%95%88%E6%9E%9C-05.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;环境需具备的条件&#34;&gt;环境&amp;amp;需具备的条件&lt;/h2&gt;&#xA;&lt;p&gt;本篇文章的开发环境:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;若想顺利阅读本篇教程, 你需要具备:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机已安装Flutter开发环境&lt;/li&gt;&#xA;&lt;li&gt;掌握Flutter基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建项目-清理代码&#34;&gt;创建项目, 清理代码&lt;/h3&gt;&#xA;&lt;p&gt;先来创建一个空项目, 直接用IDE创建或在终端中输入:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flutter create my_frosted&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除&lt;code&gt;./test&lt;/code&gt;目录. 并替换&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;My Frosted Demo&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyFrosted(),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyFrosted extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      body: Stack(&#xA;        children: [],&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🟢 运行项目, 可以看到白白的一片, 啥也没有:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter Clipboard 剪贴板操作: 复制到剪贴板 / 从剪贴板中获取</title>
      <link>http://localhost:1313/posts/post/2020/flutter-clipboard-%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C-%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF-%E4%BB%8E%E5%89%AA%E8%B4%B4%E6%9D%BF%E4%B8%AD%E8%8E%B7%E5%8F%96/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-clipboard-%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C-%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF-%E4%BB%8E%E5%89%AA%E8%B4%B4%E6%9D%BF%E4%B8%AD%E8%8E%B7%E5%8F%96/</guid>
      <description>&lt;p&gt;我们在使用Flutter进行开发时, 有时会使用类似&amp;quot;复制本段文字&amp;quot;的功能. 为了提升用户体验, 我们不希望用户长按文字, 再自行复制, 我们希望提供一个按钮直接点击复制, 甚至自动复制! 反之从剪贴板获取也一样.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 不说废话, 直接展示最终效果:&lt;/p&gt;&#xA;&lt;h4 id=&#34;复制到剪贴板&#34;&gt;复制到剪贴板&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C-03.gif&#34; alt=&#34;Flutter剪贴板操作-03&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;从剪贴板获取粘贴&#34;&gt;从剪贴板获取(粘贴)&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C-04.gif&#34; alt=&#34;Flutter剪贴板操作-04&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]如果你了解阿航的技术小站, 应该会知悉每篇文章都会提供相当详细且完整的源码. [/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;h3 id=&#34;复制到剪贴板-1&#34;&gt;复制到剪贴板&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;生成了运单号, 需要用户进行保存;&lt;/li&gt;&#xA;&lt;li&gt;某些微商APP需要复制文案, 发布朋友圈;&lt;/li&gt;&#xA;&lt;li&gt;文学类APP中, 发现一段非常好的句子, 想发给好友.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;从剪贴板中获取&#34;&gt;从剪贴板中获取&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;直接填入用户复制的短信验证码.&lt;/li&gt;&#xA;&lt;li&gt;淘宝分享的东西, 复制后打开淘宝APP.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]当然, 以上只是举了几种例子, 还有更多可以提升用户操作体验的实例在此不过多举例了, 直接开始.[/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;初始化flutter项目&#34;&gt;初始化Flutter项目&lt;/h3&gt;&#xA;&lt;p&gt;创建Flutter项目, 清理一下&lt;code&gt;./lib/main.dart&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Flutter剪贴板操作&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyHomePage(title: &amp;#39;Flutter剪贴板操作&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;  int _counter = 0;&#xA;&#xA;  void _incrementCounter() {&#xA;    setState(() {&#xA;      _counter++;&#xA;    });&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(widget.title),&#xA;      ),&#xA;      body: Center(&#xA;        child: Column(&#xA;          mainAxisAlignment: MainAxisAlignment.center,&#xA;          children: [&#xA;            Text(&#xA;              &amp;#39;You have pushed the button this many times:&amp;#39;,&#xA;            ),&#xA;            Text(&#xA;              &amp;#39;$_counter&amp;#39;,&#xA;              style: Theme.of(context).textTheme.headline4,&#xA;            ),&#xA;          ],&#xA;        ),&#xA;      ),&#xA;      floatingActionButton: FloatingActionButton(&#xA;        onPressed: _incrementCounter,&#xA;        tooltip: &amp;#39;Increment&amp;#39;,&#xA;        child: Icon(Icons.add),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行下项目, 应该空空如也:&lt;/p&gt;</description>
    </item>
    <item>
      <title>在Flutter中设置背景图片 / background image</title>
      <link>http://localhost:1313/posts/post/2020/%E5%9C%A8flutter%E4%B8%AD%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87-background-image/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E5%9C%A8flutter%E4%B8%AD%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87-background-image/</guid>
      <description>&lt;p&gt;有时我们需要给APP的某个页面或某个widget添加背景图. 本篇文章就来记录下如何在Flutter中设置背景图片.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们本篇博客将实现的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87-background-image-04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;速度快的同学直接看下面的核心代码!&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建flutter项目&#34;&gt;创建Flutter项目&lt;/h3&gt;&#xA;&lt;p&gt;创建一个新的Flutter项目, 运行查看一下:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87-background-image-02.png&#34; alt=&#34;Flutter 设置背景图片 background image-02&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;空白的, 啥也木有.&lt;/p&gt;&#xA;&lt;h3 id=&#34;添加图片资源&#34;&gt;添加图片资源&lt;/h3&gt;&#xA;&lt;p&gt;这里为大家提供一个好看的背景图:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87-background-image-01-1001x1500.jpg&#34; alt=&#34;Flutter 设置背景图片 background image-01&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.pexels.com/zh-cn/photo/2110951/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34; target=&#34;_blank&#34;&gt;Pexels&lt;/a&gt;&#xA;&lt;/strong&gt; 上的 &lt;strong&gt;&lt;a href=&#34;https://www.pexels.com/zh-cn/@emrecan?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34; target=&#34;_blank&#34;&gt;Emre Can&lt;/a&gt;&#xA;&lt;/strong&gt; 拍摄的照片&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;下载此图片, 重命名为&lt;code&gt;background.jpg&lt;/code&gt;. 我们来将其添加至Flutter项目中.&lt;/p&gt;&#xA;&lt;h4 id=&#34;创建资源目录&#34;&gt;创建资源目录&lt;/h4&gt;&#xA;&lt;p&gt;创建目录&lt;code&gt;./assets/images&lt;/code&gt;, 将上面的图片放到该目录下:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87-background-image-03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;引入pubspecyaml&#34;&gt;引入pubspec.yaml&lt;/h4&gt;&#xA;&lt;p&gt;进入&lt;code&gt;pubspec.yaml&lt;/code&gt;, 将背景图片资源文件路径&lt;code&gt;assets/images/background.jpg&lt;/code&gt;进行导入:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flutter:&#xA;  uses-material-design: true&#xA;  assets:&#xA;   - assets/images/background.jpg&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[epcl_box type=&amp;ldquo;notice&amp;rdquo;]这里一定要注意缩进, 若格式有误将会出错![/epcl_box]&lt;/p&gt;&#xA;&lt;p&gt;进行&lt;code&gt;package get&lt;/code&gt;或在终端中输入:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flutter packages get&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;展示背景图&#34;&gt;展示背景图&lt;/h3&gt;&#xA;&lt;p&gt;回到&lt;code&gt;./lib/main.dart&lt;/code&gt;, 进行代码替换:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter Toast、弹出提示、轻提示</title>
      <link>http://localhost:1313/posts/post/2020/flutter-toast%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA%E8%BD%BB%E6%8F%90%E7%A4%BA/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-toast%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA%E8%BD%BB%E6%8F%90%E7%A4%BA/</guid>
      <description>&lt;p&gt;主流的三种APP反馈形式: &lt;code&gt;toast&lt;/code&gt;、&lt;code&gt;snackbar&lt;/code&gt;以及&lt;code&gt;dialog&lt;/code&gt;. &lt;code&gt;toast&lt;/code&gt;又称为弹出提示、轻提示.通常用于提示用户一些不那么重要的信息, 会弹出并显示文字一段时间. 时间一到就会消失. 相较于&lt;code&gt;snackbar&lt;/code&gt;和&lt;code&gt;dialog&lt;/code&gt;, 对屏幕的入侵较少. 身为开发人员怎能不掌握toast的基本使用? 这篇文章阿航就带着大家一起探讨一下Flutter中的&lt;code&gt;toast&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 我们来看下我们本次要实现的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-Toast%E3%80%81%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA%E3%80%81%E8%BD%BB%E6%8F%90%E7%A4%BA-06.gif&#34; alt=&#34;Flutter-Toast、弹出提示、轻提示-06&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;源码地址&#34;&gt;源码地址&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;👉在&lt;a href=&#34;https://github.com/HarrisonQi/flutter-actual-combat-demo/tree/master/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&#xA;或&lt;a href=&#34;https://gitee.com/HarrisonQI/flutter-actual-combat-demo/tree/master/flutter_toast_tutorial&#34; target=&#34;_blank&#34;&gt;码云&lt;/a&gt;&#xA;上查看本篇文章全部代码.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;搜索fluttertoast&#34;&gt;搜索fluttertoast&lt;/h2&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]有同学会问, 为什么要选择插件, 不选择原生呢… 因为Flutter没有我们所需的这种效果! 只有自带的snackBar![/epcl_box]&lt;/p&gt;&#xA;&lt;p&gt;老样子, 上&lt;a href=&#34;https://pub.flutter-io.cn/packages&#34; target=&#34;_blank&#34;&gt;pub.dev&lt;/a&gt;&#xA;寻找我们所需的插件, 在搜索框输入&lt;code&gt;fluttertoast&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;p&gt;看到第一条:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-Toast%E3%80%81%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA%E3%80%81%E8%BD%BB%E6%8F%90%E7%A4%BA-01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;99&lt;/code&gt;分, 相当高的评分.&lt;/p&gt;&#xA;&lt;p&gt;点进去, 查看最新版本发布日期和兼容性:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-Toast%E3%80%81%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA%E3%80%81%E8%BD%BB%E6%8F%90%E7%A4%BA-02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]一般我们在选择一款Flutter插件时, 会先看它的评分(Flutter官方评分还是比较严格的). 之后再去看看它的最新日期(如果很久未更新, 可能项目已经停止维护了). 最后再来看看它的兼容性, 是否合乎我们的规则.[/epcl_box]&lt;/p&gt;&#xA;&lt;p&gt;同时支持&lt;code&gt;Android&lt;/code&gt;、&lt;code&gt;IOS&lt;/code&gt;以及&lt;code&gt;Web&lt;/code&gt;. 兼容性很好.&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建项目&#34;&gt;创建项目&lt;/h3&gt;&#xA;&lt;p&gt;创建一个Flutter项目, 先来清理项目.&lt;/p&gt;&#xA;&lt;p&gt;删除&lt;code&gt;./test&lt;/code&gt;目录, 因为我们的这个项目只是一个简单的demo. 不需要测试驱动开发.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-Toast%E3%80%81%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA%E3%80%81%E8%BD%BB%E6%8F%90%E7%A4%BA-03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过flutter创建的项目的&lt;code&gt;./lib/main.dart&lt;/code&gt;会有很多自带的注释, 我们替换整个文件为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;阿航的技术小站 Flutter toast&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyHomePage(title: &amp;#39;Flutter toast实战&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(widget.title),&#xA;      ),&#xA;      body: Center(&#xA;        child: Column(&#xA;          mainAxisAlignment: MainAxisAlignment.center,&#xA;          children: [],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;💡 代码解析: 删除了多余的注释, 和部分初始化的按钮. 添加一些名称.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 国际化: 多语言处理(Easy localization)</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E5%9B%BD%E9%99%85%E5%8C%96-%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86easy-localization/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E5%9B%BD%E9%99%85%E5%8C%96-%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86easy-localization/</guid>
      <description>&lt;p&gt;语言不互通是困扰了人类几千年的大难题🤐. 许多国外优秀的文学作品、 APP因为没有进行多国语言的处理, 导致发展缓慢甚至停滞. 虽然现在的各大翻译软件已经非常强大了. 但是想象一下: 一个用户一边拿着翻译机一边使用某个软件. 这样恐怕会逼疯用户, 可能会很快的放弃😭😭.&lt;/p&gt;&#xA;&lt;p&gt;如果你的APP有相当一部分用户是来自全球各地, 那么对APP的国际化就是刚需💪.&lt;/p&gt;&#xA;&lt;p&gt;对APP的国际化可以直线提升外国友人用户体验, 顺便会提高你的APP的&amp;quot;逼格&amp;quot;, 用最简单的方式给用户一种&amp;quot;你们的APP很大很强&amp;quot;的感觉😏😏😏.&lt;/p&gt;&#xA;&lt;h2 id=&#34;最终效果&#34;&gt;最终效果&lt;/h2&gt;&#xA;&lt;p&gt;老规矩, 有图有真相. 先来看看我们最终会实现的效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/09-2.gif&#34; alt=&#34;Flutter 国际化: 多语言处理(Easy localization)&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;需求&#34;&gt;需求&lt;/h2&gt;&#xA;&lt;p&gt;在做一个事情之前, 我们先来简单的规划一下, 我们的目标是什么, 我们要怎么做:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;提供多种语言处理, 对每部分文本进行单独的翻译.&lt;/li&gt;&#xA;&lt;li&gt;用户可以随时切换语言&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;第一步-创建flutter-app&#34;&gt;第一步: 创建Flutter APP&lt;/h3&gt;&#xA;&lt;p&gt;这一步不再赘述, 相当基础的东西啦!&lt;/p&gt;&#xA;&lt;h3 id=&#34;第二步-清理项目&#34;&gt;第二步: 清理项目&lt;/h3&gt;&#xA;&lt;h4 id=&#34;删除测试目录&#34;&gt;删除测试目录&lt;/h4&gt;&#xA;&lt;p&gt;删除&lt;code&gt;./lib/test&lt;/code&gt;目录, 因为我们暂时用不上.&lt;/p&gt;&#xA;&lt;h4 id=&#34;清理maindart&#34;&gt;清理main.dart&lt;/h4&gt;&#xA;&lt;p&gt;因为新的Flutter项目中的main会给我们很多用不上的代码, 所以进行替换&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Flutter 国际化: 多语言处理&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyHomePage(title: &amp;#39;Hi, 国际化!&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(widget.title),&#xA;      ),&#xA;      body: Center(&#xA;        child: Column(&#xA;          mainAxisAlignment: MainAxisAlignment.center,&#xA;          children: [&#xA;            Text(&#xA;              &amp;#39;你好!&amp;#39;,&#xA;            ),&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🟢 运行项目, 应该如图所示:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 数据存储 SharedPreferences</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-sharedpreferences/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-sharedpreferences/</guid>
      <description>&lt;p&gt;我们在做APP开发时, 经常会涉及到用户的 数据存储(比如保存用户登录token、用户的某些偏好设置等). 开发过Android的朋友应该知道有 SharedPreferences. 在 Flutter 中, 同样为我们提供了十分相似的(甚至名字都一样)组件, 为我们提供数据存储的能力.&lt;/p&gt;&#xA;&lt;p&gt;本篇教程将用一个简单的小Demo, 让你完全掌握 数据存储之SharedPreferences 的用法.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;若图片展示异常, 请访问我的&lt;a href=&#34;https://blog.bugcatt.com/archives/165&#34; target=&#34;_blank&#34;&gt;官方博客&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 我们先来看一下我们最终的效果:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/SharedPreferences%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C.gif&#34; alt=&#34;Flutter 数据存储 SharedPreferences&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;SharedPreferences最终效果&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;仓库地址&#34;&gt;仓库地址&lt;/h2&gt;&#xA;&lt;p&gt;所有源码(含注释)均已上传至开源仓库:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/HarrisonQi/flutter-actual-combat-demo/tree/master/my_shared_preferences_demo&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gitee.com/HarrisonQI/flutter-actual-combat-demo/tree/master/my_shared_preferences_demo&#34; target=&#34;_blank&#34;&gt;码云&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;&#xA;&lt;h3 id=&#34;开发环境&#34;&gt;开发环境&lt;/h3&gt;&#xA;&lt;p&gt;本博客的环境一览:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本号&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flutter&lt;/td&gt;&#xA;          &lt;td&gt;1.14.6 beta&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Dart&lt;/td&gt;&#xA;          &lt;td&gt;2.8.0-dev.5.0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Android Studio&lt;/td&gt;&#xA;          &lt;td&gt;3.5.2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;注意您的环境和文中的差异, 避免出现不兼容的情况哦!&lt;/p&gt;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&lt;h3 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h3&gt;&#xA;&lt;p&gt;要顺利阅读本文, 假定您已经具备以下条件:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;一台电脑(能同时运行IDE、APP模拟器).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Android Studio&lt;/code&gt; 或 &lt;code&gt;VSCode&lt;/code&gt;(或任何你喜欢的代码编辑器).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Flutter&lt;/code&gt;开发环境.&lt;/li&gt;&#xA;&lt;li&gt;您掌握了&lt;code&gt;Flutter&lt;/code&gt;的开发基础(至少了解目录结构、&lt;code&gt;Dart&lt;/code&gt;语言基本知识).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建flutter项目&#34;&gt;创建Flutter项目&lt;/h3&gt;&#xA;&lt;p&gt;创建一个新的Flutter项目, 命名为&lt;code&gt;my_shared_preferences_demo&lt;/code&gt;(您可以随意起名, 但是在下面也要替换名字为您自己的).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 底部导航栏 / BottomNavigationBar</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E5%AE%9E%E6%88%98-%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F-bottomnavigationbar/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E5%AE%9E%E6%88%98-%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F-bottomnavigationbar/</guid>
      <description>&lt;p&gt;几乎99%的应用类APP都需要一个底部导航栏. 这篇教程为 &lt;strong&gt;Flutter&lt;/strong&gt; 语言中, 如何写一个主流的 &lt;strong&gt;底部导航栏&lt;/strong&gt; . 并使用 &lt;strong&gt;Flutter&lt;/strong&gt; 官方提供的 &lt;strong&gt;BottomNavigationBar&lt;/strong&gt; 组件. 几乎每一个APP都拥有一个底部导航栏, 所以这篇教程将会十分有用🤭&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 我们本次要实现 底部导航栏 的最终效果如下🙊:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/final-renderings.gif&#34; alt=&#34;Flutter 底部导航栏 / BottomNavigationBar&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;底部导航栏最终效果&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;仓库地址&#34;&gt;仓库地址&lt;/h2&gt;&#xA;&lt;p&gt;全部代码均已上传至开源仓库(含完整注释):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/HarrisonQi/flutter-actual-combat-demo/tree/master/bottom_navigation&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gitee.com/HarrisonQI/flutter-actual-combat-demo/tree/master/bottom_navigation&#34; target=&#34;_blank&#34;&gt;码云&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;用途&#34;&gt;用途&lt;/h2&gt;&#xA;&lt;p&gt;虽然如此普遍, 但我们还是要更直观的看下哪里需要用到底部导航栏, 如下图:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/demo.png&#34; alt=&#34;Flutter 底部导航栏 / BottomNavigationBar&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;用到底部导航栏的主流APP&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;可以得知, 最流行的、最主流的APP都需要导航栏&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 指纹验证/人脸识别</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%8C%87%E7%BA%B9%E9%AA%8C%E8%AF%81-%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%8C%87%E7%BA%B9%E9%AA%8C%E8%AF%81-%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</guid>
      <description>&lt;p&gt;指纹验证/指纹识别 以及 人脸识别 是我们在平常使用各种APP时常用的功能, 这篇教程将使用第三方库 local_auth 来实现 Flutter 中的指纹验证以及人脸识别.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 我们本次要实现的最终效果如下:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/rendering.gif&#34; alt=&#34;Flutter 指纹验证/人脸识别&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;指纹识别图片效果展示&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;仓库地址&#34;&gt;仓库地址&lt;/h2&gt;&#xA;&lt;p&gt;全部代码均已上传至开源仓库(含完整注释):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/HarrisonQi/flutter-actual-combat-demo/tree/master/fingerprint_verification&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gitee.com/HarrisonQI/flutter-actual-combat-demo/tree/master/fingerprint_verification&#34; target=&#34;_blank&#34;&gt;码云&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;用途&#34;&gt;用途&lt;/h2&gt;&#xA;&lt;p&gt;这个在支付相关功能中最常见了, 用于二次验证当前操作者是否为本人. 当然, 有时我们保护的不仅是现金.&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;导入第三方库-local_auth&#34;&gt;导入第三方库: local_auth&lt;/h3&gt;&#xA;&lt;p&gt;在&lt;code&gt;./lib/pubspec.yaml&lt;/code&gt;中导入:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dependencies:&#xA;  local_auth: ^0.6.1+3&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;修改mainactivity&#34;&gt;修改MainActivity&lt;/h3&gt;&#xA;&lt;p&gt;进入&lt;code&gt;./android/app/src/main/***/MainActivity.java&lt;/code&gt;或&lt;code&gt;MainActivity.kt&lt;/code&gt;,导入依赖:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import io.flutter.embedding.android.FlutterFragmentActivity;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MainActivity: FlutterActivity() {&#xA;    override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) {&#xA;        GeneratedPluginRegistrant.registerWith(flutterEngine);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MainActivity: FlutterFragmentActivity() {&#xA;    override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) {&#xA;        GeneratedPluginRegistrant.registerWith(flutterEngine);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;这里主要是修改了&lt;code&gt;FlutterActivity&lt;/code&gt;为&lt;code&gt;FlutterFragmentActivity&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
