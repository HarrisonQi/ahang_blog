<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on 阿航的技术小站</title>
    <link>http://localhost:1313/tags/kotlin/</link>
    <description>Recent content in Kotlin on 阿航的技术小站</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 22 Dec 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Maven打包引入外部.jar文件</title>
      <link>http://localhost:1313/posts/post/2020/maven%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8-jar%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/maven%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8-jar%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;在尝试打包Maven项目, 运行&lt;code&gt;mvn install&lt;/code&gt;命令时, IDEA报了这个错:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`kotlin unresolved reference`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;然后查看该报错指向的行, 是来自外部的jar. 本篇文章就来记录下如何将外部jar打包进入Maven项目.&lt;/p&gt;&#xA;&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;&#xA;&lt;p&gt;将你的&lt;code&gt;*.jar&lt;/code&gt;文件全部移动至&lt;code&gt;项目目录/lib&lt;/code&gt;下. 比如我的springboot项目, 包结构大致是这样的:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/image-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后进入&lt;code&gt;pom.xml&lt;/code&gt;文件, 分别为你的每个jar文件添加依赖, 比如:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`&amp;lt;dependency&amp;gt;     &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt;     &amp;lt;artifactId&amp;gt;xxx-sdk&amp;lt;/artifactId&amp;gt;     &amp;lt;version&amp;gt;0.0.1&amp;lt;/version&amp;gt;     &amp;lt;scope&amp;gt;system&amp;lt;/scope&amp;gt;     &amp;lt;systemPath&amp;gt;${project.basedir}\lib\xxxx.jar&amp;lt;/systemPath&amp;gt; &amp;lt;/dependency&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其中, &lt;code&gt;groupId&lt;/code&gt;、&lt;code&gt;artifactId&lt;/code&gt;以及&lt;code&gt;version&lt;/code&gt;的值你可以随意填写(阿航是参照jar的内容来写).&lt;/p&gt;&#xA;&lt;p&gt;重点是&lt;code&gt;scope&lt;/code&gt;以及&lt;code&gt;systemPath&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;scope标签不能缺少.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;systemPath填写jar所在位置的相对路径. 你直接替换上面的xxxx.jar为你的文件名即可&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)</title>
      <link>http://localhost:1313/posts/post/2020/org-apache-ibatis-binding-bindingexception-invalid-bound-statement-not-found/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/org-apache-ibatis-binding-bindingexception-invalid-bound-statement-not-found/</guid>
      <description>&lt;p&gt;在使用Mybatis进行开发时， 出现了这样的报错：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`org.apache.ibatis.binding.BindingException:      Invalid bound statement (not found)`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;本篇文章就来记录下碰到上述问题的几种解决方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;情况&#34;&gt;情况&lt;/h2&gt;&#xA;&lt;p&gt;比如我们有Mapper文件&lt;code&gt;UserMapper.java&lt;/code&gt;及其对应的&lt;code&gt;UserMapper.xml&lt;/code&gt;文件&lt;/p&gt;&#xA;&lt;p&gt;这里列举出一些可能出现的情况以及对应的解决方案：&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况一mapperxml的namespace有误&#34;&gt;情况一：Mapper.xml的namespace有误&lt;/h3&gt;&#xA;&lt;p&gt;找到你的&lt;code&gt;mapper.xml&lt;/code&gt;文件，找到类似这一行：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`&amp;lt;!DOCTYPE mapper PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot; &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt; &amp;lt;mapper namespace=&amp;quot;com.bugcatt.mapper.UserMapper&amp;quot;&amp;gt;  &amp;lt;/mapper&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;仔细检查&lt;code&gt;namespace&lt;/code&gt;的值是否对应正确的路径。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况二mapper的函数未在mapperxml定义&#34;&gt;情况二：Mapper的函数未在Mapper.xml定义&lt;/h3&gt;&#xA;&lt;p&gt;检查你的UserMapper中的函数/方法，是否已在&lt;code&gt;Mapper.xml&lt;/code&gt;中定义或名称有误。如果未定义 或者函数名不同请订正。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况三查询返回值类型未妥善处理&#34;&gt;情况三：查询返回值类型未妥善处理&lt;/h3&gt;&#xA;&lt;p&gt;比如你在&lt;code&gt;UserMapper&lt;/code&gt;中定义了函数的返回值是&lt;code&gt;List&amp;lt;User&amp;gt;&lt;/code&gt;类型，但是你在&lt;code&gt;UserMapper.xml&lt;/code&gt;中未正确配置&lt;code&gt;ResultMap&lt;/code&gt;或&lt;code&gt;ResultType&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况三mapperxml路径配置&#34;&gt;情况三：mapper.xml路径配置&lt;/h3&gt;&#xA;&lt;p&gt;在你的spring-boot配置文件中查看你的xml配置：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` mybatis:   # 配置mapper.xml文件路径   mapper-locations: &#39;classpath*:/**/mapper/**Mapper.xml&#39;   # 配置映射类包名   type-aliases-package: com.bugcatt.domain`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;如果你使用的是&lt;code&gt;Mybatis-Plus&lt;/code&gt;，配置为：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` mybatis-plus:   # 配置mapper.xml文件路径   mapper-locations: &#39;classpath*:/**/mapper/**Mapper.xml&#39;   # 配置映射类包名   type-aliases-package: com.bugcatt.domain`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;情况四mapperjava文件和mapperxml文件不同名&#34;&gt;情况四：Mapper.java文件和Mapper.xml文件不同名&lt;/h3&gt;&#xA;&lt;p&gt;比如你的文件分别为&lt;code&gt;UserMapper.java&lt;/code&gt;和&lt;code&gt;UserrrMapper.xml&lt;/code&gt;（不同名）将它们的名称改为一致试试看。&lt;/p&gt;&#xA;&lt;p&gt;此方法存在争议。部分同学不同名也可以运行。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况五maven未将mapperxml打进包内&#34;&gt;情况五：maven未将mapper.xml打进包内&lt;/h3&gt;&#xA;&lt;p&gt;这种情况可能出现在你未将&lt;code&gt;mapper.xml&lt;/code&gt;放进传统的资源目录中，导致maven编译打包时忽略了你的mapper.xml文件。解决此问题需要在maven配置文件&lt;code&gt;pom.xml&lt;/code&gt;中添加：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`&amp;lt;build&amp;gt;           &amp;lt;resources&amp;gt;                   &amp;lt;resource&amp;gt;                            &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt;                            &amp;lt;includes&amp;gt;                                    &amp;lt;include&amp;gt;**/*.xml&amp;lt;/include&amp;gt;                         &amp;lt;/includes&amp;gt;         &amp;lt;/resource&amp;gt;     &amp;lt;/resources&amp;gt; &amp;lt;/build&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>MyBatis-Plus 读写 Mysql的Json类型字段数据</title>
      <link>http://localhost:1313/posts/post/2020/mybatis-plus-%E8%AF%BB%E5%86%99-mysql%E7%9A%84json%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/mybatis-plus-%E8%AF%BB%E5%86%99-mysql%E7%9A%84json%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E6%95%B0%E6%8D%AE/</guid>
      <description>&lt;p&gt;Mybatis-Plus是一款相当优秀的开源框架, 为单表操作提供了极大的便利. 这次阿航在写服务端时, 需要对MySQL的json类型字段进行操作, 忙活了一阵, 终于找到了解决方案, 并在本篇文章进行记录.&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;p&gt;本篇文章环境:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本号&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Mybatis-Plus&lt;/td&gt;&#xA;          &lt;td&gt;3.3.2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;本篇文章假定:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;你掌握Java/Kotlin基础(注解)&lt;/li&gt;&#xA;&lt;li&gt;你掌握Mybatis以及Mybatis-Plus的基本使用&lt;/li&gt;&#xA;&lt;li&gt;你了解FastJSON或Gson&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;notice&amp;rdquo;]如果还不具备以上的条件, 阅读本篇文章可能会有阻碍! 建议先满足条件后再尝试阅读![/epcl_box]&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]老规矩, 速度快的同学直接向下拉. 看核心代码.[/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;&#xA;&lt;p&gt;我们拥有一个json类型的数据库字段, 我们在进行写操作时, 不希望将对象转为json字符串再存数据库. 读数据也是一样. 我们希望这一切自动完成.&lt;/p&gt;&#xA;&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;&#xA;&lt;p&gt;我们先来创建一个数据库表:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE TABLE `mybatis_json_test`  (&#xA;  `id` int(10) NOT NULL AUTO_INCREMENT PRIMARY KEY,&#xA;  `extra_object` json NULL,&#xA;  `extra_list` json NULL,&#xA;  `extra_array` json NULL&#xA;);&#xA;&#xA;INSERT INTO `mybatis_json_test`&#xA;VALUES&#xA;&#x9;( 1, &amp;#39;{\&amp;#34;id\&amp;#34;: 1, \&amp;#34;name\&amp;#34;: \&amp;#34;2\&amp;#34;}&amp;#39;, &amp;#39;[{\&amp;#34;id\&amp;#34;: 1, \&amp;#34;name\&amp;#34;: \&amp;#34;2\&amp;#34;}]&amp;#39;, &amp;#39;[{\&amp;#34;id\&amp;#34;: 1, \&amp;#34;name\&amp;#34;: \&amp;#34;2\&amp;#34;}]&amp;#39; );&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建表对应实体类&#34;&gt;创建表对应实体类&lt;/h3&gt;&#xA;&lt;p&gt;首先创建实体类&lt;code&gt;MybatisJsonTest&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kotlin 使用 TypeReference</title>
      <link>http://localhost:1313/posts/post/2020/kotlin-%E4%BD%BF%E7%94%A8-typereference/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/kotlin-%E4%BD%BF%E7%94%A8-typereference/</guid>
      <description>&lt;p&gt;后端的语言使用的是Kotlin, 在写支付宝小程序获取手机号并解密时参照官方Java文档, Java自动转Kotlin出现异常. 在此进行记录.&lt;/p&gt;&#xA;&lt;p&gt;这一段的&lt;code&gt;Java&lt;/code&gt;代码块:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Map openapiResult = JSON.parseObject(response,&#xA;            new TypeReference&amp;gt;() {&#xA;            }, Feature.OrderedField);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;&#xA;&lt;p&gt;转为&lt;code&gt;kotlin&lt;/code&gt;的正确写法:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;val typeRef = object : TypeReference&amp;gt;() {}&#xA;val openApiResult = JSON.parseObject(response, typeRef, Feature.OrderedField)        &#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
