<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flutter on 阿航的技术小站</title>
    <link>http://localhost:1313/tags/flutter/</link>
    <description>Recent content in Flutter on 阿航的技术小站</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 10 Dec 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/flutter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>修改Flutter APP启动图标/Launcher Icon</title>
      <link>http://localhost:1313/posts/post/2020/%E4%BF%AE%E6%94%B9flutter-app%E5%90%AF%E5%8A%A8%E5%9B%BE%E6%A0%87-launcher-icon/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E4%BF%AE%E6%94%B9flutter-app%E5%90%AF%E5%8A%A8%E5%9B%BE%E6%A0%87-launcher-icon/</guid>
      <description>&lt;h2 id=&#34;开门见山&#34;&gt;开门见山&lt;/h2&gt;&#xA;&lt;p&gt;为了简化修改Flutter启动图标的过程, &lt;code&gt;Flutter Launcher Icons&lt;/code&gt;诞生了.&lt;/p&gt;&#xA;&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;&#xA;&lt;p&gt;访问 &lt;a href=&#34;https://pub.dev/packages/flutter_launcher_icons&#34; target=&#34;_blank&#34;&gt;Flutter Launcher Icons 库网址&lt;/a&gt;&#xA; . 访问慢的同学可以使用&lt;a href=&#34;https://pub.flutter-io.cn/packages/flutter_launcher_icons&#34; target=&#34;_blank&#34;&gt;国内镜像&lt;/a&gt;&#xA;.&lt;/p&gt;&#xA;&lt;p&gt;修改你的&lt;code&gt;pubspec.yaml&lt;/code&gt;文件(版本号替换为最新的):&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` dev_dependencies:   flutter_launcher_icons: ^0.8.1`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在资源目录中创建你的icon文件, 比如路径&lt;code&gt;assets/icon/icon.png&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;然后再次修改&lt;code&gt;pubspec.yaml&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` flutter_icons:   android: &amp;quot;launcher_icon&amp;quot;   ios: true   image_path: &amp;quot;assets/icon/icon.png&amp;quot;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;在终端中分别运行以下命令:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`flutter pub get`&#xA;&#xA;`flutter pub run flutter_launcher_icons:main`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;其他资源&#34;&gt;其他资源&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/fluttercommunity/flutter_launcher_icons/tree/master/example&#34; target=&#34;_blank&#34;&gt;点击此处&lt;/a&gt;&#xA;查看完整示例项目&lt;/li&gt;&#xA;&lt;li&gt;如果使用该库出现任何问题, 请&lt;a href=&#34;https://github.com/fluttercommunity/flutter_launcher_icons/issues&#34; target=&#34;_blank&#34;&gt;提issue&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Flutter 调整 Switch 组件尺寸</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E8%B0%83%E6%95%B4-switch-%E7%BB%84%E4%BB%B6%E5%B0%BA%E5%AF%B8/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E8%B0%83%E6%95%B4-switch-%E7%BB%84%E4%BB%B6%E5%B0%BA%E5%AF%B8/</guid>
      <description>&lt;p&gt;默认的Switch组件并没有提供类似&lt;code&gt;Size&lt;/code&gt;或者&lt;code&gt;Height&lt;/code&gt;,&lt;code&gt;Weight&lt;/code&gt;等参数。本篇文章就来记录下Flutter如何调整Switch组件尺寸。&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;普通的switch&#34;&gt;普通的Switch&lt;/h3&gt;&#xA;&lt;p&gt;通常，我们声明一个Switch组件会这样写。运行以下代码：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` import &#39;package:flutter/material.dart&#39;;  void main() =&amp;gt; runApp(MyApp());  class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Switch Size&#39;,       home: MyHomePage(),     );   } }  class MyHomePage extends StatefulWidget {   MyHomePage({Key key}) : super(key: key);    @override   _MyHomePageState createState() =&amp;gt; _MyHomePageState(); }  class _MyHomePageState extends State {   bool _enabled = true;    @override   Widget build(BuildContext context) {     return Scaffold(         appBar: AppBar(           title: Text(&#39;Switch Size&#39;),         ),         body: Center(           child: Column(             mainAxisAlignment: MainAxisAlignment.center,             children: [               Switch(                   value: _enabled,                   onChanged: (bool) {                     _enabled = bool;                     setState(() {});                   }),             ],           ),         ));   } }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;🟢 运行项目, 可以看到一个朴实无华的Switch：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter/Dart List去重, 去除重复列表项</title>
      <link>http://localhost:1313/posts/post/2020/flutter-dart-list%E5%8E%BB%E9%87%8D-%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%88%97%E8%A1%A8%E9%A1%B9/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-dart-list%E5%8E%BB%E9%87%8D-%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%88%97%E8%A1%A8%E9%A1%B9/</guid>
      <description>&lt;p&gt;有时我们需要过滤掉重复的列表项, 本篇文章就来介绍下Flutter/Dart 如何进行 List去重, 去除重复列表项.&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方法一-list与set互转&#34;&gt;方法一: List与Set互转&lt;/h3&gt;&#xA;&lt;p&gt;基于Set集合的不可重复特性, 我们利用该特性可轻松解决:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`void main() {   // 声明一个集合   var ids = [1, 1, 4, 4, 5, 6, 6];   // 进行去重, 存储去重后的集合   var distinctIds = ids.toSet().toList(); }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;当然, 基于该思路还有更牛逼的写法:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`var distinctIds = [...{...ids}];`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;success&amp;rdquo;]这也许是最优雅的解决方案.[/epcl_box]&lt;/p&gt;&#xA;&lt;h3 id=&#34;方法二-list与set互转保留顺序&#34;&gt;方法二: List与Set互转(保留顺序)&lt;/h3&gt;&#xA;&lt;p&gt;方案一虽然优雅, 但也不是完美的. 它无法&lt;strong&gt;保留顺序&lt;/strong&gt;. 如果我们的需求对顺序有绝对的要求时, 就需要以下方法了:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import &#39;dart:collection&#39;; void main() {   // 声明一个集合   List arr = [&amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;d&amp;quot;];   // 进行去重, 存储去重后的集合   List result = LinkedHashSet.from(arr).toList(); }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;虽然不如方法一优雅, 但是其保留了顺序.&lt;/p&gt;</description>
    </item>
    <item>
      <title>妥善处理Flutter的404 Not Found 未找到错误</title>
      <link>http://localhost:1313/posts/post/2020/%E5%A6%A5%E5%96%84%E5%A4%84%E7%90%86flutter%E7%9A%84404-not-found-%E6%9C%AA%E6%89%BE%E5%88%B0%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E5%A6%A5%E5%96%84%E5%A4%84%E7%90%86flutter%E7%9A%84404-not-found-%E6%9C%AA%E6%89%BE%E5%88%B0%E9%94%99%E8%AF%AF/</guid>
      <description>&lt;p&gt;Flutter已经支持了Web端, 我们可以使用其创建动态网站了. Flutter能够处理来自Web的错误, 比如404未找到. 但是如何为Flutter应用创建自定义的404页面呢?&lt;/p&gt;&#xA;&lt;p&gt;本文将介绍如何创建自定义页面, 用于用户在试图搜索不存在的页面时给用户友好提示.&lt;/p&gt;&#xA;&lt;h2 id=&#34;在flutter中将客户端重定向至自定义404页面&#34;&gt;在Flutter中将客户端重定向至自定义404页面&lt;/h2&gt;&#xA;&lt;p&gt;每个人在上网冲浪时都遇到过&amp;quot;404 Not Found&amp;quot;、&amp;ldquo;页面不存在&amp;quot;等等. Flutter通过自动将你重定向至初始路由来解决此问题(通常是APP首页). 观赏下一些大厂好看的404页面:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E5%A6%A5%E5%96%84%E5%A4%84%E7%90%86Flutter%E7%9A%84404-Not-Found-%E6%9C%AA%E6%89%BE%E5%88%B0%E9%94%99%E8%AF%AF-01-1500x783.gif&#34; alt=&#34;AirBnb(爱彼迎) 的404页面&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;AirBnb(爱彼迎) 的404页面&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E5%A6%A5%E5%96%84%E5%A4%84%E7%90%86Flutter%E7%9A%84404-Not-Found-%E6%9C%AA%E6%89%BE%E5%88%B0%E9%94%99%E8%AF%AF-02.png&#34; alt=&#34;Github 的 404页面&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;Github 的 404页面&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E5%A6%A5%E5%96%84%E5%A4%84%E7%90%86Flutter%E7%9A%84404-Not-Found-%E6%9C%AA%E6%89%BE%E5%88%B0%E9%94%99%E8%AF%AF-03-1500x681.png&#34; alt=&#34;Flutter 的 404页面&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 指定TextField输入框(文本框)初始值(初始文字)</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%8C%87%E5%AE%9Atextfield%E8%BE%93%E5%85%A5%E6%A1%86%E6%96%87%E6%9C%AC%E6%A1%86%E5%88%9D%E5%A7%8B%E5%80%BC%E5%88%9D%E5%A7%8B%E6%96%87%E5%AD%97/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%8C%87%E5%AE%9Atextfield%E8%BE%93%E5%85%A5%E6%A1%86%E6%96%87%E6%9C%AC%E6%A1%86%E5%88%9D%E5%A7%8B%E5%80%BC%E5%88%9D%E5%A7%8B%E6%96%87%E5%AD%97/</guid>
      <description>&lt;p&gt;输入框也许是最常用的表单项了. 添加数据时我们直接使用空的输入框就可以了. 编辑的时候, 我们需要把旧的数据预先放在输入框内. 那么如何为其指定初始值呢? 本篇文章就来记录下Flutter如何指定TextField输入框(文本框)初始值(初始文字).&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看一下我们的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E6%8C%87%E5%AE%9ATextField%E5%88%9D%E5%A7%8B%E5%80%BC-01.png&#34; alt=&#34;Flutter-指定TextField初始值-01&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]老规矩. 速度快的同学直接看下方的核心代码![/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编辑数据使用的输入框&lt;/li&gt;&#xA;&lt;li&gt;输入框提供默认数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方法一-textfield&#34;&gt;方法一: TextField&lt;/h3&gt;&#xA;&lt;p&gt;创建一个dart文件, 内容为以下代码:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import &#39;package:flutter/material.dart&#39;;  void main() =&amp;gt; runApp(MyApp());  class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Flutter Demo&#39;,       theme: ThemeData(         primarySwatch: Colors.blue,       ),       home: MyHomePage(title: &#39;为输入框提供初始值&#39;),     );   } }  class MyHomePage extends StatefulWidget {   MyHomePage({Key key, this.title}) : super(key: key);   final String title;    @override   _MyHomePageState createState() =&amp;gt; _MyHomePageState(); }  class _MyHomePageState extends State {    @override   Widget build(BuildContext context) {     return Scaffold(       appBar: AppBar(         title: Text(widget.title),       ),       body: Center(         child: Column(           mainAxisAlignment: MainAxisAlignment.center,           children: [             Container(               width: MediaQuery.of(context).size.width * 0.3,               child: TextField(                 controller: TextEditingController()..text=&amp;quot;你今天真好看&amp;quot;,               ),             )           ],         ),       ),     );   } }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;重点放在&lt;code&gt;TextField&lt;/code&gt;内部. 我们为其&lt;code&gt;controller&lt;/code&gt;参数赋值为&lt;code&gt;TextEditingController()..text=&amp;quot;你今天真好看&amp;quot;&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter根据屏幕尺寸(宽度/高度)的百分比设定元素(小部件/组件/Widget)尺寸</title>
      <link>http://localhost:1313/posts/post/2020/flutter%E6%A0%B9%E6%8D%AE%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E5%AE%BD%E5%BA%A6-%E9%AB%98%E5%BA%A6%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%BE%E5%AE%9A%E5%85%83%E7%B4%A0%E5%B0%8F%E9%83%A8%E4%BB%B6/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter%E6%A0%B9%E6%8D%AE%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E5%AE%BD%E5%BA%A6-%E9%AB%98%E5%BA%A6%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%BE%E5%AE%9A%E5%85%83%E7%B4%A0%E5%B0%8F%E9%83%A8%E4%BB%B6/</guid>
      <description>&lt;p&gt;最让前端开发人员头疼的问题之一就是屏幕尺寸兼容性问题了. Web端开发人员经常会对测试人员说: &amp;ldquo;换个浏览器试一下&amp;rdquo;.😂 虽然现在的主流的屏幕大小非常相似, 但是我们也要事先处理好. 本篇文章就来记录Flutter如何根据屏幕尺寸(宽度/高度)的百分比设定元素(小部件/组件/Widget)尺寸.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看一下效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E8%AE%BE%E7%BD%AE%E5%85%83%E7%B4%A0%E5%B0%BA%E5%AF%B8-04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你掌握Flutter基础.&lt;/li&gt;&#xA;&lt;li&gt;你了解基础的Flutter布局.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章的开发环境:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]老规矩, 速度快的同学直接看最下方的核心代码![/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;&#xA;&lt;p&gt;创建一个Flutter项目, 替换&lt;code&gt;main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import &#39;package:flutter/material.dart&#39;;  void main() =&amp;gt; runApp(MyApp());  class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Flutter Demo&#39;,       theme: ThemeData(         primarySwatch: Colors.blue,       ),       home: MyHomePage(title: &#39;屏幕百分比设定元素尺寸&#39;),     );   } }  class MyHomePage extends StatefulWidget {   MyHomePage({Key key, this.title}) : super(key: key);   final String title;    @override   _MyHomePageState createState() =&amp;gt; _MyHomePageState(); }  class _MyHomePageState extends State&amp;lt;MyHomePage&amp;gt; {    @override   Widget build(BuildContext context) {     return Scaffold(       appBar: AppBar(         title: Text(widget.title),       ),       body: Row(         children: [           Container(             color: Color(0xFFFF6666),             child: Text(&amp;quot;30%&amp;quot;, style: Theme.of(context).textTheme.headline2,),           ),           Container(             color: Color(0xFFFFFF66),             child: Text(&amp;quot;70%&amp;quot;, style: Theme.of(context).textTheme.headline2,),           )         ],       ),     );   } }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;🟢 运行项目, 应该是这样的:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 隐藏/显示某widget组件、切换显示状态</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E9%9A%90%E8%97%8F-%E6%98%BE%E7%A4%BA%E6%9F%90widget%E7%BB%84%E4%BB%B6%E5%88%87%E6%8D%A2%E6%98%BE%E7%A4%BA%E7%8A%B6%E6%80%81/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E9%9A%90%E8%97%8F-%E6%98%BE%E7%A4%BA%E6%9F%90widget%E7%BB%84%E4%BB%B6%E5%88%87%E6%8D%A2%E6%98%BE%E7%A4%BA%E7%8A%B6%E6%80%81/</guid>
      <description>&lt;p&gt;在进行Flutter开发时, 我们需要对某个widget进行显示与隐藏状态的切换. 这个需求还是蛮常见的. 本篇文章就来记录下Flutter如何隐藏/显示某widget组件、切换显示状态.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们要实现的最终效果:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E9%9A%90%E8%97%8F%E6%98%BE%E7%A4%BA%E6%9F%90widget%E7%BB%84%E4%BB%B6-06.gif&#34; alt=&#34;Flutter-隐藏显示某widget组件-06&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;隐藏Widget&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E9%9A%90%E8%97%8F%E6%98%BE%E7%A4%BA%E6%9F%90widget%E7%BB%84%E4%BB%B6-08.gif&#34; alt=&#34;Flutter 隐藏显示某widget组件-08&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;隐藏且不影响布局&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你已经掌握Flutter基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章环境:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]老规矩, 速度快的同学直接去看核心代码![/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;&#xA;&lt;p&gt;创建一个Flutter项目, 替换文件&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import &#39;package:flutter/material.dart&#39;;  void main() =&amp;gt; runApp(MyApp());  class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Show Hide widget&#39;,       theme: ThemeData(         primarySwatch: Colors.blue,       ),       home: MyHomePage(title: &#39;Show &amp;amp; Hide Widget&#39;),     );   } }  class MyHomePage extends StatefulWidget {   MyHomePage({Key key, this.title}) : super(key: key);   final String title;    @override   _MyHomePageState createState() =&amp;gt; _MyHomePageState(); }  class _MyHomePageState extends State {   // 存储&amp;quot;是否显示&amp;quot;状态   bool _isShow = true;    @override   Widget build(BuildContext context) {     return Scaffold(       appBar: AppBar(         title: Text(widget.title),       ),       body: Center(         child: Column(           mainAxisAlignment: MainAxisAlignment.center,           children: [             Text(&#39;一个文本Widget&#39;, style: Theme.of(context).textTheme.headline3),             RaisedButton(               child: Text(                 _isShow ? &amp;quot;隐藏&amp;quot; : &amp;quot;显示&amp;quot;,                 style: Theme.of(context).textTheme.headline5,               ),               onPressed: () {                 setState(() {                   _isShow = !_isShow;                 });               },             )           ],         ),       ),     );   } }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;我们创建了布尔类型的实例变量&lt;code&gt;_isShow&lt;/code&gt;, 用于保存widget的显示状态.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 隐藏/移除导航栏的默认返回按钮</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E9%9A%90%E8%97%8F-%E7%A7%BB%E9%99%A4%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E9%BB%98%E8%AE%A4%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E9%9A%90%E8%97%8F-%E7%A7%BB%E9%99%A4%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E9%BB%98%E8%AE%A4%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE/</guid>
      <description>&lt;p&gt;在实际项目开发中, 我们在进行页面跳转时, 偶尔会跳到不可返回的页面(比如退出登录后). 本篇文章就来记录下 Flutter 如何隐藏/移除导航栏的默认返回按钮.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下实际效果:&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;p&gt;移除导航栏的默认返回按钮适用于:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;退出登录后禁止返回&lt;/li&gt;&#xA;&lt;li&gt;跳转至一个全新的页面, 不可返回&lt;/li&gt;&#xA;&lt;li&gt;禁止返回的任何页面&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;掌握Flutter基础&lt;/li&gt;&#xA;&lt;li&gt;掌握Flutter页面跳转的基本操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章的环境:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flutter&lt;/td&gt;&#xA;          &lt;td&gt;1.19.0-2.0.pre&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;&#xA;&lt;p&gt;创建新文件&lt;code&gt;./lib/main.dart&lt;/code&gt;(或者其他你想要的文件名):&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Remove back button&amp;#39;,&#xA;      home: FirstPage(),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class FirstPage extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(&amp;#34;First Page&amp;#34;),&#xA;      ),&#xA;      body: Center(&#xA;        child: RaisedButton(&#xA;          child: Text(&amp;#34;跳转到下一页&amp;#34;),&#xA;          onPressed: () {&#xA;            Navigator.push(context, MaterialPageRoute(builder: (context) {&#xA;              return SecondPage();&#xA;            }));&#xA;          },&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class SecondPage extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(&amp;#34;Second Page&amp;#34;),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🟢 运行, 可以看到demo提供了正常跳转:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 禁用按钮/禁止按钮点击</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E7%A6%81%E7%94%A8%E6%8C%89%E9%92%AE-%E7%A6%81%E6%AD%A2%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E7%A6%81%E7%94%A8%E6%8C%89%E9%92%AE-%E7%A6%81%E6%AD%A2%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB/</guid>
      <description>&lt;p&gt;某些情况下我们需要禁用某个按钮的点击事件. 通过灵活的按钮禁止状态切换可以实现很多实际需求. 本篇文章就来记录下Flutter如何禁用按钮以及禁止按钮点击.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E7%A6%81%E7%94%A8%E6%8C%89%E9%92%AE%E7%A6%81%E6%AD%A2%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB-04.gif&#34; alt=&#34;Flutter-禁用按钮禁止按钮点击-04&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户权限不足, 禁止某些按钮点击.&lt;/li&gt;&#xA;&lt;li&gt;用户表单未填完, 禁止下一步.&lt;/li&gt;&#xA;&lt;li&gt;用户阅读相关条款至少X秒, 倒数结束前锁定按钮.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你了解Flutter基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章的环境:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Windows&lt;/td&gt;&#xA;          &lt;td&gt;10&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Android Studio&lt;/td&gt;&#xA;          &lt;td&gt;3.5&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flutter&lt;/td&gt;&#xA;          &lt;td&gt;1.19.0-2.0.pre&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;&#xA;&lt;p&gt;创建一个空项目.&lt;/p&gt;&#xA;&lt;p&gt;删除&lt;code&gt;./test&lt;/code&gt;目录.&lt;/p&gt;&#xA;&lt;p&gt;替换&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/cupertino.dart&amp;#39;;&#xA;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Disable Button&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyHomePage(title: &amp;#39;Disable Button&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;&#xA;  // 是否开启按钮&#xA;  bool isEnabled = true;&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(title: Text(widget.title)),&#xA;      body: Center(&#xA;        child: Column(&#xA;          mainAxisAlignment: MainAxisAlignment.center,&#xA;          children: [&#xA;&#xA;            // 开关控件&#xA;            CupertinoSwitch(&#xA;              value: this.isEnabled,&#xA;              onChanged: (bool value) {&#xA;                setState(() {&#xA;                  this.isEnabled = value;&#xA;                });&#xA;              },&#xA;            ),&#xA;            RaisedButton(child: Text(&amp;#34;目标按钮&amp;#34;, style: TextStyle(fontSize: 25,color: Colors.white)), color: Colors.blue,onPressed: (){}),&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🟢 运行项目, 应该会出现一个开关控件和一个&amp;quot;目标按钮&amp;quot;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter为widget添加border边框、下划线</title>
      <link>http://localhost:1313/posts/post/2020/flutter%E4%B8%BAwidget%E6%B7%BB%E5%8A%A0border%E8%BE%B9%E6%A1%86%E4%B8%8B%E5%88%92%E7%BA%BF/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter%E4%B8%BAwidget%E6%B7%BB%E5%8A%A0border%E8%BE%B9%E6%A1%86%E4%B8%8B%E5%88%92%E7%BA%BF/</guid>
      <description>&lt;p&gt;有时我们需要为Flutter的widget小部件添加各式各样的边框. 但是并不是所有widget都提供了边框的属性, 本篇文章就来记录下如何为Flutter 的 widget 添加border边框、下划线.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们要实现的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E4%B8%BAwidget%E6%B7%BB%E5%8A%A0border%E8%BE%B9%E6%A1%86-11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你已经掌握Flutter基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章的开发环境:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;操作系统&lt;/td&gt;&#xA;          &lt;td&gt;Windows 10&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flutter&lt;/td&gt;&#xA;          &lt;td&gt;1.19.0-2.0.pre&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;IDE&lt;/td&gt;&#xA;          &lt;td&gt;Android Studio 3.5&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]速度快的同学直接复制下方的&amp;quot;全部源码&amp;quot;自行研究! 稳一点的同学请按照教程一步一步来! [/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建项目清理代码&#34;&gt;创建项目&amp;amp;清理代码&lt;/h3&gt;&#xA;&lt;p&gt;为了便于演示, 阿航在这里创建一个空项目.&lt;/p&gt;&#xA;&lt;p&gt;创建完成后, 删除&lt;code&gt;./test&lt;/code&gt;目录. 因为我们的demo无需测试类.&lt;/p&gt;&#xA;&lt;p&gt;替换&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Awesome Border&amp;#39;,&#xA;      theme: ThemeData(primarySwatch: Colors.blue),&#xA;      home: MyHomePage(title: &amp;#39;My Awesome Border&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;  // 即将渲染的边框组件集合&#xA;  List _borderWidgets;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    // 处理带边框的对象集合&#xA;    _borderWidgets = [];&#xA;    super.initState();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    // 为了美观, 将内容全部居中处理&#xA;    _borderWidgets.forEach((element) {&#xA;      _borderWidgets[_borderWidgets.indexOf(element)] = Center(child: element);&#xA;    });&#xA;&#xA;    return Scaffold(&#xA;      appBar: AppBar(title: Text(widget.title)),&#xA;      body: Center(&#xA;          child: Container(&#xA;        padding: EdgeInsets.all(20),&#xA;        child: GridView.count(&#xA;          padding: const EdgeInsets.all(8.0),&#xA;          crossAxisCount: 3,&#xA;          crossAxisSpacing: 5,&#xA;          mainAxisSpacing: 5,&#xA;          children: _borderWidgets,&#xA;        ),&#xA;      )),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;我们首先在&lt;code&gt;26&lt;/code&gt;行定义了实例变量&lt;code&gt;_borderWidgets&lt;/code&gt;, 它将保存我们所有的用来展示边框的Widget.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 实现毛玻璃/磨砂效果</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E5%AE%9E%E7%8E%B0%E6%AF%9B%E7%8E%BB%E7%92%83-%E7%A3%A8%E7%A0%82%E6%95%88%E6%9E%9C/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E5%AE%9E%E7%8E%B0%E6%AF%9B%E7%8E%BB%E7%92%83-%E7%A3%A8%E7%A0%82%E6%95%88%E6%9E%9C/</guid>
      <description>&lt;p&gt;还记得之前风靡一时的Windows 7的毛玻璃效果吗? 虽然过去了好多年, 但毛玻璃效果一直没有过时👨‍🎓. 本篇文章就来记录下如何使用Flutter实现毛玻璃/磨砂效果.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们要实现的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E5%AE%9E%E7%8E%B0%E6%AF%9B%E7%8E%BB%E7%92%83%E7%A3%A8%E7%A0%82%E6%95%88%E6%9E%9C-05.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;环境需具备的条件&#34;&gt;环境&amp;amp;需具备的条件&lt;/h2&gt;&#xA;&lt;p&gt;本篇文章的开发环境:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;若想顺利阅读本篇教程, 你需要具备:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算机已安装Flutter开发环境&lt;/li&gt;&#xA;&lt;li&gt;掌握Flutter基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建项目-清理代码&#34;&gt;创建项目, 清理代码&lt;/h3&gt;&#xA;&lt;p&gt;先来创建一个空项目, 直接用IDE创建或在终端中输入:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flutter create my_frosted&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除&lt;code&gt;./test&lt;/code&gt;目录. 并替换&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;My Frosted Demo&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyFrosted(),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyFrosted extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      body: Stack(&#xA;        children: [],&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🟢 运行项目, 可以看到白白的一片, 啥也没有:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Default value of an optional parameter must be constant</title>
      <link>http://localhost:1313/posts/post/2020/default-value-of-an-optional-parameter-must-be-constant/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/default-value-of-an-optional-parameter-must-be-constant/</guid>
      <description>&lt;p&gt;今天阿航在使用Flutter进行开发时, 希望为&lt;code&gt;final&lt;/code&gt;修饰的实例变量提供默认值. 尝试过程中IDE报错:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Default values of an optional parameter must be constant.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本篇文章就来记录下碰到这种问题该如何解决!&lt;/p&gt;&#xA;&lt;h2 id=&#34;错误示例&#34;&gt;错误示例&lt;/h2&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]因为阿航出错的源码并不便于演示, 所以这里采用Stack Overflow上的简单示范, 使大家更直观的解决问题.[/epcl_box]&lt;/p&gt;&#xA;&lt;p&gt;先来看下错误源码:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;enum MyEnum { a, b }&#xA;&#xA;class ClassA {&#xA;  final MyEnum myEnum;&#xA;  ClassA({this.myEnum = MyEnum.a});&#xA;}&#xA;&#xA;class ClassB {&#xA;  final ClassA classA;&#xA;  ClassB({this.classA = ClassA()}); // ClassA 报错&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;乍一看似乎没有什么问题, 但是实际上Dart并不允许这种写法.&lt;/p&gt;&#xA;&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;&#xA;&lt;p&gt;其实解决方案很简单, 来看下修改后的代码(注意高亮的行):&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;enum MyEnum { a, b }&#xA;&#xA;class ClassA {&#xA;  final MyEnum myEnum;&#xA;  const ClassA({this.myEnum = MyEnum.a});&#xA;}&#xA;&#xA;class ClassB {&#xA;  final ClassA classA;&#xA;  ClassB({this.classA = const ClassA()});&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;可以看出, 我们在&lt;code&gt;ClassA&lt;/code&gt;构造函数前增加了&lt;code&gt;const&lt;/code&gt;进行修饰. 并在&lt;code&gt;ClassB&lt;/code&gt;设置classA的默认值时做了同样的操作.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter Clipboard 剪贴板操作: 复制到剪贴板 / 从剪贴板中获取</title>
      <link>http://localhost:1313/posts/post/2020/flutter-clipboard-%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C-%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF-%E4%BB%8E%E5%89%AA%E8%B4%B4%E6%9D%BF%E4%B8%AD%E8%8E%B7%E5%8F%96/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-clipboard-%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C-%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF-%E4%BB%8E%E5%89%AA%E8%B4%B4%E6%9D%BF%E4%B8%AD%E8%8E%B7%E5%8F%96/</guid>
      <description>&lt;p&gt;我们在使用Flutter进行开发时, 有时会使用类似&amp;quot;复制本段文字&amp;quot;的功能. 为了提升用户体验, 我们不希望用户长按文字, 再自行复制, 我们希望提供一个按钮直接点击复制, 甚至自动复制! 反之从剪贴板获取也一样.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 不说废话, 直接展示最终效果:&lt;/p&gt;&#xA;&lt;h4 id=&#34;复制到剪贴板&#34;&gt;复制到剪贴板&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C-03.gif&#34; alt=&#34;Flutter剪贴板操作-03&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;从剪贴板获取粘贴&#34;&gt;从剪贴板获取(粘贴)&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C-04.gif&#34; alt=&#34;Flutter剪贴板操作-04&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]如果你了解阿航的技术小站, 应该会知悉每篇文章都会提供相当详细且完整的源码. [/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;h3 id=&#34;复制到剪贴板-1&#34;&gt;复制到剪贴板&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;生成了运单号, 需要用户进行保存;&lt;/li&gt;&#xA;&lt;li&gt;某些微商APP需要复制文案, 发布朋友圈;&lt;/li&gt;&#xA;&lt;li&gt;文学类APP中, 发现一段非常好的句子, 想发给好友.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;从剪贴板中获取&#34;&gt;从剪贴板中获取&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;直接填入用户复制的短信验证码.&lt;/li&gt;&#xA;&lt;li&gt;淘宝分享的东西, 复制后打开淘宝APP.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]当然, 以上只是举了几种例子, 还有更多可以提升用户操作体验的实例在此不过多举例了, 直接开始.[/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;初始化flutter项目&#34;&gt;初始化Flutter项目&lt;/h3&gt;&#xA;&lt;p&gt;创建Flutter项目, 清理一下&lt;code&gt;./lib/main.dart&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Flutter剪贴板操作&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyHomePage(title: &amp;#39;Flutter剪贴板操作&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;  int _counter = 0;&#xA;&#xA;  void _incrementCounter() {&#xA;    setState(() {&#xA;      _counter++;&#xA;    });&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(widget.title),&#xA;      ),&#xA;      body: Center(&#xA;        child: Column(&#xA;          mainAxisAlignment: MainAxisAlignment.center,&#xA;          children: [&#xA;            Text(&#xA;              &amp;#39;You have pushed the button this many times:&amp;#39;,&#xA;            ),&#xA;            Text(&#xA;              &amp;#39;$_counter&amp;#39;,&#xA;              style: Theme.of(context).textTheme.headline4,&#xA;            ),&#xA;          ],&#xA;        ),&#xA;      ),&#xA;      floatingActionButton: FloatingActionButton(&#xA;        onPressed: _incrementCounter,&#xA;        tooltip: &amp;#39;Increment&amp;#39;,&#xA;        child: Icon(Icons.add),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行下项目, 应该空空如也:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scaffold.of() called with a context that does not contain a Scaffold</title>
      <link>http://localhost:1313/posts/post/2020/scaffold-of-called-with-a-context-that-does-not-contain-a-scaffold/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/scaffold-of-called-with-a-context-that-does-not-contain-a-scaffold/</guid>
      <description>&lt;p&gt;今天阿航在研究底部弹出提示&lt;code&gt;showSnackBar()&lt;/code&gt;组件时碰到了这个报错:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Scaffold.of() called with a context that does not contain a Scaffold.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本篇文章就来记录下这种报错该如何解决!&lt;/p&gt;&#xA;&lt;h2 id=&#34;问题原因&#34;&gt;问题原因&lt;/h2&gt;&#xA;&lt;p&gt;完整报错日志:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;════════ Exception caught by gesture ═══════════════════════════════════════════════════════════════&#xA;The following assertion was thrown while handling a gesture:&#xA;Scaffold.of() called with a context that does not contain a Scaffold.&#xA;&#xA;No Scaffold ancestor could be found starting from the context that was passed to Scaffold.of(). This usually happens when the context provided is from the same StatefulWidget as that whose build function actually creates the Scaffold widget being sought.&#xA;&#xA;There are several ways to avoid this problem. The simplest is to use a Builder to get a context that is &amp;#34;under&amp;#34; the Scaffold. For an example of this, please see the documentation for Scaffold.of():&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先来看下阿航出错的源码:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 判断当前环境是否为Web/安卓/IOS/MacOS/Windows/Linux/Fuchsia</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E7%8E%AF%E5%A2%83%E6%98%AF%E5%90%A6%E4%B8%BAweb-%E5%AE%89%E5%8D%93-ios-macos-windows-linux-fuchsia/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E7%8E%AF%E5%A2%83%E6%98%AF%E5%90%A6%E4%B8%BAweb-%E5%AE%89%E5%8D%93-ios-macos-windows-linux-fuchsia/</guid>
      <description>&lt;p&gt;如果你最近在使用Flutter, 应该了解到目前Flutter已经可以导出为Web/安卓/IOS/MacOS/Windows/Linux/Fuchsia项目了. 但是目前兼容Web的Flutter第三方库不是很多, 并且布局上可能需要进行相应的调整, 所以本篇文章就来记录下Flutter判断当前环境是否为Web!&lt;/p&gt;&#xA;&lt;h2 id=&#34;适用场景&#34;&gt;适用场景&lt;/h2&gt;&#xA;&lt;p&gt;我们通常会在原生应用和web端等有环境差异时使用, 根据不同环境做不同处理.&lt;/p&gt;&#xA;&lt;h3 id=&#34;方法一-使用原生platform判断&#34;&gt;方法一: 使用原生Platform判断&lt;/h3&gt;&#xA;&lt;p&gt;flutter已经为我们提供了获取当前运行环境的&lt;code&gt;Platform&lt;/code&gt;类.&lt;/p&gt;&#xA;&lt;p&gt;先导入:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;dart:io&amp;#39;;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进行调用:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if(Platform.isAndroid){&#xA;  // Android&#xA;}else if(Platform.isIOS){&#xA;  // IOS&#xA;}else if(Platform.isFuchsia){&#xA;  // Fuchsia&#xA;}else if(Platform.isWindows){&#xA;  // Windows&#xA;}else if(Platform.isMacOS){&#xA;  // MacOS&#xA;}else if(Platform.isLinux){&#xA;  // Linux&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然, 这个方法是有缺陷的. 因为我们无法从中判断当前环境是否为Web! 所以, 方法二就出现了.&lt;/p&gt;&#xA;&lt;h3 id=&#34;方法二-自定义工具类所有环境&#34;&gt;方法二: 自定义工具类(所有环境)&lt;/h3&gt;&#xA;&lt;h4 id=&#34;查看-constantsdart-源码&#34;&gt;查看 constants.dart 源码&lt;/h4&gt;&#xA;&lt;p&gt;进入&lt;code&gt;flutter/packages/flutter/lib/src/foundation/constants.dart&lt;/code&gt;, 我们来看看源码:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E7%8E%AF%E5%A2%83-01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们可以看到一行&lt;code&gt;kIsWeb&lt;/code&gt;的注释:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/// A constant that is true if the application was compiled to run on the web.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;💡 含义: 当应用编译运行在web上时, 该常量为&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>在Flutter中设置背景图片 / background image</title>
      <link>http://localhost:1313/posts/post/2020/%E5%9C%A8flutter%E4%B8%AD%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87-background-image/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E5%9C%A8flutter%E4%B8%AD%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87-background-image/</guid>
      <description>&lt;p&gt;有时我们需要给APP的某个页面或某个widget添加背景图. 本篇文章就来记录下如何在Flutter中设置背景图片.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们本篇博客将实现的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87-background-image-04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;速度快的同学直接看下面的核心代码!&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建flutter项目&#34;&gt;创建Flutter项目&lt;/h3&gt;&#xA;&lt;p&gt;创建一个新的Flutter项目, 运行查看一下:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87-background-image-02.png&#34; alt=&#34;Flutter 设置背景图片 background image-02&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;空白的, 啥也木有.&lt;/p&gt;&#xA;&lt;h3 id=&#34;添加图片资源&#34;&gt;添加图片资源&lt;/h3&gt;&#xA;&lt;p&gt;这里为大家提供一个好看的背景图:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87-background-image-01-1001x1500.jpg&#34; alt=&#34;Flutter 设置背景图片 background image-01&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.pexels.com/zh-cn/photo/2110951/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34; target=&#34;_blank&#34;&gt;Pexels&lt;/a&gt;&#xA;&lt;/strong&gt; 上的 &lt;strong&gt;&lt;a href=&#34;https://www.pexels.com/zh-cn/@emrecan?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34; target=&#34;_blank&#34;&gt;Emre Can&lt;/a&gt;&#xA;&lt;/strong&gt; 拍摄的照片&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;下载此图片, 重命名为&lt;code&gt;background.jpg&lt;/code&gt;. 我们来将其添加至Flutter项目中.&lt;/p&gt;&#xA;&lt;h4 id=&#34;创建资源目录&#34;&gt;创建资源目录&lt;/h4&gt;&#xA;&lt;p&gt;创建目录&lt;code&gt;./assets/images&lt;/code&gt;, 将上面的图片放到该目录下:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87-background-image-03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;引入pubspecyaml&#34;&gt;引入pubspec.yaml&lt;/h4&gt;&#xA;&lt;p&gt;进入&lt;code&gt;pubspec.yaml&lt;/code&gt;, 将背景图片资源文件路径&lt;code&gt;assets/images/background.jpg&lt;/code&gt;进行导入:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flutter:&#xA;  uses-material-design: true&#xA;  assets:&#xA;   - assets/images/background.jpg&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[epcl_box type=&amp;ldquo;notice&amp;rdquo;]这里一定要注意缩进, 若格式有误将会出错![/epcl_box]&lt;/p&gt;&#xA;&lt;p&gt;进行&lt;code&gt;package get&lt;/code&gt;或在终端中输入:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flutter packages get&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;展示背景图&#34;&gt;展示背景图&lt;/h3&gt;&#xA;&lt;p&gt;回到&lt;code&gt;./lib/main.dart&lt;/code&gt;, 进行代码替换:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Waiting for another flutter command to release the startup lock...</title>
      <link>http://localhost:1313/posts/post/2020/waiting-for-another-flutter-command-to-release-the-startup-lock/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/waiting-for-another-flutter-command-to-release-the-startup-lock/</guid>
      <description>&lt;p&gt;又是开发APP的一天, 但是在执行Flutter命令时, 终端中返回:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Waiting for another flutter command to release the startup lock…&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;字面意思是: 正在等待另一个正在执行的Flutter命令完成&amp;hellip; 本篇文章就来记录一下如何如何解决这种问题.&lt;/p&gt;&#xA;&lt;h2 id=&#34;出现原因&#34;&gt;出现原因&lt;/h2&gt;&#xA;&lt;p&gt;非常明显, 它告诉了我们已经有另一个Flutter命令正在执行! 一方面因为国内网络的原因, 有些命令执行相当慢. 导致可能很久之前执行的命令到现在也没完成. 亦或者是Flutter自己在后台执行了一些命令.&lt;/p&gt;&#xA;&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;&#xA;&lt;p&gt;所以, 要解决这个问题, 我们的目标就确定了. 那就是关闭掉当前执行的Flutter命令进程!&lt;/p&gt;&#xA;&lt;p&gt;这里阿航给大家提供了若干方法, 大家可以按需选择.&lt;/p&gt;&#xA;&lt;h3 id=&#34;方法一-安全地等待执行结束&#34;&gt;方法一: 安全地等待执行结束&lt;/h3&gt;&#xA;&lt;p&gt;这个是最省心, 也是最安全的方式. 因为强行停止某个进程可能会出现各种异常, 甚至会导致需要重新安装Flutter&amp;hellip; 如果真变成这样就糟透了😭😭😭&lt;/p&gt;&#xA;&lt;p&gt;当然, 有时我们不想等, 那么就需要下面的方法了.&lt;/p&gt;&#xA;&lt;h3 id=&#34;方法二-taskkill&#34;&gt;方法二: taskkill&lt;/h3&gt;&#xA;&lt;p&gt;打开Flutter安装目录, 复制&lt;code&gt;dart.exe&lt;/code&gt;的路径(一般会在&lt;code&gt;flutter安装目录\bin\cache\dart-sdk\bin&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;p&gt;打开Powershell或CMD.&lt;/p&gt;&#xA;&lt;p&gt;若盘符不一致, 需要先切换盘符, 比如当前在C盘, 切换至D盘:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;D:&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CD进入刚才复制的路径:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd flutter安装目录\bin\cache\dart-sdk\bin&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用taskkill关闭进程:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;taskkill /F /IM dart.exe&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果返回类似这样的信息即是成功:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;taskkill /F /IM dart.exe&#xA;成功: 已终止进程 &amp;#34;dart.exe&amp;#34;，其 PID 为 9804。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[epcl_box type=&amp;ldquo;success&amp;rdquo;]这是目前最便捷的强行关闭方式![/epcl_box]&lt;/p&gt;&#xA;&lt;h3 id=&#34;方法三-任务管理器关闭dart进程&#34;&gt;方法三: 任务管理器关闭dart进程&lt;/h3&gt;&#xA;&lt;p&gt;打开任务管理器, 点击详细信息:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter获取包名、APP名称、版本号、build构建版本号</title>
      <link>http://localhost:1313/posts/post/2020/flutter%E8%8E%B7%E5%8F%96%E5%8C%85%E5%90%8Dapp%E5%90%8D%E7%A7%B0%E7%89%88%E6%9C%AC%E5%8F%B7build%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E5%8F%B7/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter%E8%8E%B7%E5%8F%96%E5%8C%85%E5%90%8Dapp%E5%90%8D%E7%A7%B0%E7%89%88%E6%9C%AC%E5%8F%B7build%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E5%8F%B7/</guid>
      <description>&lt;p&gt;在进行APP版本迭代的过程中, 有时我们需要通过获取当前APP的版本号, 与后端服务器获取的当前最新版本进行比对, 如果出现了最新版本, 我们提醒用户进行应用更新. 本篇文章就来记录一下Flutter获取包名、应用APP名称、版本号、build构建版本号.&lt;/p&gt;&#xA;&lt;h2 id=&#34;最终效果&#34;&gt;最终效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下最终效果吧!&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E8%8E%B7%E5%8F%96%E5%8C%85%E5%90%8D%E3%80%81%E5%BA%94%E7%94%A8APP%E5%90%8D%E7%A7%B0%E3%80%81%E7%89%88%E6%9C%AC%E5%8F%B7%E3%80%81build%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E5%8F%B7-04.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;通过检查当前APP版本号来判断是否需要更新.&lt;/li&gt;&#xA;&lt;li&gt;APP出现错误日志需要传回服务器时, 获取APP基本信息(也就是看看bug出现在哪个版本!).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;引入packageinfo&#34;&gt;引入PackageInfo&lt;/h3&gt;&#xA;&lt;p&gt;老样子, 上官方的存储库中寻找我们今天需要的&lt;code&gt;PackageInfo&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E8%8E%B7%E5%8F%96%E5%8C%85%E5%90%8D%E3%80%81%E5%BA%94%E7%94%A8APP%E5%90%8D%E7%A7%B0%E3%80%81%E7%89%88%E6%9C%AC%E5%8F%B7%E3%80%81build%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E5%8F%B7-01.png&#34; alt=&#34;Flutter获取包名、应用APP名称、版本号、build构建版本号-01&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]一般我们选用第三方库会看三个指标: 评分、兼容性以及活跃度.[/epcl_box]&lt;/p&gt;&#xA;&lt;p&gt;这个库将会成为我们获取APP信息的主力.&lt;/p&gt;&#xA;&lt;p&gt;进入&lt;code&gt;./pubspec.yaml&lt;/code&gt;, 导入:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dependencies:&#xA;  package_info: ^0.4.0+18&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;images/Flutter%E8%8E%B7%E5%8F%96%E5%8C%85%E5%90%8D%E3%80%81%E5%BA%94%E7%94%A8APP%E5%90%8D%E7%A7%B0%E3%80%81%E7%89%88%E6%9C%AC%E5%8F%B7%E3%80%81build%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E5%8F%B7-02.png&#34; alt=&#34;Flutter获取包名、应用APP名称、版本号、build构建版本号-02&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;一定要注意缩进哦!&lt;/p&gt;&#xA;&lt;h3 id=&#34;初始化项目&#34;&gt;初始化项目&lt;/h3&gt;&#xA;&lt;p&gt;为了让大家更直观的看到, 这里提供&lt;code&gt;./lib/main.dart&lt;/code&gt;的代码, 你可以直接进行复制并运行:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;获取设备信息Demo&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyHomePage(title: &amp;#39;获取设备信息&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(widget.title),&#xA;      ),&#xA;      body: Center(&#xA;        child: Column(&#xA;          mainAxisAlignment: MainAxisAlignment.center,&#xA;          children: [&#xA;            Text(&#xA;              &amp;#39;App信息&amp;#39;,&#xA;              style: TextStyle(fontSize: 30),&#xA;            ),&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;💡 代码解析: 只是一个空的项目. 我们将基于这个空项目继续我们的实例.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 修改包名 package name</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D-package-name/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D-package-name/</guid>
      <description>&lt;p&gt;通常使用&lt;code&gt;flutter create&lt;/code&gt;命令创建新的flutter项目时, 包名是默认的&lt;code&gt;com.example&lt;/code&gt;(或类似的包名). 很明显在开发一个属于自己的项目时, 这样是不对的. 需要将包名改为自己的或者所在公司的域名反写. 本篇文章就来写下如何修改Flutter的package name (包名).&lt;/p&gt;&#xA;&lt;h2 id=&#34;方法一-创建项目时指定包名&#34;&gt;方法一: 创建项目时指定包名&lt;/h2&gt;&#xA;&lt;p&gt;如果你还未创建项目, 或者已有项目代码量较少, 可以通过此命令来创建项目:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flutter create --org 你的域名反写 项目名称&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;比如:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flutter create --org com.bugcatt langaw&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然, 如果你的项目已经成型, 不便于迁移, 那么请考虑下面的方法.&lt;/p&gt;&#xA;&lt;h2 id=&#34;方法二-代码内修改&#34;&gt;方法二: 代码内修改&lt;/h2&gt;&#xA;&lt;h3 id=&#34;修改buildgradleandroid&#34;&gt;修改build.gradle(android)&lt;/h3&gt;&#xA;&lt;p&gt;打开&lt;code&gt;./android/app/build.gradle&lt;/code&gt;, 找到类似这样的:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    defaultConfig {&#xA;        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).&#xA;        applicationId &amp;#34;com.bugcatt.flutter_app_desktop&amp;#34;&#xA;        minSdkVersion 16&#xA;        targetSdkVersion 28&#xA;        versionCode flutterVersionCode.toInteger()&#xA;        versionName flutterVersionName&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改其中的&lt;code&gt;applicationId&lt;/code&gt;为你自己的.&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]有些同学可能已经注意到了, defaultConfig中已经给出了一个&amp;quot;TODO&amp;quot;让我们处理![/epcl_box]&lt;/p&gt;&#xA;&lt;h3 id=&#34;修改infoplistios&#34;&gt;修改Info.plist(IOS)&lt;/h3&gt;&#xA;&lt;p&gt;打开&lt;code&gt;./ios/Runner.xcodeproj&lt;/code&gt;, 搜索关键字&lt;code&gt;PRODUCT_BUNDLE_IDENTIFIER&lt;/code&gt;. 修改所有的:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PRODUCT_BUNDLE_IDENTIFIER = 包名;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[epcl_box type=&amp;ldquo;notice&amp;rdquo;]分号什么的别忘记哦![/epcl_box]&lt;/p&gt;&#xA;&lt;h3 id=&#34;修改appinfoxcconfigmacos&#34;&gt;修改AppInfo.xcconfig(MacOS)&lt;/h3&gt;&#xA;&lt;p&gt;如果你同样开启了MacOS的桌面应用开发, 则需要本步骤!&lt;/p&gt;&#xA;&lt;p&gt;打开&lt;code&gt;./macos/Runner/Configs/AppInfo.xcconfig&lt;/code&gt;, 可以看到有三个属性:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter Toast、弹出提示、轻提示</title>
      <link>http://localhost:1313/posts/post/2020/flutter-toast%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA%E8%BD%BB%E6%8F%90%E7%A4%BA/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-toast%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA%E8%BD%BB%E6%8F%90%E7%A4%BA/</guid>
      <description>&lt;p&gt;主流的三种APP反馈形式: &lt;code&gt;toast&lt;/code&gt;、&lt;code&gt;snackbar&lt;/code&gt;以及&lt;code&gt;dialog&lt;/code&gt;. &lt;code&gt;toast&lt;/code&gt;又称为弹出提示、轻提示.通常用于提示用户一些不那么重要的信息, 会弹出并显示文字一段时间. 时间一到就会消失. 相较于&lt;code&gt;snackbar&lt;/code&gt;和&lt;code&gt;dialog&lt;/code&gt;, 对屏幕的入侵较少. 身为开发人员怎能不掌握toast的基本使用? 这篇文章阿航就带着大家一起探讨一下Flutter中的&lt;code&gt;toast&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 我们来看下我们本次要实现的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-Toast%E3%80%81%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA%E3%80%81%E8%BD%BB%E6%8F%90%E7%A4%BA-06.gif&#34; alt=&#34;Flutter-Toast、弹出提示、轻提示-06&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;源码地址&#34;&gt;源码地址&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;👉在&lt;a href=&#34;https://github.com/HarrisonQi/flutter-actual-combat-demo/tree/master/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&#xA;或&lt;a href=&#34;https://gitee.com/HarrisonQI/flutter-actual-combat-demo/tree/master/flutter_toast_tutorial&#34; target=&#34;_blank&#34;&gt;码云&lt;/a&gt;&#xA;上查看本篇文章全部代码.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;搜索fluttertoast&#34;&gt;搜索fluttertoast&lt;/h2&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]有同学会问, 为什么要选择插件, 不选择原生呢… 因为Flutter没有我们所需的这种效果! 只有自带的snackBar![/epcl_box]&lt;/p&gt;&#xA;&lt;p&gt;老样子, 上&lt;a href=&#34;https://pub.flutter-io.cn/packages&#34; target=&#34;_blank&#34;&gt;pub.dev&lt;/a&gt;&#xA;寻找我们所需的插件, 在搜索框输入&lt;code&gt;fluttertoast&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;p&gt;看到第一条:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-Toast%E3%80%81%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA%E3%80%81%E8%BD%BB%E6%8F%90%E7%A4%BA-01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;99&lt;/code&gt;分, 相当高的评分.&lt;/p&gt;&#xA;&lt;p&gt;点进去, 查看最新版本发布日期和兼容性:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-Toast%E3%80%81%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA%E3%80%81%E8%BD%BB%E6%8F%90%E7%A4%BA-02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]一般我们在选择一款Flutter插件时, 会先看它的评分(Flutter官方评分还是比较严格的). 之后再去看看它的最新日期(如果很久未更新, 可能项目已经停止维护了). 最后再来看看它的兼容性, 是否合乎我们的规则.[/epcl_box]&lt;/p&gt;&#xA;&lt;p&gt;同时支持&lt;code&gt;Android&lt;/code&gt;、&lt;code&gt;IOS&lt;/code&gt;以及&lt;code&gt;Web&lt;/code&gt;. 兼容性很好.&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建项目&#34;&gt;创建项目&lt;/h3&gt;&#xA;&lt;p&gt;创建一个Flutter项目, 先来清理项目.&lt;/p&gt;&#xA;&lt;p&gt;删除&lt;code&gt;./test&lt;/code&gt;目录, 因为我们的这个项目只是一个简单的demo. 不需要测试驱动开发.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-Toast%E3%80%81%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA%E3%80%81%E8%BD%BB%E6%8F%90%E7%A4%BA-03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过flutter创建的项目的&lt;code&gt;./lib/main.dart&lt;/code&gt;会有很多自带的注释, 我们替换整个文件为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;阿航的技术小站 Flutter toast&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyHomePage(title: &amp;#39;Flutter toast实战&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(widget.title),&#xA;      ),&#xA;      body: Center(&#xA;        child: Column(&#xA;          mainAxisAlignment: MainAxisAlignment.center,&#xA;          children: [],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;💡 代码解析: 删除了多余的注释, 和部分初始化的按钮. 添加一些名称.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flame 屏幕手柄/摇杆</title>
      <link>http://localhost:1313/posts/post/2020/flame-%E5%B1%8F%E5%B9%95%E6%89%8B%E6%9F%84-%E6%91%87%E6%9D%86/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flame-%E5%B1%8F%E5%B9%95%E6%89%8B%E6%9F%84-%E6%91%87%E6%9D%86/</guid>
      <description>&lt;p&gt;可以看到, 目前最主流的手机游戏都使用屏上手柄/摇杆进行控制, 比如:&lt;/p&gt;&#xA;&lt;p&gt;[caption id=&amp;ldquo;attachment_1286&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;700&amp;rdquo;]&lt;img src=&#34;images/Flutter-Flame-%E6%91%87%E6%9D%86-02-700x390.jpg&#34; alt=&#34;Flutter Flame 摇杆-02&#34;&gt; League of Legends Mobile (英雄联盟手游)[/caption]&lt;/p&gt;&#xA;&lt;p&gt;[caption id=&amp;ldquo;attachment_1284&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;700&amp;rdquo;]&lt;img src=&#34;images/Flutter-Flame-%E6%91%87%E6%9D%86-01-700x341.jpg&#34; alt=&#34;Flutter Flame 摇杆-01&#34;&gt; PUBG Mobile (和平精英)[/caption]&lt;/p&gt;&#xA;&lt;p&gt;[caption id=&amp;ldquo;attachment_1288&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;700&amp;rdquo;]&lt;img src=&#34;images/Flutter-Flame-%E6%91%87%E6%9D%86-03-700x376.jpg&#34; alt=&#34;Flutter Flame 摇杆-03&#34;&gt; Minecraft PE(我的世界手机版)[/caption]&lt;/p&gt;&#xA;&lt;p&gt;以上游戏都在当前手游榜(2020.04)排名前五.&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]看得出来, 目前的核心玩法、操作交互都离不开手柄/摇杆![/epcl_box]&lt;/p&gt;&#xA;&lt;p&gt;所以, 本篇文章就来教大家在使用Flame框架时, 在屏幕上展示摇杆, 并控制某些component!&lt;/p&gt;&#xA;&lt;p&gt;我们要做的项目名称为&lt;strong&gt;Lame Tank 360&lt;/strong&gt;(Lame坦克360).&lt;/p&gt;&#xA;&lt;p&gt;本项目将完整支持360°的旋转. 并将坦克的&amp;quot;炮塔&amp;quot;与&amp;quot;坦克身体&amp;quot;分开. 因此, 我们必须建立两个摇杆.&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;p&gt;若想顺利学习本篇教程, 你需要具备:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;掌握Flutter的基础用法.&lt;/li&gt;&#xA;&lt;li&gt;已完整学习Flame系列教程.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;notice&amp;rdquo;]如果你没有满足上述条件, 你将无法顺利完成这篇教程. 建议先阅读&lt;a href=&#34;https://www.bugcatt.com/archives/279&#34; target=&#34;_blank&#34;&gt;《Flutter游戏开发-Flame教程》&lt;/a&gt;&#xA;![/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建flutter项目&#34;&gt;创建Flutter项目&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flutter create lame_tank_360&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]阿航的教程, 只要涉及到创建项目、命名的相关操作, 身为读者的你可以用阿航教程提供的, 你也可以自己起名! 别忘了替换代码中牵扯的名称为你自己的![/epcl_box]&lt;/p&gt;&#xA;&lt;h3 id=&#34;初始化项目设置&#34;&gt;初始化项目设置&lt;/h3&gt;&#xA;&lt;p&gt;现在项目是可以运行的, 但是只是Flutter默认生成的&lt;/p&gt;</description>
    </item>
    <item>
      <title>项目速度显著提高! Flutter官方宣布增加Adobe XD的支持!</title>
      <link>http://localhost:1313/posts/post/2020/%E9%A1%B9%E7%9B%AE%E9%80%9F%E5%BA%A6%E6%98%BE%E8%91%97%E6%8F%90%E9%AB%98-flutter%E5%AE%98%E6%96%B9%E5%AE%A3%E5%B8%83%E5%A2%9E%E5%8A%A0adobe-xd%E7%9A%84%E6%94%AF%E6%8C%81/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E9%A1%B9%E7%9B%AE%E9%80%9F%E5%BA%A6%E6%98%BE%E8%91%97%E6%8F%90%E9%AB%98-flutter%E5%AE%98%E6%96%B9%E5%AE%A3%E5%B8%83%E5%A2%9E%E5%8A%A0adobe-xd%E7%9A%84%E6%94%AF%E6%8C%81/</guid>
      <description>&lt;p&gt;&lt;code&gt;Flutter&lt;/code&gt;作为近两年年来的新型APP开发语言, 其受欢迎程度甚至和&lt;code&gt;React Native&lt;/code&gt;不相上下. 最近, Flutter发表了一篇振奋人心的文章, 那就是新增了对&lt;code&gt;Adobe XD&lt;/code&gt;的支持.&lt;/p&gt;&#xA;&lt;h2 id=&#34;sketch和adobe-xd&#34;&gt;Sketch和Adobe XD&lt;/h2&gt;&#xA;&lt;p&gt;如果你涉足过设计领域, 那么一定知道两个设计工具, 分别是&lt;code&gt;Sketch&lt;/code&gt;以及&lt;code&gt;Adobe XD&lt;/code&gt;. 大多数互联网公司的设计稿输出, 都是靠它们来进行. 当然, &lt;code&gt;Sketch&lt;/code&gt;有着一个比较致命的限制, 那就是目前并不支持Windows系统.&lt;/p&gt;&#xA;&lt;p&gt;作为设计师, 你应该碰到过将设计稿交给开发人员后, 做出的效果差强人意. 即使开发人员保证了所有的位置、距离、长度均准确无误, 但是你却怎么看怎么别扭😥😥.&lt;/p&gt;&#xA;&lt;h2 id=&#34;令人头大的positionpx&#34;&gt;令人头大的position、px&lt;/h2&gt;&#xA;&lt;p&gt;作为前端开发人员, 你一定为这个问题头疼了无数次——布局! 没错, 你明明完全按照设计师给出的设计稿上标注的尺寸去做了, 但是效果就是不咋地! 要做出类似的效果, 你还要慢慢的调整! 累!&lt;/p&gt;&#xA;&lt;h2 id=&#34;是时候解决双方的苦恼了&#34;&gt;是时候解决双方的苦恼了&lt;/h2&gt;&#xA;&lt;p&gt;终于, 在2020年5月13日, Flutter官方宣布了&lt;code&gt;Adobe XD&lt;/code&gt;对其的支持, 那么, 到底有何变化呢?&lt;/p&gt;&#xA;&lt;h3 id=&#34;从adobe-xd导出flutter代码&#34;&gt;从Adobe XD导出Flutter代码&lt;/h3&gt;&#xA;&lt;p&gt;使用XD可以在几分钟内导出Flutter代码. 你可以导出单个图形, 也可以导出整张画板!&lt;/p&gt;&#xA;&lt;p&gt;你不需要将设计稿转化为一个又一个的区块了! 直接微调就可以了!&lt;/p&gt;&#xA;&lt;h3 id=&#34;减少浪费时间的布局调整&#34;&gt;减少浪费时间的布局调整&lt;/h3&gt;&#xA;&lt;p&gt;最让人头疼的就是数字了, 上面的生成代码, 同样会生成布局所需的各种数值!&lt;/p&gt;&#xA;&lt;h2 id=&#34;原文译文&#34;&gt;原文译文&lt;/h2&gt;&#xA;&lt;p&gt;上面只列出了重点功能, 阿航给大家翻译了原文:&lt;/p&gt;&#xA;&lt;p&gt;Flutter的目标是为创意表达提供丰富的画布。借助iOS和Android上的硬件性能，对屏幕上渲染的每个像素的完全控制以及通过有状态的热重载进行快速迭代的能力，我们希望释放设计师和开发人员的潜力，建立不受人为技术边界限制的舒适体验.&lt;/p&gt;&#xA;&lt;p&gt;去年在&lt;a href=&#34;https://www.youtube.com/watch?v=HjZxyTJzvYg&amp;amp;feature=emb_logo&#34; target=&#34;_blank&#34;&gt;Flutter Interact活动上&lt;/a&gt;&#xA;，我们将焦点放在使用Flutter进行探索和实验的创作者身上。我们听到了像&lt;a href=&#34;https://www.youtube.com/watch?v=DEppSs_ko48&#34; target=&#34;_blank&#34;&gt;Robert Felker&lt;/a&gt;&#xA;这样的数字艺术家的声音，他们使用Flutter通过生成算法构建空灵形式。我们介绍&lt;a href=&#34;https://flutter.gskinner.com/&#34; target=&#34;_blank&#34;&gt;了gskinner之类的创意机构的工作&lt;/a&gt;&#xA;，他们创建了一系列创新的短片来展示Flutter的潜力。我们还看到了Adobe的演示，该演示&lt;a href=&#34;https://www.youtube.com/watch?v=ukLBCRBlIkk&amp;amp;feature=youtu.be&amp;amp;t=3652&#34; target=&#34;_blank&#34;&gt;是Adobe XD插件&lt;/a&gt;&#xA;的&lt;a href=&#34;https://www.youtube.com/watch?v=ukLBCRBlIkk&amp;amp;feature=youtu.be&amp;amp;t=3652&#34; target=&#34;_blank&#34;&gt;早期原型，该插件&lt;/a&gt;&#xA;直接从其工具中导出Flutter代码。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E9%A1%B9%E7%9B%AE%E9%80%9F%E5%BA%A6%E6%98%BE%E8%91%97%E6%8F%90%E9%AB%98-Flutter%E5%AE%98%E6%96%B9%E5%AE%A3%E5%B8%83%E5%A2%9E%E5%8A%A0Adobe-XD%E7%9A%84%E6%94%AF%E6%8C%81-01.png&#34; alt=&#34;项目速度显著提高! Flutter官方宣布增加Adobe XD的支持!-01&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;(Flutter是用于创意表达的丰富画布：这是一种不受传统技术界限限制的美丽原生体验的工具包。（由Flutter制作的生成艺术品，由Robert Felker提供。))&lt;/p&gt;&#xA;&lt;p&gt;今天，&lt;strong&gt;我们很高兴与Adobe一起宣布他们的XD to Flutter插件&lt;/strong&gt;&lt;a href=&#34;https://adobe.com/go/xd_plugins_discover_plugin?pluginId=6eaf77ea&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;现在可以作为&lt;/strong&gt;&lt;/a&gt;&#xA;更广泛的公共测试的&lt;a href=&#34;https://adobe.com/go/xd_plugins_discover_plugin?pluginId=6eaf77ea&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;初步试用&lt;/strong&gt;&lt;/a&gt;&#xA;。&lt;a href=&#34;https://www.adobe.com/products/xd.html&#34; target=&#34;_blank&#34;&gt;Adobe XD&lt;/a&gt;&#xA;是一个UI / UX设计和协作工具，可帮助团队为网站，应用程序，语音界面，游戏等创建和共享设计。XD 是Adobe同类领先的&lt;a href=&#34;https://www.adobe.com/creativecloud.html&#34; target=&#34;_blank&#34;&gt;Creative Cloud的一部分&lt;/a&gt;&#xA;，它使设计师可以将矢量艺术，文本，图像，微交互和动画转换为行为类似的工作软件产品的交互式原型。将设计导出到Flutter的能力进一步减少了创意与产品开发之间的等待时间，因为XD原型现在可以在数分钟内成为Flutter代码。Adobe XD支持Windows或macOS上的设计，并包括&lt;a href=&#34;https://www.adobe.com/products/xd/compare-plans.html&#34; target=&#34;_blank&#34;&gt;免费的入门计划&lt;/a&gt;&#xA;，可助您启动并运行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>修改Flutter的APP图标、启动器图标</title>
      <link>http://localhost:1313/posts/post/2020/%E4%BF%AE%E6%94%B9flutter%E7%9A%84app%E5%9B%BE%E6%A0%87%E5%90%AF%E5%8A%A8%E5%99%A8%E5%9B%BE%E6%A0%87/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E4%BF%AE%E6%94%B9flutter%E7%9A%84app%E5%9B%BE%E6%A0%87%E5%90%AF%E5%8A%A8%E5%99%A8%E5%9B%BE%E6%A0%87/</guid>
      <description>&lt;p&gt;在APP上线前, 我们肯定需要修改APP的启动图标. APP图标代表了它的品牌, 增加了辨识度. 让用户可以在手机的APP列表内快速找到你的APP. 所以本篇博客将记录修改Flutter 的APP图标/启动器图标的全过程.&lt;/p&gt;&#xA;&lt;h2 id=&#34;android图标&#34;&gt;Android图标&lt;/h2&gt;&#xA;&lt;h3 id=&#34;查看初始图标&#34;&gt;查看初始图标&lt;/h3&gt;&#xA;&lt;p&gt;打开目录&lt;code&gt;./android/app/src/main/res&lt;/code&gt;, 你会发现有如下几个目录:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mipmap-hdpi&#xA;mipmap-mdpi&#xA;mipmap-xhdpi&#xA;mipmap-xxhdpi&#xA;mipmap-xxxhdpi&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如图:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/01-4.png&#34; alt=&#34;修改Flutter的APP图标 启动器图标&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;当你打开每个文件, 会发现每个图标都是这张初始图片:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/02-5.png&#34; alt=&#34;修改Flutter的APP图标 启动器图标&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;图标尺寸规范&#34;&gt;图标尺寸规范&lt;/h3&gt;&#xA;&lt;p&gt;我们需要准备以下图片:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;对应目录&lt;/th&gt;&#xA;          &lt;th&gt;尺寸&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;mipmap-mdpi&lt;/td&gt;&#xA;          &lt;td&gt;48×48&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;mipmap-hdpi&lt;/td&gt;&#xA;          &lt;td&gt;72×72&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;mipmap-xhdpi&lt;/td&gt;&#xA;          &lt;td&gt;96×96&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;mipmap-xxhdpi&lt;/td&gt;&#xA;          &lt;td&gt;144×144&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;mipmap-xxxhdpi&lt;/td&gt;&#xA;          &lt;td&gt;192×192&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;图标命名规范&#34;&gt;图标命名规范&lt;/h3&gt;&#xA;&lt;p&gt;它们的文件名通通是&lt;code&gt;ic_launcher.png&lt;/code&gt;!&lt;/p&gt;&#xA;&lt;h3 id=&#34;图标目录结构&#34;&gt;图标目录结构&lt;/h3&gt;&#xA;&lt;p&gt;目录结构:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./android/app/src/main/res/mipmap-mdpi/ic_launcher.png&#xA;./android/app/src/main/res/mipmap-hdpi/ic_launcher.png&#xA;./android/app/src/main/res/mipmap-xhdpi/ic_launcher.png&#xA;./android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png&#xA;./android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;替换完成后, 重新运行你的Flutter项目. 看看你的调试设备的APP启动图标, 你应该就可以看到修改的结果了!&lt;/p&gt;&#xA;&lt;h2 id=&#34;感谢&#34;&gt;感谢&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.pexels.com/zh-cn/photo/267389/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34; target=&#34;_blank&#34;&gt;Pexels&lt;/a&gt;&#xA; 上的 &lt;a href=&#34;https://www.pexels.com/zh-cn/@pixabay?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34; target=&#34;_blank&#34;&gt;Pixabay&lt;/a&gt;&#xA; 拍摄的照片&lt;/p&gt;&#xA;&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;&#xA;&lt;p&gt;如果你对本篇文章有任何问题, 欢迎在下方评论区, 进行讨论, 或加入&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=egT9rjgu&#34; target=&#34;_blank&#34;&gt;阿航的技术小站交流群&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;欢迎访问&lt;a href=&#34;https://www.bugcatt.com&#34; target=&#34;_blank&#34;&gt;阿航的技术小站&lt;/a&gt;&#xA;官网, 获取更多技术干货!&lt;/p&gt;</description>
    </item>
    <item>
      <title>在Flutter中使用16进制颜色</title>
      <link>http://localhost:1313/posts/post/2020/%E5%9C%A8flutter%E4%B8%AD%E4%BD%BF%E7%94%A816%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E5%9C%A8flutter%E4%B8%AD%E4%BD%BF%E7%94%A816%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2/</guid>
      <description>&lt;p&gt;使用16进制表示颜色是较为主流的方式, 那么在本篇文章中将简单讲讲如何在Flutter中使用16进制颜色.&lt;/p&gt;&#xA;&lt;h2 id=&#34;方法一-使用原生方法&#34;&gt;方法一: 使用原生方法&lt;/h2&gt;&#xA;&lt;p&gt;Flutter中, &lt;code&gt;Color&lt;/code&gt;类仅接收整数作为参数. 你也可以使用&lt;code&gt;fromARGB&lt;/code&gt;或者&lt;code&gt;fromRGBO&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;比如拿到了一个16进制颜色&lt;code&gt;#b74093&lt;/code&gt;. 因为&lt;code&gt;Color&lt;/code&gt;还需要传入透明度, &lt;code&gt;255&lt;/code&gt;就是最大值(也就是不透明), 转为16进制就是&lt;code&gt;0xFF&lt;/code&gt;, 所以我们只需这样表示:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const color = Color(0xffb74093);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正规一点的写法(可选, 因为大小写不敏感):&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const color = Color(0xFFB74093);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;方法二-接收字符串格式-转为color&#34;&gt;方法二: 接收字符串格式, 转为Color&lt;/h2&gt;&#xA;&lt;p&gt;创建一个&lt;code&gt;HexColor&lt;/code&gt;类:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class HexColor extends Color {&#xA;  static int _getColorFromHex(String hexColor) {&#xA;    hexColor = hexColor.toUpperCase().replaceAll(&amp;#34;#&amp;#34;, &amp;#34;&amp;#34;);&#xA;    if (hexColor.length == 6) {&#xA;      hexColor = &amp;#34;FF&amp;#34; + hexColor;&#xA;    }&#xA;    return int.parse(hexColor, radix: 16);&#xA;  }&#xA;&#xA;  HexColor(final String hexColor) : super(_getColorFromHex(hexColor));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后进行调用:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Color color1 = HexColor(&amp;#34;b74093&amp;#34;);&#xA;Color color2 = HexColor(&amp;#34;#b74093&amp;#34;);&#xA;Color color3 = HexColor(&amp;#34;#88b74093&amp;#34;);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;感谢&#34;&gt;感谢&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/50081213/how-do-i-use-hexadecimal-color-strings-in-flutter&#34; target=&#34;_blank&#34;&gt;How do I use hexadecimal color strings in Flutter? - Stack Overflow&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;&#xA;&lt;p&gt;如果你对本篇文章有任何问题, 欢迎在下方评论区, 进行讨论, 或加入&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=egT9rjgu&#34; target=&#34;_blank&#34;&gt;阿航的技术小站QQ交流群&lt;/a&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>移除Flutter右上角的DEBUG标识</title>
      <link>http://localhost:1313/posts/post/2020/%E7%A7%BB%E9%99%A4flutter%E5%8F%B3%E4%B8%8A%E8%A7%92%E7%9A%84debug%E6%A0%87%E8%AF%86/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E7%A7%BB%E9%99%A4flutter%E5%8F%B3%E4%B8%8A%E8%A7%92%E7%9A%84debug%E6%A0%87%E8%AF%86/</guid>
      <description>&lt;p&gt;在使用Flutter进行开发时, 右上角会出现一个DEBUG的标识. 测试的时候倒是无所谓, 但是APP上线前肯定要将其去掉. 证明其是一个开发完成的、完整的APP. 这篇非常简短的博客将会记录如何去掉Flutter右上角的DEBUG标识. 一共有两种方式, 你可以按需来选择!&lt;/p&gt;&#xA;&lt;h2 id=&#34;自动移除&#34;&gt;自动移除&lt;/h2&gt;&#xA;&lt;p&gt;别担心, 你在为Flutter打正式包的时候, 这个标志将会自动消失. 但有的时候我们想在开发过程中直接去掉, 那么你会需要下面的手动移除.&lt;/p&gt;&#xA;&lt;h2 id=&#34;方法一-代码修改&#34;&gt;方法一: 代码修改&lt;/h2&gt;&#xA;&lt;p&gt;找到你的&lt;code&gt;MaterialApp&lt;/code&gt;(建议直接使用关键字进行全局搜索), 为其添加一个属性即可去掉:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;MaterialApp(&#xA; debugShowCheckedModeBanner: false&#xA; ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如图:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/01-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;方法二-android-studio修改&#34;&gt;方法二: Android Studio修改&lt;/h2&gt;&#xA;&lt;p&gt;如果你用的是Android Studio, 那么你可以不修改代码, 通过鼠标来移除:&lt;/p&gt;&#xA;&lt;p&gt;第一步: 点击界面右侧侧边栏的&lt;code&gt;Flutter Inspector&lt;/code&gt;, 如图:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/02-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第二步: 点击弹出界面的&amp;quot;More Actions&amp;quot;的下拉选(这个按钮字比较小, 比较隐蔽):&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/03-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第三步: 点击下拉选项的&amp;quot;Hide Debug Mode Banner&amp;quot;:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/04-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;搞定!&lt;/p&gt;&#xA;&lt;h2 id=&#34;感谢&#34;&gt;感谢&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.pexels.com/zh-cn/photo/5412/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34; target=&#34;_blank&#34;&gt;Pexels&lt;/a&gt;&#xA; 上的 &lt;a href=&#34;https://www.pexels.com/zh-cn/@jaymantri?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34; target=&#34;_blank&#34;&gt;Jaymantri&lt;/a&gt;&#xA; 拍摄的照片&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/48893935/how-to-remove-debug-banner-in-flutter-on-android-emulator&#34; target=&#34;_blank&#34;&gt;How to remove debug banner in flutter on android emulator? - Stack Overflow&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;(排名不分先后)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;&#xA;&lt;p&gt;两种方式都可以进行修改, 唯一的区别就是方法一影响代码, 方法二不会变动代码. 你可以按实际情况选择你需要的方式!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dart 中的 Null-aware (null感知运算符)</title>
      <link>http://localhost:1313/posts/post/2020/dart-%E4%B8%AD%E7%9A%84-null-aware-null%E6%84%9F%E7%9F%A5%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/dart-%E4%B8%AD%E7%9A%84-null-aware-null%E6%84%9F%E7%9F%A5%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>&lt;p&gt;来到这篇文章, 说明你一定想在 Dart 的语法上更进一步(不出意外的话, 你在学 Flutter 🤭🤭). 工欲善其事, 必先利其器. 一个优秀的程序员应该掌握可以节省代码量的高级语法, 不论是节约时间还是提升水平. 本篇文章就来讲讲Dart语言中的 Null-aware ( null感知运算符 )吧!&lt;/p&gt;&#xA;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;Dart的Null-aware来自于&lt;code&gt;Dart 1.12&lt;/code&gt;正式版本:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/01-2-1500x675.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;你也可以看看&lt;a href=&#34;https://news.dartlang.org/2015/08/dart-112-released-with-null-aware.html&#34; target=&#34;_blank&#34;&gt;官网版本介绍&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&lt;h2 id=&#34;用途&#34;&gt;用途&lt;/h2&gt;&#xA;&lt;p&gt;存在即是合理. 既然有这样的新运算符, 说明它在一定程度上&lt;strong&gt;节省了我们的代码&lt;/strong&gt;, 使&lt;strong&gt;代码更加简洁&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;既然它被称为&lt;code&gt;Null-aware&lt;/code&gt;, 说明这个运算符是专门&lt;strong&gt;用于处理&lt;code&gt;null&lt;/code&gt;值&lt;/strong&gt;的. 将会提供空指针的相关操作.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/02-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建示例对象&#34;&gt;创建示例对象&lt;/h2&gt;&#xA;&lt;p&gt;我们来创建一个&lt;code&gt;Person&lt;/code&gt;对象, 方便后续使用:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Person{&#xA;  // 性别&#xA;  String gender;&#xA;&#xA;  // 变更性别为女性&#xA;  void changeToFemale(){&#xA;    gender = &amp;#34;女性&amp;#34;;&#xA;  }&#xA;}&#xA;&#xA;Person person = Person();&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading&#34;&gt;??&lt;/h2&gt;&#xA;&lt;p&gt;当前者为null时, 返回后者.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exp ?? anotherExp&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;实例-获取用户性别&#34;&gt;实例: 获取用户性别&lt;/h3&gt;&#xA;&lt;p&gt;当某个Person对象的gender(性别)属性为null时, 返回&amp;rsquo;未知&#39;:&lt;/p&gt;&#xA;&lt;h4 id=&#34;方法一-基础if语句&#34;&gt;方法一: 基础IF语句&lt;/h4&gt;&#xA;&lt;p&gt;我们可以用最基础的语句来写:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;String gender;&#xA;if(person.gender!=null){&#xA;    gender = person.gender;&#xA;}else{&#xA;    gender = &amp;#39;未知&amp;#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;方法二-三目运算&#34;&gt;方法二: 三目运算&lt;/h4&gt;&#xA;&lt;p&gt;三目运算符相当好用:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 清理编译缓存</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%B8%85%E7%90%86%E7%BC%96%E8%AF%91%E7%BC%93%E5%AD%98/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%B8%85%E7%90%86%E7%BC%96%E8%AF%91%E7%BC%93%E5%AD%98/</guid>
      <description>&lt;p&gt;在使用Flutter进行开发时, 经常会产生很多的编译缓存文件, 比如:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/01-2.png&#34; alt=&#34;Flutter 清理编译缓存&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这样可以加快下次的编译速度. 但有时会出现一些我们神奇的报错, 很有可能是缓存不兼容所造成的! 有时出现的无解bug, 重启一下IDE或模拟器, 清理一下缓存就会被解决&amp;hellip; 别问, 问就是阿航踩过好几次坑😢😢😢😢&lt;/p&gt;&#xA;&lt;p&gt;这一篇就会讲如何清理flutter的编译缓存. (不是APP的数据缓存, 别弄混!)&lt;/p&gt;&#xA;&lt;h2 id=&#34;方法一-ide自带清理按钮&#34;&gt;方法一: IDE自带清理按钮&lt;/h2&gt;&#xA;&lt;p&gt;这里拿官方推荐的&lt;code&gt;Android Studio&lt;/code&gt;举例:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/02-2.png&#34; alt=&#34;Flutter 清理编译缓存&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;方法二-使用命令行清理&#34;&gt;方法二: 使用命令行清理&lt;/h2&gt;&#xA;&lt;p&gt;使用终端(cmd)进入项目目录.&lt;/p&gt;&#xA;&lt;p&gt;输入清理命令:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flutter clean&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;清理完成&#34;&gt;清理完成&lt;/h2&gt;&#xA;&lt;p&gt;清理完成后, 可以看到之前的&lt;code&gt;.dart_tool&lt;/code&gt;以及&lt;code&gt;build&lt;/code&gt;目录被清理干净, 下次编译会从0开始. 也可能顺便解决你的一些未知bug😜&lt;/p&gt;&#xA;&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;&#xA;&lt;p&gt;本篇文章来自&lt;a href=&#34;https://blog.bugcatt.com&#34; target=&#34;_blank&#34;&gt;阿航的技术小站&lt;/a&gt;&#xA;.&lt;/p&gt;&#xA;&lt;p&gt;对文章有任何问题, 欢迎在下方评论区进行讨论. 阿航会尽力回复.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 国际化: 多语言处理(Easy localization)</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E5%9B%BD%E9%99%85%E5%8C%96-%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86easy-localization/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E5%9B%BD%E9%99%85%E5%8C%96-%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86easy-localization/</guid>
      <description>&lt;p&gt;语言不互通是困扰了人类几千年的大难题🤐. 许多国外优秀的文学作品、 APP因为没有进行多国语言的处理, 导致发展缓慢甚至停滞. 虽然现在的各大翻译软件已经非常强大了. 但是想象一下: 一个用户一边拿着翻译机一边使用某个软件. 这样恐怕会逼疯用户, 可能会很快的放弃😭😭.&lt;/p&gt;&#xA;&lt;p&gt;如果你的APP有相当一部分用户是来自全球各地, 那么对APP的国际化就是刚需💪.&lt;/p&gt;&#xA;&lt;p&gt;对APP的国际化可以直线提升外国友人用户体验, 顺便会提高你的APP的&amp;quot;逼格&amp;quot;, 用最简单的方式给用户一种&amp;quot;你们的APP很大很强&amp;quot;的感觉😏😏😏.&lt;/p&gt;&#xA;&lt;h2 id=&#34;最终效果&#34;&gt;最终效果&lt;/h2&gt;&#xA;&lt;p&gt;老规矩, 有图有真相. 先来看看我们最终会实现的效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/09-2.gif&#34; alt=&#34;Flutter 国际化: 多语言处理(Easy localization)&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;需求&#34;&gt;需求&lt;/h2&gt;&#xA;&lt;p&gt;在做一个事情之前, 我们先来简单的规划一下, 我们的目标是什么, 我们要怎么做:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;提供多种语言处理, 对每部分文本进行单独的翻译.&lt;/li&gt;&#xA;&lt;li&gt;用户可以随时切换语言&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;第一步-创建flutter-app&#34;&gt;第一步: 创建Flutter APP&lt;/h3&gt;&#xA;&lt;p&gt;这一步不再赘述, 相当基础的东西啦!&lt;/p&gt;&#xA;&lt;h3 id=&#34;第二步-清理项目&#34;&gt;第二步: 清理项目&lt;/h3&gt;&#xA;&lt;h4 id=&#34;删除测试目录&#34;&gt;删除测试目录&lt;/h4&gt;&#xA;&lt;p&gt;删除&lt;code&gt;./lib/test&lt;/code&gt;目录, 因为我们暂时用不上.&lt;/p&gt;&#xA;&lt;h4 id=&#34;清理maindart&#34;&gt;清理main.dart&lt;/h4&gt;&#xA;&lt;p&gt;因为新的Flutter项目中的main会给我们很多用不上的代码, 所以进行替换&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Flutter 国际化: 多语言处理&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyHomePage(title: &amp;#39;Hi, 国际化!&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(widget.title),&#xA;      ),&#xA;      body: Center(&#xA;        child: Column(&#xA;          mainAxisAlignment: MainAxisAlignment.center,&#xA;          children: [&#xA;            Text(&#xA;              &amp;#39;你好!&amp;#39;,&#xA;            ),&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🟢 运行项目, 应该如图所示:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 游戏开发(flame) 05 收尾和打包(5/5)</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91flame-05-%E6%94%B6%E5%B0%BE%E5%92%8C%E6%89%93%E5%8C%85/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91flame-05-%E6%94%B6%E5%B0%BE%E5%92%8C%E6%89%93%E5%8C%85/</guid>
      <description>&lt;p&gt;完成一个项目是世界上最爽的感觉之一. 你呕心沥血的做某件事, 最终想法变成了现实.&lt;/p&gt;&#xA;&lt;p&gt;最后, 欢迎来到本系列的终章. 当然, 只有你一步一步跟随阿航的教程, 终章才有意义.&lt;/p&gt;&#xA;&lt;p&gt;如果你还没有看过之前的章节, 还请你循序渐进, &amp;ldquo;一章一个脚印&amp;rdquo;!&lt;/p&gt;&#xA;&lt;p&gt;下面是我们本系列教程的文章目录:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/279&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) Flame介绍&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/292&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 01 开发2D休闲游戏：消灭小飞蝇(1/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/560&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 02 图形和动画(2/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/562&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 03 界面和弹窗(3/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/564&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 04 分数, 存档和音效(4/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flutter 游戏开发(flame) 05 收尾和打包(5/5) 本章&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;本系列教程之前的&lt;strong&gt;全部要求&lt;/strong&gt;👈&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;更多的资源包&lt;/strong&gt; – 本教程提供了资源包, 但你也可以使用自己的. 推荐资源网站&lt;a href=&#34;https://opengameart.org/&#34; target=&#34;_blank&#34;&gt;Open Game Art&lt;/a&gt;&#xA;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;我们将使用与前一部分相同的&lt;strong&gt;编码规范&lt;/strong&gt;👩‍🏫&lt;/p&gt;&#xA;&lt;h2 id=&#34;最终的资源包&#34;&gt;最终的资源包&lt;/h2&gt;&#xA;&lt;p&gt;这个最后的资源仅有一个图像, 但是它有5种不同的尺寸. 当游戏安装在设备上时, 图像将作为玩家APP目录的启动图标.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://jap.alekhin.io/wp-content/uploads/2019/04/resource-pack-part-5.zip&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;images/01-1.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://jap.alekhin.io/wp-content/uploads/2019/04/resource-pack-part-5.zip&#34; target=&#34;_blank&#34;&gt;点击图片或者此链接下载资源包!&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;🔴 &lt;strong&gt;注意&lt;/strong&gt;: 如果你遵循本教程, 则可以使用上述资源包. 本资源包是&lt;a href=&#34;https://github.com/japalekhin/langaw&#34; target=&#34;_blank&#34;&gt;Github上Langaw(原作者)&lt;/a&gt;&#xA;项目的一部分, 该项目获得&lt;code&gt;CC-BY-NC-ND&lt;/code&gt;许可证的许可.&lt;/p&gt;&#xA;&lt;p&gt;这意味着您可以共享、复制或者重新分发资源.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你必须在感谢中提到, 提供许可证的链接, 并标明你是否进行了更改.&lt;/li&gt;&#xA;&lt;li&gt;你不得将资源用于商业目的.&lt;/li&gt;&#xA;&lt;li&gt;如果混合, 转换或者构建资源, 则不能分发修改后的资源.&lt;/li&gt;&#xA;&lt;li&gt;你不得应用法律条款或技术措施, 在法律上限制他人做许可证允许的任何事情.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/2.0/legalcode&#34; target=&#34;_blank&#34;&gt;点击此处了解有关 CC-BY-NC-ND 许可证的更多信息&lt;/a&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 游戏开发(flame) 01 开发2D休闲游戏：消灭小飞蝇(1/5)</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91flame-01-%E5%BC%80%E5%8F%912d%E4%BC%91%E9%97%B2%E6%B8%B8%E6%88%8F%E6%B6%88%E7%81%AD%E5%B0%8F%E9%A3%9E%E8%9D%871-5/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91flame-01-%E5%BC%80%E5%8F%912d%E4%BC%91%E9%97%B2%E6%B8%B8%E6%88%8F%E6%B6%88%E7%81%AD%E5%B0%8F%E9%A3%9E%E8%9D%871-5/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;曾想过开发一款自己的电子游戏吗? 来对地方了. 本系列教程就是教你如何开发一个属于自己的2D休闲游戏.&lt;/p&gt;&#xA;&lt;p&gt;本教程是&lt;a href=&#34;https://blog.bugcatt.com/archives/279&#34; target=&#34;_blank&#34;&gt;第一章&lt;/a&gt;&#xA;的延续, 是针对任何水平的指南. 在这一章我们将会做一个&amp;quot;打鸟&amp;quot;类型的游戏.&lt;/p&gt;&#xA;&lt;p&gt;这个游戏起名为&amp;quot;&lt;strong&gt;Langaw&lt;/strong&gt;&amp;quot;, 翻译过来就是&amp;quot;小飞蝇&amp;quot;. 玩家的任务就是在小飞蝇到达垃圾堆前尽可能的多消灭小飞蝇(阿航在这里不得不吐槽下原作者, 我们为啥要保护垃圾啊真是的😒).&lt;/p&gt;&#xA;&lt;p&gt;玩家只需要在屏幕上简单的点击就可实现击杀的效果(别用榔头砸手机🤣).这一章中, 我们暂时不会渲染图片, 所以暂时将小飞蝇展示为绿色方块, 当击中小飞蝇后, 变为红色方块并坠落至屏幕底部.&lt;/p&gt;&#xA;&lt;p&gt;你可以在文章底部查看效果视频.&lt;/p&gt;&#xA;&lt;p&gt;下面是我们本系列教程的文章目录:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/560&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) Flame介绍&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flutter 游戏开发(flame) 01 开发2D休闲游戏：消灭小飞蝇(1/5) 本章&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/560&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 02 图形和动画(2/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/562&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 03 界面和弹窗(3/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/564&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 04 分数, 存档和音效(4/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/731&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 05 收尾和打包(5/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;p&gt;如果你完整的学习了&lt;a href=&#34;https://blog.bugcatt.com/archives/279&#34; target=&#34;_blank&#34;&gt;第一章&lt;/a&gt;&#xA;, 那么你应该已经准备好进行开发了🤩.&lt;/p&gt;&#xA;&lt;p&gt;以防万一, 在这里重复一下:&lt;/p&gt;&#xA;&lt;p&gt;本文将假设您已是一名有一定经验的开发人员, 且拥有了”程序员思维”. 如果你是小白, 没关系! 本篇教程非常入门. 只要兴趣足够, 你也将成为一名”游戏开发者”✌✌.&lt;/p&gt;&#xA;&lt;p&gt;你也需要一个配置足够的电脑, 可以运行IDE、编译并运行Android模拟器. 如果你的电脑配置不够高, 你也可以直接连接Android手机, 在真机上运行和调试.&lt;/p&gt;&#xA;&lt;p&gt;Flutter可以同时构建Android和IOS APP. 本文将围绕Android进行开发. 开发完成后, 你可以运行不同的build, 使你也可以在IOS上玩游戏.&lt;/p&gt;&#xA;&lt;p&gt;要顺利阅读本文, 假定您已经具备以下条件👇:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 游戏开发(flame) 02 图形和动画(2/5)</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91flame-02-%E5%9B%BE%E5%BD%A2%E5%92%8C%E5%8A%A8%E7%94%BB2-5/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91flame-02-%E5%9B%BE%E5%BD%A2%E5%92%8C%E5%8A%A8%E7%94%BB2-5/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;在本系列教程的这一章, 我们将会把重心放在图形和动画上. 我们在上一章&lt;a href=&#34;https://www.bugcatt.com/archives/292&#34; target=&#34;_blank&#34;&gt;《开发2D休闲游戏：消灭小飞蝇》&lt;/a&gt;&#xA;中创建了一款拥有交互的休闲手游.&lt;/p&gt;&#xA;&lt;p&gt;游戏的核心不变, 但是我们需要为其增加更多的位移和更好的图像.&lt;/p&gt;&#xA;&lt;p&gt;下面是我们本系列教程的文章目录:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.bugcatt.com/archives/279&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) F&lt;/a&gt;&#xA;&lt;a href=&#34;https://www.bugcatt.com/archives/279&#34; target=&#34;_blank&#34;&gt;l&lt;/a&gt;&#xA;&lt;a href=&#34;https://blog.bugcatt.com/archives/279&#34; target=&#34;_blank&#34;&gt;ame介绍&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/292&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 01 开发2D休闲游戏：消灭小飞蝇(1/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flutter 游戏开发(flame) 02 图形和动画(2/5) 本章&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/562&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 03 界面和弹窗(3/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/564&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 04 分数, 存档和音效(4/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/731&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 05 收尾和打包(5/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;本系列教程&lt;a href=&#34;https://blog.bugcatt.com/archives/292&#34; target=&#34;_blank&#34;&gt;第一部分&lt;/a&gt;&#xA;的&lt;strong&gt;全部要求&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;图像资源文件&lt;/strong&gt;- 图像资源可在网上的游戏资源网站找到(比如&lt;a href=&#34;https://opengameart.org/&#34; target=&#34;_blank&#34;&gt;Open Game Art&lt;/a&gt;&#xA;), 但是要确保感谢原作者.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;代码的规则和此前的章节一致.&lt;/p&gt;&#xA;&lt;h2 id=&#34;图像资源&#34;&gt;图像资源&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/011.jpg&#34; alt=&#34;Flutter 游戏开发(flame) 02 图形和动画(2/5)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;正如你在上一章中看到的上图, 我们实际上已经为小飞蝇准备好了图像资源. 这是一张&lt;a href=&#34;https://opengameart.org/content/green-fly-flying-enemy-game-character&#34; target=&#34;_blank&#34;&gt;来自于Open Game Art的小飞蝇图片&lt;/a&gt;&#xA;. 它被授权为&lt;code&gt;CC0&lt;/code&gt;意思是可用于公共域, 也就是随便用.&lt;/p&gt;&#xA;&lt;p&gt;但是我们不会用上面的那个, 而是用这些:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/01.png&#34; alt=&#34;Flutter 游戏开发(flame) 02 图形和动画(2/5)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://jap.alekhin.io/wp-content/uploads/2019/03/resource-pack-part-2.zip&#34; target=&#34;_blank&#34;&gt;点击下载&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;🔴 &lt;strong&gt;注意&lt;/strong&gt;: 如果你遵循本教程, 则可以使用上述资源包. 本资源包是&lt;a href=&#34;https://github.com/japalekhin/langaw&#34; target=&#34;_blank&#34;&gt;Github上Langaw(原作者)&lt;/a&gt;&#xA;项目的一部分, 该项目获得&lt;code&gt;CC-BY-NC-ND&lt;/code&gt;许可证的许可.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 游戏开发(flame) 03 界面和弹窗(3/5)</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91flame-03-%E7%95%8C%E9%9D%A2%E5%92%8C%E5%BC%B9%E7%AA%973-5/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91flame-03-%E7%95%8C%E9%9D%A2%E5%92%8C%E5%BC%B9%E7%AA%973-5/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;我们在这一章将为游戏编写不同的屏幕(界面)和对话框.&lt;/p&gt;&#xA;&lt;p&gt;下面是我们本系列教程的文章目录:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/279&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) Flame介绍&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/292&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 01 开发2D休闲游戏：消灭小飞蝇(1/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bugcatt.com/archives/560&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 02 图形和动画(2/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flutter 游戏开发(flame) 03 界面和弹窗(3/5) 本章&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bugcatt.com/archives/564&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 04 分数, 存档和音效(4/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bugcatt.com/archives/731&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 05 收尾和打包(5/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;本系列教程之前的&lt;strong&gt;全部要求&lt;/strong&gt;👈&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;更多的资源包&lt;/strong&gt; - 本教程提供了资源包, 但你也可以使用自己的. 推荐资源网站&lt;a href=&#34;https://opengameart.org/&#34; target=&#34;_blank&#34;&gt;Open Game Art&lt;/a&gt;&#xA;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;我们将使用与前一部分相同的&lt;strong&gt;编码规范&lt;/strong&gt;👩‍🏫&lt;/p&gt;&#xA;&lt;p&gt;如果你还没有阅读以前的部分, 你最好回顾下! 从&lt;a href=&#34;https://blog.bugcatt.com/archives/279&#34; target=&#34;_blank&#34;&gt;第一章&lt;/a&gt;&#xA;开始.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;👉在&lt;a href=&#34;https://github.com/HarrisonQi/flame-tutorial-langaw/tree/277749ae54484b45e0ac5be6020eef463f8e4536&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&#xA;或&lt;a href=&#34;https://github.com/HarrisonQi/flame-tutorial-langaw/tree/277749ae54484b45e0ac5be6020eef463f8e4536&#34; target=&#34;_blank&#34;&gt;码云&lt;/a&gt;&#xA;上查看本章的代码.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;新资源包&#34;&gt;新资源包&lt;/h2&gt;&#xA;&lt;p&gt;我们将使用此资源包, 其中包含游戏所需的第二组图片资源.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/01.jpg&#34; alt=&#34;Flutter 游戏开发(flame) 03 界面和弹窗(3/5)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://jap.alekhin.io/wp-content/uploads/2019/03/resource-pack-part-3.zip&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;点击下载资源包&lt;/strong&gt;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;🔴 &lt;strong&gt;注意&lt;/strong&gt;: 如果你遵循本教程, 则可以使用上述资源包. 本资源包是&lt;a href=&#34;https://github.com/japalekhin/langaw&#34; target=&#34;_blank&#34;&gt;Github上Langaw(原作者)&lt;/a&gt;&#xA;项目的一部分, 该项目获得&lt;code&gt;CC-BY-NC-ND&lt;/code&gt;许可证的许可.&lt;/p&gt;&#xA;&lt;p&gt;这意味着您可以共享、复制或者重新分发资源.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你必须在感谢中提到, 提供许可证的链接, 并标明你是否进行了更改.&lt;/li&gt;&#xA;&lt;li&gt;你不得将资源用于商业目的.&lt;/li&gt;&#xA;&lt;li&gt;如果混合, 转换或者构建资源, 则不能分发修改后的资源.&lt;/li&gt;&#xA;&lt;li&gt;你不得应用法律条款或技术措施, 在法律上限制他人做许可证允许的任何事情.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/2.0/legalcode&#34; target=&#34;_blank&#34;&gt;点击此处了解有关 CC-BY-NC-ND 许可证的更多信息&lt;/a&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 游戏开发(flame) 04 分数, 存档和音效(4/5)</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91flame-04/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91flame-04/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;分数&lt;/strong&gt;和&lt;strong&gt;高分记录&lt;/strong&gt;是任何游戏中不可或缺的一部分. 有些游戏根据收集的金币数量计算得分, 有些基于杀敌数, 有些则基于存活时间.&lt;/p&gt;&#xA;&lt;p&gt;同样不能忽视&lt;strong&gt;音效&lt;/strong&gt;和&lt;strong&gt;BGM&lt;/strong&gt;(背景音乐). 加上它们, 游戏将会蜕变🦋.&lt;/p&gt;&#xA;&lt;p&gt;如果一个游戏无声, 它就是不完整的.&lt;/p&gt;&#xA;&lt;p&gt;欢迎来到Flutter+Flame系列的第四章. 如果你还没有读过之前的章节, 建议你先阅读一下哦!🤭&lt;/p&gt;&#xA;&lt;p&gt;🔴 注意: 本教程的背景音乐有些过时. 你可以先学本章教程, 之后再替换为&lt;a href=&#34;https://jap.alekhin.io/background-music-in-a-flame-game&#34; target=&#34;_blank&#34;&gt;这篇教程&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;下面是我们本系列教程的文章目录:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/279&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) Flame介绍&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/292&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 01 开发2D休闲游戏：消灭小飞蝇(1/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/560&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 02 图形和动画(2/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/562&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 03 界面和弹窗(3/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flutter 游戏开发(flame) 04 分数, 存档和音效(4/5) 本章&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bugcatt.com/archives/731&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 05 收尾和打包(5/5)&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;本系列教程之前的&lt;strong&gt;全部要求&lt;/strong&gt;👈&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;更多的资源包&lt;/strong&gt; – 本教程提供了资源包, 但你也可以使用自己的. 推荐资源网站&lt;a href=&#34;https://opengameart.org/&#34; target=&#34;_blank&#34;&gt;Open Game Art&lt;/a&gt;&#xA;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;音效和音乐资源&lt;/strong&gt; - 这些也可以在游戏资源网站上找到, 比如&lt;a href=&#34;https://opengameart.org/&#34; target=&#34;_blank&#34;&gt;Open Game Art&lt;/a&gt;&#xA;. 还有专门的音频资源比如&lt;a href=&#34;https://www.bensound.com/&#34; target=&#34;_blank&#34;&gt;BenSound.com&lt;/a&gt;&#xA;. 同样, 你必须查看许可并在游戏中表示感谢.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;我们将使用与前一部分相同的&lt;strong&gt;编码规范&lt;/strong&gt;👩‍🏫&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;👉在&lt;a href=&#34;https://github.com/HarrisonQi/flame-tutorial-langaw/tree/e72da435c3100a1601e16e75efc62fbaea6b3fe6&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&#xA;或&lt;a href=&#34;https://github.com/HarrisonQi/flame-tutorial-langaw/tree/e72da435c3100a1601e16e75efc62fbaea6b3fe6&#34; target=&#34;_blank&#34;&gt;码云&lt;/a&gt;&#xA;上查看本章全部代码&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;新的资源包&#34;&gt;新的资源包&lt;/h2&gt;&#xA;&lt;p&gt;这一部分中, 我们需要另一个资源包, 包含额外的图形、背景音乐和一些音效.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 游戏开发(flame) 00 Flame介绍</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91flame-01-%E5%88%9D%E8%AF%86flame/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91flame-01-%E5%88%9D%E8%AF%86flame/</guid>
      <description>&lt;p&gt;如果你对Flutter有一定的了解, 那么应该知道它可以同时转为Android、IOS APP. 并且会在后续的版本支持Web、Mac以及Windows设备.&lt;/p&gt;&#xA;&lt;p&gt;那么, 用Flutter开发游戏似乎是一件很棒的事情😝😝.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;我在《&lt;a href=&#34;https://www.bugcatt.com/archives/4&#34; target=&#34;_blank&#34;&gt;Flutter可以开发游戏啦! Flame游戏开发框架测评&lt;/a&gt;&#xA;》中简单的对Flutter的Flame框架进行了测评.&lt;/p&gt;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;有些朋友希望进一步在Flutter上发展, 并且创建属于自己的游戏. 若你是这一类人, 那么本博客应该是你不错的选择. 本教程将会把重心放在概念上, 而不是立刻制作一个精美、可上线的游戏.&lt;/p&gt;&#xA;&lt;p&gt;如果对博客有任何问题, 欢迎在下方留言, 阿航会尽力、尽快回复🙂.&lt;/p&gt;&#xA;&lt;h2 id=&#34;开发环境&#34;&gt;开发环境&lt;/h2&gt;&#xA;&lt;p&gt;本博客的环境一览:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本号&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flutter&lt;/td&gt;&#xA;          &lt;td&gt;1.14.6 beta&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Dart&lt;/td&gt;&#xA;          &lt;td&gt;2.8.0-dev.5.0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Android Studio&lt;/td&gt;&#xA;          &lt;td&gt;3.5.2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;🔴注意: 检查你的环境和文中的差异, 以避免出现不兼容的情况&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;p&gt;本文将假设您已是一名有一定经验的开发人员, 且拥有了&amp;quot;程序员思维&amp;quot;. 如果你是小白, 没关系! 本篇教程非常入门. 只要兴趣足够, 你也将成为一名&amp;quot;游戏开发者&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;你也需要一个配置足够的电脑, 可以运行IDE、编译并运行Android模拟器. 如果你的电脑配置不够高, 你也可以直接连接Android手机, 在真机上运行和调试.&lt;/p&gt;&#xA;&lt;p&gt;Flutter可以同时构建Android和IOS APP. 本文将围绕Android进行开发. 开发完成后, 你可以运行不同的build, 使你也可以在IOS上玩游戏.&lt;/p&gt;&#xA;&lt;p&gt;要顺利阅读本文, 假定您已经具备以下条件:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;IDE (Android Studio 或者 Microsoft Visual Studio), 以及其所需的Flutter和dart插件&lt;/li&gt;&#xA;&lt;li&gt;Android SDK. 这是开发Android应用的必备条件.&lt;/li&gt;&#xA;&lt;li&gt;Flutter SDK. 本篇将使用Flutter以及Flame进行游戏开发. 请阅读&lt;a href=&#34;https://flutterchina.club/get-started/install/&#34; target=&#34;_blank&#34;&gt;Flutter官方文档&lt;/a&gt;&#xA;, 完成圈内的教程&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E5%AE%98%E7%BD%91%E6%88%AA%E5%9B%BE-1024x399.png&#34; alt=&#34;Flutter 游戏开发(flame) 00 Flame介绍&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter可以开发游戏啦! Flame游戏开发框架测评</title>
      <link>http://localhost:1313/posts/post/2020/flutter%E5%8F%AF%E4%BB%A5%E5%BC%80%E5%8F%91%E6%B8%B8%E6%88%8F%E5%95%A6-flame%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E6%B5%8B%E8%AF%84/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter%E5%8F%AF%E4%BB%A5%E5%BC%80%E5%8F%91%E6%B8%B8%E6%88%8F%E5%95%A6-flame%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E6%B5%8B%E8%AF%84/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;images/photo-of-white-wall-1484759.png&#34; alt=&#34;Flutter可以开发游戏啦! Flame游戏开发框架测评&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Flutter作为近年来的新兴混合开发语言, 一直备受关注. 既然Flutter这么好用, 并且宣传渲染帧率可高达60fps.&lt;/p&gt;&#xA;&lt;p&gt;那我们是不是可以用它开发游戏呢?&lt;/p&gt;&#xA;&lt;p&gt;答案是肯定的, 某个Flutter大神制作了一款框架, 名为Flame.&lt;/p&gt;&#xA;&lt;p&gt;如果你没有代码基础, 想开发一款自己的游戏, 那么Flutter + Flame也许是比较好的选择.&lt;/p&gt;&#xA;&lt;p&gt;先来看一下使用Flutter + Flame做的几款游戏吧:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RafaelBarbosatec/darkness_dungeon&#34; target=&#34;_blank&#34;&gt;DarknessDungeon&lt;/a&gt;&#xA; 地牢游戏&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/DarknessDungeon-3.gif&#34; alt=&#34;Flutter可以开发游戏啦! Flame游戏开发框架测评&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;4 in A Row 四子棋益智游戏&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/4-in-A-Row-2.gif&#34; alt=&#34;Flutter可以开发游戏啦! Flame游戏开发框架测评&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;嗯…看起来还不错&lt;/p&gt;&#xA;&lt;p&gt;阿航在之前的空闲时间也使用了该框架进行了游戏开发, 体验还不错.&lt;/p&gt;&#xA;&lt;p&gt;这个是游戏大体的框架结构:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E6%A1%86%E6%9E%B6%E5%9B%BE%E7%A4%BA-1024x399.png&#34; alt=&#34;Flutter可以开发游戏啦! Flame游戏开发框架测评&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用Flame开发游戏, 只需要先创建&lt;strong&gt;Game loop&lt;/strong&gt;(游戏循环/游戏场景), 维护好&lt;strong&gt;update&lt;/strong&gt;函数(计算各种数值)以及&lt;strong&gt;render&lt;/strong&gt;函数(渲染屏幕).&lt;/p&gt;&#xA;&lt;p&gt;在这里贴出一个Flutter开发与其他游戏开发引擎的对比:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;          &lt;th&gt;Flutter + Flame&lt;/th&gt;&#xA;          &lt;th&gt;Unity、虚幻等主流开发引擎&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;适合独立开发&lt;/td&gt;&#xA;          &lt;td&gt;很适合&lt;/td&gt;&#xA;          &lt;td&gt;适合&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;需要掌握的技术&lt;/td&gt;&#xA;          &lt;td&gt;仅Flutter&lt;/td&gt;&#xA;          &lt;td&gt;开发语言+软件使用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;学习难度&lt;/td&gt;&#xA;          &lt;td&gt;容易&lt;/td&gt;&#xA;          &lt;td&gt;中等甚至困难&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;开发难度&lt;/td&gt;&#xA;          &lt;td&gt;容易&lt;/td&gt;&#xA;          &lt;td&gt;中等甚至困难&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;国内文档支持&lt;/td&gt;&#xA;          &lt;td&gt;较少, 阿航的技术小站将会提供中文文档&lt;/td&gt;&#xA;          &lt;td&gt;丰富&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3d支持&lt;/td&gt;&#xA;          &lt;td&gt;暂无&lt;/td&gt;&#xA;          &lt;td&gt;3d支持很好&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;开发大型游戏&lt;/td&gt;&#xA;          &lt;td&gt;适合&lt;/td&gt;&#xA;          &lt;td&gt;非常适合&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;开发小型游戏&lt;/td&gt;&#xA;          &lt;td&gt;非常适合&lt;/td&gt;&#xA;          &lt;td&gt;适合&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;我已经在博客里写了这个框架的教程以及实例教学！&lt;br&gt;&#xA;立即访问《&lt;a href=&#34;https://blog.bugcatt.com/archives/279&#34; target=&#34;_blank&#34;&gt;Flutter 游戏开发(flame) 01 初识Flame&lt;/a&gt;&#xA;》开始学习!&lt;/p&gt;</description>
    </item>
    <item>
      <title>终于出书了, 竟然还免费! 闲鱼Flutter技术解析与实战大公开(附下载链接)</title>
      <link>http://localhost:1313/posts/post/2020/%E9%97%B2%E9%B1%BCflutter%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E6%88%98%E5%A4%A7%E5%85%AC%E5%BC%80/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E9%97%B2%E9%B1%BCflutter%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E6%88%98%E5%A4%A7%E5%85%AC%E5%BC%80/</guid>
      <description>&lt;p&gt;若图片资源无法加载, 请访问我的&lt;a href=&#34;https://blog.bugcatt.com/?p=243&#34; target=&#34;_blank&#34;&gt;官方博客&lt;/a&gt;&#xA;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E9%97%B2%E9%B1%BCbanner-657x285.jpg&#34; alt=&#34;终于出书了, 竟然还免费! 闲鱼Flutter技术解析与实战大公开(附下载链接)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;众所周知, 阿里是国内Flutter的技术先驱团队. 阿里比较有名的开源项目有:&lt;/p&gt;&#xA;&lt;h2 id=&#34;flutter-go&#34;&gt;Flutter Go&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/flutter-go-logo%E6%B0%B4%E5%8D%B0-657x297.png&#34; alt=&#34;终于出书了, 竟然还免费! 闲鱼Flutter技术解析与实战大公开(附下载链接)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;flutter 开发者帮助 APP，包含 flutter 常用 140+ 组件的demo 演示与中文文档. &lt;a href=&#34;https://flutter-go.pub/website/&#34; target=&#34;_blank&#34;&gt;官网&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h2 id=&#34;fish-redux&#34;&gt;Fish Redux&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/fish-redux-logo%E6%B0%B4%E5%8D%B0-657x298.png&#34; alt=&#34;终于出书了, 竟然还免费! 闲鱼Flutter技术解析与实战大公开(附下载链接)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Fish Redux 是一个基于 Redux 数据管理的组装式 flutter 应用框架， 它特别适用于构建中大型的复杂应用。&lt;/p&gt;&#xA;&lt;p&gt;这回, 阿里闲鱼技术又出书了! 而且, 完全免费😍! 那就是:&lt;/p&gt;&#xA;&lt;h2 id=&#34;flutter-技术解析与实战&#34;&gt;《Flutter 技术解析与实战》&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E6%88%98%E7%94%B5%E5%AD%90%E4%B9%A6%E5%B0%81%E9%9D%A2%E6%B0%B4%E5%8D%B0-557x391.png&#34; alt=&#34;终于出书了, 竟然还免费! 闲鱼Flutter技术解析与实战大公开(附下载链接)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;不得不说, 阿里的开源精神仍然是国内一流的.🤭🤭🤭&lt;/p&gt;&#xA;&lt;p&gt;为了节省各位的时间, 阿航在这里直接把书的目录放出来:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E6%88%98%E7%94%B5%E5%AD%90%E4%B9%A6%E7%9B%AE%E5%BD%95-650x914.png&#34; alt=&#34;终于出书了, 竟然还免费! 闲鱼Flutter技术解析与实战大公开(附下载链接)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;看得出来, 书的内容丰富, 十分用心. 具体内容还需各位自行查阅.&lt;/p&gt;&#xA;&lt;h3 id=&#34;下载链接&#34;&gt;下载链接&lt;/h3&gt;&#xA;&lt;p&gt;微信关注&amp;quot;&lt;strong&gt;阿航的技术小站&lt;/strong&gt;&amp;quot;, 发送&amp;quot;&lt;strong&gt;flutter技术解析与实战&lt;/strong&gt;&amp;quot;, 即刻获取网盘下载链接!&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/%E5%85%AC%E4%BC%97%E5%8F%B7-%E6%A8%AA%E5%90%91%E4%BA%8C%E7%BB%B4%E7%A0%81.png&#34; alt=&#34;终于出书了, 竟然还免费! 闲鱼Flutter技术解析与实战大公开(附下载链接)&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;阿航的技术小站公众号&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 踩坑 A package may not list itself as a dependency</title>
      <link>http://localhost:1313/posts/post/2020/flutter-a-package-may-not-list-itself-as-a-dependency/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-a-package-may-not-list-itself-as-a-dependency/</guid>
      <description>&lt;p&gt;在使用 Flutter 开发APP时, 运行&lt;code&gt;flutter package get&lt;/code&gt;命令, 控制台报了 A package may not list itself as a dependency 的错误.&lt;/p&gt;&#xA;&lt;h2 id=&#34;问题展示&#34;&gt;问题展示&lt;/h2&gt;&#xA;&lt;p&gt;运行&lt;code&gt;flutter package get&lt;/code&gt;, 控制台报错如下:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;&#xA;&lt;p&gt;检查你的Flutter项目, 是否与即将导入的第三方库重名.&lt;/p&gt;&#xA;&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方案一-修改项目名-推荐&#34;&gt;方案一: 修改项目名 (推荐)&lt;/h3&gt;&#xA;&lt;p&gt;修改你的项目名称. 这种方法虽然会很麻烦, 但是毕竟人家的项目先上传的😅😅.&lt;/p&gt;&#xA;&lt;h3 id=&#34;方案二-寻找功能相似的第三方库不推荐&#34;&gt;方案二: 寻找功能相似的第三方库(不推荐)&lt;/h3&gt;&#xA;&lt;p&gt;寻找功能相似的第三方库(不推荐)&lt;/p&gt;&#xA;&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;&#xA;&lt;p&gt;对文章若有任何问题、异议以及改进建议, 欢迎在下方进行评论. 作者将尽快回复! 获取最新文章, 欢迎阅读&lt;a href=&#34;https://blog.bugcatt.com/?p=208&#34; target=&#34;_blank&#34;&gt;官方博客&lt;/a&gt;&#xA;.&lt;/p&gt;&#xA;&lt;p&gt;更多更好的教程/博客/资讯, 欢迎访问我的官网: &lt;a href=&#34;https://blog.bugcatt.com&#34; target=&#34;_blank&#34;&gt;阿航的技术小站&lt;/a&gt;&#xA;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 数据存储 SharedPreferences</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-sharedpreferences/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-sharedpreferences/</guid>
      <description>&lt;p&gt;我们在做APP开发时, 经常会涉及到用户的 数据存储(比如保存用户登录token、用户的某些偏好设置等). 开发过Android的朋友应该知道有 SharedPreferences. 在 Flutter 中, 同样为我们提供了十分相似的(甚至名字都一样)组件, 为我们提供数据存储的能力.&lt;/p&gt;&#xA;&lt;p&gt;本篇教程将用一个简单的小Demo, 让你完全掌握 数据存储之SharedPreferences 的用法.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;若图片展示异常, 请访问我的&lt;a href=&#34;https://blog.bugcatt.com/archives/165&#34; target=&#34;_blank&#34;&gt;官方博客&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 我们先来看一下我们最终的效果:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/SharedPreferences%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C.gif&#34; alt=&#34;Flutter 数据存储 SharedPreferences&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;SharedPreferences最终效果&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;仓库地址&#34;&gt;仓库地址&lt;/h2&gt;&#xA;&lt;p&gt;所有源码(含注释)均已上传至开源仓库:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/HarrisonQi/flutter-actual-combat-demo/tree/master/my_shared_preferences_demo&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gitee.com/HarrisonQI/flutter-actual-combat-demo/tree/master/my_shared_preferences_demo&#34; target=&#34;_blank&#34;&gt;码云&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;&#xA;&lt;h3 id=&#34;开发环境&#34;&gt;开发环境&lt;/h3&gt;&#xA;&lt;p&gt;本博客的环境一览:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本号&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flutter&lt;/td&gt;&#xA;          &lt;td&gt;1.14.6 beta&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Dart&lt;/td&gt;&#xA;          &lt;td&gt;2.8.0-dev.5.0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Android Studio&lt;/td&gt;&#xA;          &lt;td&gt;3.5.2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;注意您的环境和文中的差异, 避免出现不兼容的情况哦!&lt;/p&gt;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&lt;h3 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h3&gt;&#xA;&lt;p&gt;要顺利阅读本文, 假定您已经具备以下条件:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;一台电脑(能同时运行IDE、APP模拟器).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Android Studio&lt;/code&gt; 或 &lt;code&gt;VSCode&lt;/code&gt;(或任何你喜欢的代码编辑器).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Flutter&lt;/code&gt;开发环境.&lt;/li&gt;&#xA;&lt;li&gt;您掌握了&lt;code&gt;Flutter&lt;/code&gt;的开发基础(至少了解目录结构、&lt;code&gt;Dart&lt;/code&gt;语言基本知识).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建flutter项目&#34;&gt;创建Flutter项目&lt;/h3&gt;&#xA;&lt;p&gt;创建一个新的Flutter项目, 命名为&lt;code&gt;my_shared_preferences_demo&lt;/code&gt;(您可以随意起名, 但是在下面也要替换名字为您自己的).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 底部导航栏 / BottomNavigationBar</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E5%AE%9E%E6%88%98-%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F-bottomnavigationbar/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E5%AE%9E%E6%88%98-%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F-bottomnavigationbar/</guid>
      <description>&lt;p&gt;几乎99%的应用类APP都需要一个底部导航栏. 这篇教程为 &lt;strong&gt;Flutter&lt;/strong&gt; 语言中, 如何写一个主流的 &lt;strong&gt;底部导航栏&lt;/strong&gt; . 并使用 &lt;strong&gt;Flutter&lt;/strong&gt; 官方提供的 &lt;strong&gt;BottomNavigationBar&lt;/strong&gt; 组件. 几乎每一个APP都拥有一个底部导航栏, 所以这篇教程将会十分有用🤭&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 我们本次要实现 底部导航栏 的最终效果如下🙊:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/final-renderings.gif&#34; alt=&#34;Flutter 底部导航栏 / BottomNavigationBar&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;底部导航栏最终效果&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;仓库地址&#34;&gt;仓库地址&lt;/h2&gt;&#xA;&lt;p&gt;全部代码均已上传至开源仓库(含完整注释):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/HarrisonQi/flutter-actual-combat-demo/tree/master/bottom_navigation&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gitee.com/HarrisonQI/flutter-actual-combat-demo/tree/master/bottom_navigation&#34; target=&#34;_blank&#34;&gt;码云&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;用途&#34;&gt;用途&lt;/h2&gt;&#xA;&lt;p&gt;虽然如此普遍, 但我们还是要更直观的看下哪里需要用到底部导航栏, 如下图:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/demo.png&#34; alt=&#34;Flutter 底部导航栏 / BottomNavigationBar&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;用到底部导航栏的主流APP&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;可以得知, 最流行的、最主流的APP都需要导航栏&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 指纹验证/人脸识别</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%8C%87%E7%BA%B9%E9%AA%8C%E8%AF%81-%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%8C%87%E7%BA%B9%E9%AA%8C%E8%AF%81-%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</guid>
      <description>&lt;p&gt;指纹验证/指纹识别 以及 人脸识别 是我们在平常使用各种APP时常用的功能, 这篇教程将使用第三方库 local_auth 来实现 Flutter 中的指纹验证以及人脸识别.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 我们本次要实现的最终效果如下:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/rendering.gif&#34; alt=&#34;Flutter 指纹验证/人脸识别&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;指纹识别图片效果展示&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;仓库地址&#34;&gt;仓库地址&lt;/h2&gt;&#xA;&lt;p&gt;全部代码均已上传至开源仓库(含完整注释):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/HarrisonQi/flutter-actual-combat-demo/tree/master/fingerprint_verification&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gitee.com/HarrisonQI/flutter-actual-combat-demo/tree/master/fingerprint_verification&#34; target=&#34;_blank&#34;&gt;码云&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;用途&#34;&gt;用途&lt;/h2&gt;&#xA;&lt;p&gt;这个在支付相关功能中最常见了, 用于二次验证当前操作者是否为本人. 当然, 有时我们保护的不仅是现金.&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;导入第三方库-local_auth&#34;&gt;导入第三方库: local_auth&lt;/h3&gt;&#xA;&lt;p&gt;在&lt;code&gt;./lib/pubspec.yaml&lt;/code&gt;中导入:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dependencies:&#xA;  local_auth: ^0.6.1+3&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;修改mainactivity&#34;&gt;修改MainActivity&lt;/h3&gt;&#xA;&lt;p&gt;进入&lt;code&gt;./android/app/src/main/***/MainActivity.java&lt;/code&gt;或&lt;code&gt;MainActivity.kt&lt;/code&gt;,导入依赖:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import io.flutter.embedding.android.FlutterFragmentActivity;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MainActivity: FlutterActivity() {&#xA;    override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) {&#xA;        GeneratedPluginRegistrant.registerWith(flutterEngine);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MainActivity: FlutterFragmentActivity() {&#xA;    override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) {&#xA;        GeneratedPluginRegistrant.registerWith(flutterEngine);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;这里主要是修改了&lt;code&gt;FlutterActivity&lt;/code&gt;为&lt;code&gt;FlutterFragmentActivity&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
