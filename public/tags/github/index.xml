<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on 阿航的技术小站</title>
    <link>http://localhost:1313/tags/github/</link>
    <description>Recent content in Github on 阿航的技术小站</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 09 Aug 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一步解决 Failed to connect to raw.githubusercontent.com port 443: Connection refused</title>
      <link>http://localhost:1313/posts/post/2020/%E4%B8%80%E6%AD%A5%E8%A7%A3%E5%86%B3-failed-to-connect-to-raw-githubusercontent-com-port-443-connection-refused/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E4%B8%80%E6%AD%A5%E8%A7%A3%E5%86%B3-failed-to-connect-to-raw-githubusercontent-com-port-443-connection-refused/</guid>
      <description>&lt;p&gt;今天在尝试安装&lt;code&gt;Homebrew&lt;/code&gt;时碰到这个问题，本篇文章就来记录下如何一步解决 Failed to connect to raw.githubusercontent.com port 443: Connection refused。&lt;/p&gt;&#xA;&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方案一修改dns&#34;&gt;方案一：修改DNS&lt;/h3&gt;&#xA;&lt;p&gt;修改你的电脑DNS为Google的&lt;code&gt;8.8.8.8&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;👉 &lt;a href=&#34;https://www.bugcatt.com/archives/2486&#34; target=&#34;_blank&#34;&gt;点击这里&lt;/a&gt;&#xA;查看Mac修改DNS教程&lt;/p&gt;&#xA;&lt;h3 id=&#34;方案二修改代理需科学上网&#34;&gt;方案二：修改代理（需科学上网）&lt;/h3&gt;&#xA;&lt;p&gt;此方法仅限于已经可以科学上网的同学。&lt;/p&gt;&#xA;&lt;p&gt;在终端中输入以下命令行（&lt;code&gt;7890&lt;/code&gt; 和 &lt;code&gt;789&lt;/code&gt; 需要换成你自己的端口）：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:789`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;再次尝试连接，应该可以了！&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;此方法有一个小小的缺陷，那就是运行完上面的命令行会导致终端的命令都处于外网状态。当然，解决方案就是&lt;strong&gt;终止当前Session会话&lt;/strong&gt;或者&lt;strong&gt;直接关闭终端窗口&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;小缺点&lt;/strong&gt;及解决方案&lt;/p&gt;&#xA;  &lt;/blockquote&gt;&#xA;&#xA;&lt;h2 id=&#34;感谢&#34;&gt;感谢&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/115450863&#34; target=&#34;_blank&#34;&gt;Failed to connect to raw.githubusercontent.com:443&lt;/a&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Github 中 Repository 和 Project的区别</title>
      <link>http://localhost:1313/posts/post/2020/github-%E4%B8%AD-repository-%E5%92%8C-project%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/github-%E4%B8%AD-repository-%E5%92%8C-project%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;p&gt;在使用全球最大的同性交友网站进行开源时, 也许你在打算创建一个新项目时碰到这种情况:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Github-%E4%B8%AD-Repository-%E5%92%8C-Project%E7%9A%84%E5%8C%BA%E5%88%AB-01.png&#34; alt=&#34;Github-中-Repository-和-Project的区别-01&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;点击Github右上角的加号&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;点击加号后, 出现了两个选项. 分别是&lt;code&gt;New repository&lt;/code&gt;以及&lt;code&gt;New project&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;转念一想&amp;hellip;咦, 一个是仓库, 又一个是项目. 感觉是一个东西啊!&lt;/p&gt;&#xA;&lt;h2 id=&#34;github-project&#34;&gt;Github Project&lt;/h2&gt;&#xA;&lt;p&gt;我们先来看一下&lt;a href=&#34;https://docs.github.com/cn/github/managing-your-work-on-github/about-project-boards&#34; target=&#34;_blank&#34;&gt;官方文档&lt;/a&gt;&#xA;的解释:&lt;/p&gt;&#xA;&lt;p&gt;GitHub 上的项目板帮助您组织工作和排列工作的优先级。 您可以为特定功能工作、全面的路线图甚至发布检查列表创建项目板。 通过项目板可以灵活地创建适合需求的自定义工作流程。&lt;/p&gt;&#xA;&lt;p&gt;这样一看就懂了, Project翻译过来的&amp;quot;项目&amp;quot;指的并非开发人员的&amp;quot;代码项目&amp;quot;, 而是一整个软件项目管理.&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]如果你经历过大项目, 应该使用过Jira、Tapd、禅道等项目管理系统! [/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;github-repository&#34;&gt;Github Repository&lt;/h2&gt;&#xA;&lt;p&gt;我们仍然来看一下&lt;a href=&#34;https://docs.github.com/cn/github/creating-cloning-and-archiving-repositories/about-repositories&#34; target=&#34;_blank&#34;&gt;官方文档&lt;/a&gt;&#xA;的解释:&lt;/p&gt;&#xA;&lt;p&gt;仓库就像项目的文件夹。 项目的仓库包含项目的所有文件，并存储每个文件的修订记录。 您也可以在仓库中讨论并管理项目的工作。&lt;/p&gt;&#xA;&lt;p&gt;我们程序员上传下载代码时频繁使用的是Repository!&lt;/p&gt;&#xA;&lt;h2 id=&#34;区别&#34;&gt;区别&lt;/h2&gt;&#xA;&lt;p&gt;一个表格非常直观的展现它们之间的区别:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Repository&lt;/th&gt;&#xA;          &lt;th&gt;Project&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;保存代码, 进行版本控制&lt;/td&gt;&#xA;          &lt;td&gt;进行项目管理, 可以添加任务、制定工作流程等.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>Github/Gitlab 等远程Git仓库fork后与原仓库同步</title>
      <link>http://localhost:1313/posts/post/2020/github-gitlab-%E7%AD%89%E8%BF%9C%E7%A8%8Bgit%E4%BB%93%E5%BA%93fork%E5%90%8E%E4%B8%8E%E5%8E%9F%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/github-gitlab-%E7%AD%89%E8%BF%9C%E7%A8%8Bgit%E4%BB%93%E5%BA%93fork%E5%90%8E%E4%B8%8E%E5%8E%9F%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/</guid>
      <description>&lt;p&gt;看到这篇文章, 说明你也是个勤奋的贡献者🤝🤝. 同学们在贡献代码 PR 前, 都需要将原仓库&lt;code&gt;fork&lt;/code&gt;下来. 但有时原仓库的代码比我们fork后的代码新, 并且github目前似乎并未提供自动fork的机制. 本篇文章就来记录下Github/Gitlab 等远程Git仓库fork后与原仓库同步的方法.&lt;/p&gt;&#xA;&lt;h2 id=&#34;适用场景&#34;&gt;适用场景&lt;/h2&gt;&#xA;&lt;p&gt;github等远程仓库的原仓库代码有大量变更, 需要将自己fork下来的仓库和原仓库同步.&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;p&gt;本篇教程假定:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你已经掌握基础的CMD/Bash/Shell终端命令.&lt;/li&gt;&#xA;&lt;li&gt;你已经掌握了基本的Git命令以及Github操作.&lt;/li&gt;&#xA;&lt;li&gt;你已经有了待同步的、fork下来的代码仓库.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;notice&amp;rdquo;]本篇教程将会尽可能减少废话, 只放干货. 所以请你仔细阅读并严谨遵循教程步骤![/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;&#xA;&lt;h3 id=&#34;查看当前远程仓库配置&#34;&gt;查看当前远程仓库配置&lt;/h3&gt;&#xA;&lt;p&gt;打开终端, &lt;code&gt;cd&lt;/code&gt;至仓库目录内.&lt;/p&gt;&#xA;&lt;p&gt;输入以下命令以查看当前的远程仓库:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote -v&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正常情况下, 会返回类似于:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote -v&#xA;origin  https://github.com/你的用户名/你的仓库名.git (fetch)&#xA;origin  https://github.com/你的用户名/你的仓库名.git (push)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[epcl_box type=&amp;ldquo;notice&amp;rdquo;]如果你未返回数据, 请检查你的本地仓库是否关联了远程仓库. 若格式和上面不一致, 请检查你的仓库状态.[/epcl_box]&lt;/p&gt;&#xA;&lt;h3 id=&#34;绑定上游远程仓库&#34;&gt;绑定上游远程仓库&lt;/h3&gt;&#xA;&lt;p&gt;紧接着输入以下命令行, 绑定上游仓库:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote add upstream &amp;#34;https://github.com/上游用户名/上游仓库名.git&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再次查看当前仓库:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote -v&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正常情况下, 会返回类似于:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote -v&#xA;origin  https://github.com/你的用户名/你的仓库名.git (fetch)&#xA;origin  https://github.com/你的用户名/你的仓库名.git (push)&#xA;upstream        https://github.com/上游用户名/上游仓库名.git (fetch)&#xA;upstream        https://github.com/上游用户名/上游仓库名.git (push)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;拉取上游仓库代码&#34;&gt;拉取上游仓库代码&lt;/h3&gt;&#xA;&lt;p&gt;输入以下命令, 拉取上游仓库代码:&lt;/p&gt;</description>
    </item>
    <item>
      <title>代码提交的乐趣 - 为你的Git提交日志添加emoji表情</title>
      <link>http://localhost:1313/posts/post/2020/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E7%9A%84%E4%B9%90%E8%B6%A3-%E4%B8%BA%E4%BD%A0%E7%9A%84git%E6%8F%90%E4%BA%A4%E6%97%A5%E5%BF%97%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E7%9A%84%E4%B9%90%E8%B6%A3-%E4%B8%BA%E4%BD%A0%E7%9A%84git%E6%8F%90%E4%BA%A4%E6%97%A5%E5%BF%97%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85/</guid>
      <description>&lt;p&gt;漫漫的代码生涯, 不知何时才是尽头😩😩. 苦中作乐, 才是良药. 我们不能改变作为程序员的命运, 但是我们可以为其添上几朵小花, 点缀一下. 本篇文章非技术干货, 而是跳出技术之外, 为我们的开发生活添加一点乐趣 &amp;ndash; 为你的Git提交日志添加emoji表情!&lt;/p&gt;&#xA;&lt;h2 id=&#34;举个栗子&#34;&gt;举个栗子&lt;/h2&gt;&#xA;&lt;p&gt;在Github上找寻所需的轮子时, 是否看到过这样的情形:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Git%E6%8F%90%E4%BA%A4%E8%A1%A8%E6%83%85-01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;什么? 你没发现亮点? 那我给你圈出来!&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Git%E6%8F%90%E4%BA%A4%E8%A1%A8%E6%83%85-02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;看到提交日志左边那些&amp;quot;bu ling bu ling&amp;quot;✨✨的小图标了吗?&lt;/p&gt;&#xA;&lt;p&gt;在代码仓库看到这个, 不知你的心情是否多少放松了一些?😏&lt;/p&gt;&#xA;&lt;p&gt;当然, 无规矩不成方圆. 如果不设定一些规范, 可想而知, 日志将会一团糟🤯🤯. (还不如没有呢!)&lt;/p&gt;&#xA;&lt;h2 id=&#34;如何使用&#34;&gt;如何使用&lt;/h2&gt;&#xA;&lt;p&gt;使用的方法很简单, 只需要找到emoji对应的代码, 放在提交日志中即可!&lt;/p&gt;&#xA;&lt;p&gt;比如🎉代表的是&amp;quot;首次提交&amp;quot;, 其代码为&lt;code&gt;:tada:&lt;/code&gt;. 我们假设进行git提交:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git commit -m &amp;#34;:tada: 首次提交哦!&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后去到远程仓库, 你会发现提交信息变得没那么单调啦!&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Git%E6%8F%90%E4%BA%A4%E8%A1%A8%E6%83%85-03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;常用提交图标及含义&#34;&gt;常用提交图标及含义&lt;/h2&gt;&#xA;&lt;p&gt;在这里我们放出部分常用的提交图标吧:&lt;/p&gt;&#xA;&lt;p&gt;[epcl_col width=&amp;ldquo;20&amp;rdquo;]&lt;/p&gt;&#xA;&lt;p&gt;🎉&lt;/p&gt;&#xA;&lt;p&gt;**:tada:&lt;br&gt;&#xA;**首次提交&lt;/p&gt;&#xA;&lt;p&gt;[/epcl_col]&lt;/p&gt;&#xA;&lt;p&gt;[epcl_col width=&amp;ldquo;20&amp;rdquo;]&lt;/p&gt;&#xA;&lt;p&gt;✨&lt;/p&gt;&#xA;&lt;p&gt;**:sparkles:&lt;br&gt;&#xA;**添加新功能&lt;/p&gt;&#xA;&lt;p&gt;[/epcl_col]&lt;/p&gt;&#xA;&lt;p&gt;[epcl_col width=&amp;ldquo;20&amp;rdquo;]&lt;/p&gt;&#xA;&lt;p&gt;🔥&lt;/p&gt;&#xA;&lt;p&gt;**:fire:&lt;br&gt;&#xA;**删除文件/删除代码&lt;/p&gt;&#xA;&lt;p&gt;[/epcl_col]&lt;/p&gt;&#xA;&lt;p&gt;[epcl_col width=&amp;ldquo;20&amp;rdquo;]&lt;/p&gt;&#xA;&lt;p&gt;🐛&lt;/p&gt;&#xA;&lt;p&gt;**:bug:&lt;br&gt;&#xA;**bug修复&lt;/p&gt;&#xA;&lt;p&gt;[/epcl_col]&lt;/p&gt;&#xA;&lt;p&gt;[epcl_col width=&amp;ldquo;20&amp;rdquo;]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git push 推送异常 : &#34;Authentication failed for&#34;</title>
      <link>http://localhost:1313/posts/post/2020/git-push-%E6%8E%A8%E9%80%81%E5%BC%82%E5%B8%B8-authentication-failed-for/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/git-push-%E6%8E%A8%E9%80%81%E5%BC%82%E5%B8%B8-authentication-failed-for/</guid>
      <description>&lt;p&gt;今天依旧是贡献代码的一天. 但是在使用IDEA进行Git 推送时, 右下角提示推送失败(&lt;code&gt;Push failed&lt;/code&gt;). 就很纳闷, 平时好好的, 今天突然就不好使了? 一番折腾, 终于解决.&lt;/p&gt;&#xA;&lt;h2 id=&#34;问题分析&#34;&gt;问题分析&lt;/h2&gt;&#xA;&lt;p&gt;先来看一下完整报错:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Invocation failed Server returned invalid Response. java.lang.RuntimeException: &#xA;Invocation failed Server returned invalid Response. &#xA;  at org.jetbrains.git4idea.http.GitAskPassXmlRpcClient.askUsername(GitAskPassXmlRpcClient.java:50) &#xA;  at org.jetbrains.git4idea.http.GitAskPassApp.main(GitAskPassApp.java:64) Caused by: java.io.IOException: Server returned invalid Response. &#xA;  at org.apache.xmlrpc.LiteXmlRpcTransport.sendRequest(LiteXmlRpcTransport.java:242) &#xA;  at org.apache.xmlrpc.LiteXmlRpcTransport.sendXmlRpc(LiteXmlRpcTransport.java:90) &#xA;  at org.apache.xmlrpc.XmlRpcClientWorker.execute(XmlRpcClientWorker.java:72) &#xA;  at org.apache.xmlrpc.XmlRpcClient.execute(XmlRpcClient.java:194) &#xA;  at org.apache.xmlrpc.XmlRpcClient.execute(XmlRpcClient.java:185) &#xA;  at org.apache.xmlrpc.XmlRpcClient.execute(XmlRpcClient.java:178) &#xA;  at org.jetbrains.git4idea.http.GitAskPassXmlRpcClient.askUsername(GitAskPassXmlRpcClient.java:47) &#xA;... 1 more remote: No anonymous write access. &#xA;Authentication failed for &amp;#39;https://github.com/XXX&amp;#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到关键字:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;No anonymous write access.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;👆这句话的字面意思是&amp;quot;没有匿名写入权限&amp;quot;. 但是他也没提示我登录啊? 不清不楚&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Authentication failed for &amp;#39;https://github.com/XXX&amp;#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;👆这句就很简单了, 鉴权失败. 也许是之前的匿名的原因.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PR? LGTM? WIP? 盘点Github的那些缩写!</title>
      <link>http://localhost:1313/posts/post/2020/pr-lgtm-wip-%E7%9B%98%E7%82%B9github%E7%9A%84%E9%82%A3%E4%BA%9B%E7%BC%A9%E5%86%99/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/pr-lgtm-wip-%E7%9B%98%E7%82%B9github%E7%9A%84%E9%82%A3%E4%BA%9B%E7%BC%A9%E5%86%99/</guid>
      <description>&lt;p&gt;今天阿航在请求合并代码时, 仓库原作者突然回复了一个&amp;quot;LGTM&amp;quot;. 一下子给我搞蒙了!😲😲 拼音缩写? 不是! 查词典? 查不到! 后面Google了一下, 看到了最终解释, 茅塞顿开! PR? LGTM? SGTM? 这篇文章来给大家罗列一下Github中老司机的常用缩写!&lt;/p&gt;&#xA;&lt;h2 id=&#34;例子&#34;&gt;例子&lt;/h2&gt;&#xA;&lt;p&gt;直接举阿航碰到的:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/PR-LGTM-WIP-%E7%9B%98%E7%82%B9Github%E7%9A%84%E9%82%A3%E4%BA%9B%E7%BC%A9%E5%86%99-01.png&#34; alt=&#34;PR LGTM WIP 盘点Github的那些缩写-01&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果你不知道这些缩写, 估计你也会一脸懵逼!&lt;/p&gt;&#xA;&lt;h2 id=&#34;缩写含义&#34;&gt;缩写&amp;amp;含义&lt;/h2&gt;&#xA;&lt;p&gt;就像&amp;quot;LBWNB&amp;quot;代表&amp;quot;卢本伟牛逼&amp;quot;, &amp;ldquo;现充&amp;quot;代表&amp;quot;现实生活很充实的人生赢家&amp;quot;一样.&lt;/p&gt;&#xA;&lt;p&gt;如果你不去刻意了解, 是无法从缩写中猜出这些词的真正含义一样. Github的老司机会通过缩写来节省时间或者提高逼格.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;缩写&lt;/th&gt;&#xA;          &lt;th&gt;完整写法&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;PR&lt;/td&gt;&#xA;          &lt;td&gt;Pull Request&lt;/td&gt;&#xA;          &lt;td&gt;拉取请求, 贡献其他项目.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;LGTM&lt;/td&gt;&#xA;          &lt;td&gt;Looks Good To Me&lt;/td&gt;&#xA;          &lt;td&gt;已阅, 代码经过review(审查), 可以合并.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;SGTM&lt;/td&gt;&#xA;          &lt;td&gt;Sounds Good To Me&lt;/td&gt;&#xA;          &lt;td&gt;和LGTM类似, 也是经过review的意思.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;WIP&lt;/td&gt;&#xA;          &lt;td&gt;Work In Progress&lt;/td&gt;&#xA;          &lt;td&gt;已经提上日程了, 属于&amp;quot;部分&amp;quot;PR, 告诉项目维护者功能还未完成, 方便其提前进行部分review&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;PTAL&lt;/td&gt;&#xA;          &lt;td&gt;Please Take A Look&lt;/td&gt;&#xA;          &lt;td&gt;你来看一下? 提示别人再审查下代码.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;TBR&lt;/td&gt;&#xA;          &lt;td&gt;To Be Reviewed&lt;/td&gt;&#xA;          &lt;td&gt;待评审, 用于提示项目维护者进行review.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;TL;DR&lt;/td&gt;&#xA;          &lt;td&gt;Too Long; Didn&amp;rsquo;t Read&lt;/td&gt;&#xA;          &lt;td&gt;文字过多, 懒得看. 代码过长, 不便于进行Code review.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;TBD&lt;/td&gt;&#xA;          &lt;td&gt;To Be Done(or Defined/Discussed/Decided/Determined)&lt;/td&gt;&#xA;          &lt;td&gt;通常是&amp;quot;没搞定&amp;quot;的意思, 也需要根据语境进行判断.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;感谢&#34;&gt;感谢&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这篇&lt;a href=&#34;https://github.com/flame-engine/flame/pull/350&#34; target=&#34;_blank&#34;&gt;PR&lt;/a&gt;&#xA;的&lt;a href=&#34;https://github.com/impulse&#34; target=&#34;_blank&#34;&gt;impulse&lt;/a&gt;&#xA;发布的评论, 让我了解到这个东西&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://farer.org/2017/03/01/code-review-acronyms/&#34; target=&#34;_blank&#34;&gt;《LGTM? 那些迷之缩写》&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Git同时推送多个远程仓库</title>
      <link>http://localhost:1313/posts/post/2020/git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>&lt;p&gt;有时我们在进行开源的过程中, 少不了需要把代码推送到&lt;code&gt;Github&lt;/code&gt;/&lt;code&gt;码云&lt;/code&gt;上. 最传统的方式就是分别进行提交、推送. 但是重复劳动并不符合程序员思维😤! 是否有一种方法可以同时使用Git推送至不同的远程仓库呢? 答案是肯定的. 这篇文章就来记录一下如何&amp;quot;使用Git推送至多个远程仓库&amp;quot;, 提高开发人员的工作效率.&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;p&gt;若要顺利阅读本文, 你需要具备如下条件:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;掌握&lt;code&gt;Git&lt;/code&gt;的基本操作&lt;/li&gt;&#xA;&lt;li&gt;电脑已安装&lt;code&gt;Git&lt;/code&gt;的操作环境&lt;/li&gt;&#xA;&lt;li&gt;拥有&lt;code&gt;Github&lt;/code&gt;账号&lt;/li&gt;&#xA;&lt;li&gt;拥有&lt;code&gt;码云&lt;/code&gt;账号&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建远程仓库&#34;&gt;创建远程仓库&lt;/h3&gt;&#xA;&lt;h4 id=&#34;github&#34;&gt;Github&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;进入&lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Github官网&lt;/a&gt;&#xA;, 点击&lt;a href=&#34;https://github.com/new&#34; target=&#34;_blank&#34;&gt;创建仓库&lt;/a&gt;&#xA;:&lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-01.png&#34; alt=&#34; Git同时推送多个远程仓库-01&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;输入仓库基本信息, 点击&lt;code&gt;Create repository&lt;/code&gt;:&lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-02.png&#34; alt=&#34;Git同时推送多个远程仓库-02&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;稍等片刻, 仓库创建完成:&lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-03.png&#34; alt=&#34;Git同时推送多个远程仓库-03&#34;&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;至此, Github的准备工作完成.&lt;/p&gt;&#xA;&lt;h4 id=&#34;码云&#34;&gt;码云&lt;/h4&gt;&#xA;&lt;p&gt;码云就简单多了, 因为码云可以直接导入来自Github的项目!&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进入码云, 鼠标移至右上角的加号, 点击&lt;strong&gt;新建仓库&lt;/strong&gt;按钮: &lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-04.png&#34; alt=&#34;Git同时推送多个远程仓库-04&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进入到仓库基本信息页面, 别急着填, 直接拉到最下面, 找到这个: &lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-05.png&#34; alt=&#34;Git同时推送多个远程仓库-05&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;点击后, 输入上面Github的仓库地址, 点击创建:&lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-06.png&#34; alt=&#34;Git同时推送多个远程仓库-06&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;等待片刻:&lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-07.png&#34; alt=&#34;Git同时推送多个远程仓库-07&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;创建完成&lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-08.png&#34; alt=&#34;Git同时推送多个远程仓库-08&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;创建初始化本地仓库&#34;&gt;创建、初始化本地仓库&lt;/h3&gt;&#xA;&lt;h4 id=&#34;创建本地仓库&#34;&gt;创建本地仓库&lt;/h4&gt;&#xA;&lt;p&gt;在电脑中创建一个新目录:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-09.png&#34; alt=&#34;Git同时推送多个远程仓库-09&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;右键, 点击&lt;code&gt;Git Bash Here&lt;/code&gt;(如果没有, 直接用&lt;code&gt;CMD&lt;/code&gt;进入目录即可)&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-10.png&#34; alt=&#34;Git同时推送多个远程仓库-10&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;初始化本地仓库&#34;&gt;初始化本地仓库&lt;/h4&gt;&#xA;&lt;p&gt;输入命令:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-11.png&#34; alt=&#34;Git同时推送多个远程仓库-11&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在项目目录中创建文件&lt;code&gt;README.md&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-12.png&#34; alt=&#34;Git同时推送多个远程仓库-12&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;git提交&#34;&gt;git提交&lt;/h4&gt;&#xA;&lt;p&gt;回到Git终端, 分别输入:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add README.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin 你的Github仓库地址&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;images/Git%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-13.png&#34; alt=&#34;Git同时推送多个远程仓库-13&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
