<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Springboot on 阿航的技术小站</title>
    <link>http://localhost:1313/tags/springboot/</link>
    <description>Recent content in Springboot on 阿航的技术小站</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 12 May 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/springboot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Boot AOP 获取注解中的值</title>
      <link>http://localhost:1313/posts/post/2021/spring-boot-aop-%E8%8E%B7%E5%8F%96%E6%B3%A8%E8%A7%A3%E4%B8%AD%E7%9A%84%E5%80%BC/</link>
      <pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2021/spring-boot-aop-%E8%8E%B7%E5%8F%96%E6%B3%A8%E8%A7%A3%E4%B8%AD%E7%9A%84%E5%80%BC/</guid>
      <description>&lt;h2 id=&#34;确定需求&#34;&gt;确定需求&lt;/h2&gt;&#xA;&lt;p&gt;首先来确定一下我们的需求:&lt;/p&gt;&#xA;&lt;p&gt;我需要做一个功能, 可以通过注解的方式来使某些controller做一些事情(比如权限校验).&lt;/p&gt;&#xA;&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;java 8&lt;/li&gt;&#xA;&lt;li&gt;Spring Boot&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;&#xA;&lt;p&gt;首先来创建一个注解类&lt;code&gt;MyAnnotation&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`@Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation {      /**      * 注解值(等下要获取并处理该值)      * @return      */     String value() default &amp;quot;&amp;quot;;  }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;还有处理注解的类&lt;code&gt;MyAnnotaionAspect&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;notice&amp;rdquo;]注意, 需要将下方的@annotation内的值替换为你的注解路径![/epcl_box]&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.reflect.MethodSignature; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Component;  import java.lang.reflect.Method;  @Aspect @Component public class MyAnnotationAspect {      protected static final Logger logger = LoggerFactory.getLogger(MyAnnotationAspect.class);      // TODO 注意这里需要替换为你的注解路径     @Around(&amp;quot;@annotation(com.example.demo.MyAnnotation)&amp;quot;)     public Object doSomething(ProceedingJoinPoint point) throws Throwable {          MethodSignature signature = (MethodSignature) point.getSignature();         Method signatureMethod = signature.getMethod();          MyAnnotation myAnnotation = signatureMethod.getAnnotation(MyAnnotation.class);          String value = myAnnotation.value();                  // 这里就可以打印你的注解值了         System.out.println(value);          return point.proceed();     }  }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;写一个Controller作为例子:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maven打包引入外部.jar文件</title>
      <link>http://localhost:1313/posts/post/2020/maven%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8-jar%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/maven%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8-jar%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;在尝试打包Maven项目, 运行&lt;code&gt;mvn install&lt;/code&gt;命令时, IDEA报了这个错:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`kotlin unresolved reference`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;然后查看该报错指向的行, 是来自外部的jar. 本篇文章就来记录下如何将外部jar打包进入Maven项目.&lt;/p&gt;&#xA;&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;&#xA;&lt;p&gt;将你的&lt;code&gt;*.jar&lt;/code&gt;文件全部移动至&lt;code&gt;项目目录/lib&lt;/code&gt;下. 比如我的springboot项目, 包结构大致是这样的:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/image-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后进入&lt;code&gt;pom.xml&lt;/code&gt;文件, 分别为你的每个jar文件添加依赖, 比如:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`&amp;lt;dependency&amp;gt;     &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt;     &amp;lt;artifactId&amp;gt;xxx-sdk&amp;lt;/artifactId&amp;gt;     &amp;lt;version&amp;gt;0.0.1&amp;lt;/version&amp;gt;     &amp;lt;scope&amp;gt;system&amp;lt;/scope&amp;gt;     &amp;lt;systemPath&amp;gt;${project.basedir}\lib\xxxx.jar&amp;lt;/systemPath&amp;gt; &amp;lt;/dependency&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;其中, &lt;code&gt;groupId&lt;/code&gt;、&lt;code&gt;artifactId&lt;/code&gt;以及&lt;code&gt;version&lt;/code&gt;的值你可以随意填写(阿航是参照jar的内容来写).&lt;/p&gt;&#xA;&lt;p&gt;重点是&lt;code&gt;scope&lt;/code&gt;以及&lt;code&gt;systemPath&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;scope标签不能缺少.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;systemPath填写jar所在位置的相对路径. 你直接替换上面的xxxx.jar为你的文件名即可&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>IDEA Spring Boot彩色日志</title>
      <link>http://localhost:1313/posts/post/2020/idea-spring-boot%E5%BD%A9%E8%89%B2%E6%97%A5%E5%BF%97/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/idea-spring-boot%E5%BD%A9%E8%89%B2%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;p&gt;这回在开发Spring Boot应用时, 控制台日志突然变成了黑白. 根本没眼看. 本篇文章就来记录下如何使IDEA日志恢复彩色.&lt;/p&gt;&#xA;&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;&#xA;&lt;p&gt;在IDEA启动命令中添加一条:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`-Dspring.output.ansi.enabled=ALWAYS`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;如图:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/image-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/image-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot Swagger-UI 404</title>
      <link>http://localhost:1313/posts/post/2020/spring-boot-swagger-ui-404/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/spring-boot-swagger-ui-404/</guid>
      <description>&lt;p&gt;这几天换了新的设备用于开发。启动项目后访问swagger地址，发现空空如也。本篇文章就来记录下Spring Boot Swagger-UI 404的可能原因及解决方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;掌握Java开发&lt;/li&gt;&#xA;&lt;li&gt;掌握SpringBoot框架&lt;/li&gt;&#xA;&lt;li&gt;掌握Swagger框架及相应配置&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;阿航的项目环境：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;JDK&lt;/td&gt;&#xA;          &lt;td&gt;14&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;SpringBoot&lt;/td&gt;&#xA;          &lt;td&gt;2.1.13.RELEASE&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Swagger&lt;/td&gt;&#xA;          &lt;td&gt;2.9.2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;问题原因&#34;&gt;问题原因&lt;/h2&gt;&#xA;&lt;p&gt;在网上翻了个遍，众说纷纭。记录下我找到的情况以及对应的解决方案。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况一检查swagger是否限制环境&#34;&gt;情况一：检查Swagger是否限制环境&lt;/h3&gt;&#xA;&lt;p&gt;很明显我们在生产环境不太希望将完整的接口文档暴露出来，我们通常会通过&lt;code&gt;@Profile&lt;/code&gt;进行限制，比如：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`@EnableSwagger2 @Configuration @Profile(&amp;quot;dev&amp;quot;) class SwaggerConfig { ...`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;上面的&lt;code&gt;@Profile&lt;/code&gt;的值就是限制了我们仅在哪些环境中展示Swagger。&lt;/p&gt;&#xA;&lt;p&gt;所以，&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;检查你的环境是否在&lt;code&gt;@Profile&lt;/code&gt;内部。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况二绑定静态资源文件&#34;&gt;情况二：绑定静态资源文件&lt;/h3&gt;&#xA;&lt;p&gt;在你的Swagger配置文件中（或任何注入Bean的类中）添加：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`@Override protected void addResourceHandlers(ResourceHandlerRegistry registry) {     // 解决静态资源无法访问     registry.addResourceHandler(&amp;quot;/**&amp;quot;)             .addResourceLocations(&amp;quot;classpath:/static/&amp;quot;);     // 解决swagger无法访问     registry.addResourceHandler(&amp;quot;/swagger-ui.html&amp;quot;)             .addResourceLocations(&amp;quot;classpath:/META-INF/resources/&amp;quot;);     // 解决swagger的js文件无法访问     registry.addResourceHandler(&amp;quot;/webjars/**&amp;quot;)             .addResourceLocations(&amp;quot;classpath:/META-INF/resources/webjars/&amp;quot;); }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;此方法存在争议，因为新版本的SpringBoot和Swagger并不需要该配置。&lt;/p&gt;</description>
    </item>
    <item>
      <title>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)</title>
      <link>http://localhost:1313/posts/post/2020/org-apache-ibatis-binding-bindingexception-invalid-bound-statement-not-found/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/org-apache-ibatis-binding-bindingexception-invalid-bound-statement-not-found/</guid>
      <description>&lt;p&gt;在使用Mybatis进行开发时， 出现了这样的报错：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`org.apache.ibatis.binding.BindingException:      Invalid bound statement (not found)`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;本篇文章就来记录下碰到上述问题的几种解决方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;情况&#34;&gt;情况&lt;/h2&gt;&#xA;&lt;p&gt;比如我们有Mapper文件&lt;code&gt;UserMapper.java&lt;/code&gt;及其对应的&lt;code&gt;UserMapper.xml&lt;/code&gt;文件&lt;/p&gt;&#xA;&lt;p&gt;这里列举出一些可能出现的情况以及对应的解决方案：&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况一mapperxml的namespace有误&#34;&gt;情况一：Mapper.xml的namespace有误&lt;/h3&gt;&#xA;&lt;p&gt;找到你的&lt;code&gt;mapper.xml&lt;/code&gt;文件，找到类似这一行：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`&amp;lt;!DOCTYPE mapper PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot; &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt; &amp;lt;mapper namespace=&amp;quot;com.bugcatt.mapper.UserMapper&amp;quot;&amp;gt;  &amp;lt;/mapper&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;仔细检查&lt;code&gt;namespace&lt;/code&gt;的值是否对应正确的路径。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况二mapper的函数未在mapperxml定义&#34;&gt;情况二：Mapper的函数未在Mapper.xml定义&lt;/h3&gt;&#xA;&lt;p&gt;检查你的UserMapper中的函数/方法，是否已在&lt;code&gt;Mapper.xml&lt;/code&gt;中定义或名称有误。如果未定义 或者函数名不同请订正。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况三查询返回值类型未妥善处理&#34;&gt;情况三：查询返回值类型未妥善处理&lt;/h3&gt;&#xA;&lt;p&gt;比如你在&lt;code&gt;UserMapper&lt;/code&gt;中定义了函数的返回值是&lt;code&gt;List&amp;lt;User&amp;gt;&lt;/code&gt;类型，但是你在&lt;code&gt;UserMapper.xml&lt;/code&gt;中未正确配置&lt;code&gt;ResultMap&lt;/code&gt;或&lt;code&gt;ResultType&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况三mapperxml路径配置&#34;&gt;情况三：mapper.xml路径配置&lt;/h3&gt;&#xA;&lt;p&gt;在你的spring-boot配置文件中查看你的xml配置：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` mybatis:   # 配置mapper.xml文件路径   mapper-locations: &#39;classpath*:/**/mapper/**Mapper.xml&#39;   # 配置映射类包名   type-aliases-package: com.bugcatt.domain`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;如果你使用的是&lt;code&gt;Mybatis-Plus&lt;/code&gt;，配置为：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;` mybatis-plus:   # 配置mapper.xml文件路径   mapper-locations: &#39;classpath*:/**/mapper/**Mapper.xml&#39;   # 配置映射类包名   type-aliases-package: com.bugcatt.domain`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;情况四mapperjava文件和mapperxml文件不同名&#34;&gt;情况四：Mapper.java文件和Mapper.xml文件不同名&lt;/h3&gt;&#xA;&lt;p&gt;比如你的文件分别为&lt;code&gt;UserMapper.java&lt;/code&gt;和&lt;code&gt;UserrrMapper.xml&lt;/code&gt;（不同名）将它们的名称改为一致试试看。&lt;/p&gt;&#xA;&lt;p&gt;此方法存在争议。部分同学不同名也可以运行。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况五maven未将mapperxml打进包内&#34;&gt;情况五：maven未将mapper.xml打进包内&lt;/h3&gt;&#xA;&lt;p&gt;这种情况可能出现在你未将&lt;code&gt;mapper.xml&lt;/code&gt;放进传统的资源目录中，导致maven编译打包时忽略了你的mapper.xml文件。解决此问题需要在maven配置文件&lt;code&gt;pom.xml&lt;/code&gt;中添加：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`&amp;lt;build&amp;gt;           &amp;lt;resources&amp;gt;                   &amp;lt;resource&amp;gt;                            &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt;                            &amp;lt;includes&amp;gt;                                    &amp;lt;include&amp;gt;**/*.xml&amp;lt;/include&amp;gt;                         &amp;lt;/includes&amp;gt;         &amp;lt;/resource&amp;gt;     &amp;lt;/resources&amp;gt; &amp;lt;/build&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Mybatis-Plus 查询获取数据集最大值(Max())</title>
      <link>http://localhost:1313/posts/post/2020/mybatis-plus-%E6%9F%A5%E8%AF%A2%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E9%9B%86%E6%9C%80%E5%A4%A7%E5%80%BCmax/</link>
      <pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/mybatis-plus-%E6%9F%A5%E8%AF%A2%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E9%9B%86%E6%9C%80%E5%A4%A7%E5%80%BCmax/</guid>
      <description>&lt;p&gt;在使用Mybatis-Plus框架进行查询时, 碰到了需要查询最大值的情况. 但是截止本文章撰写前, Mybatis-Plus并没有提供直接的查询数据最大值的函数. 本篇文章就来记录下如何实现.&lt;/p&gt;&#xA;&lt;h2 id=&#34;前置条件&#34;&gt;前置条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;掌握Spring框架&lt;/li&gt;&#xA;&lt;li&gt;掌握Mybatis&lt;/li&gt;&#xA;&lt;li&gt;掌握Mybatis-Plus的基本使用&lt;/li&gt;&#xA;&lt;li&gt;掌握SQL语句&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;p&gt;我们进行普通查询的时候, 需要用到以下语句:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`xxxMapper.selectOne(QueryWrapper(...));`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;我们只需要分别添加排序(&lt;code&gt;orderByDesc&lt;/code&gt;)和取第1个(&lt;code&gt;limit 1&lt;/code&gt;)就可拿到最大值:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`xxxMapper.selectOne(QueryWrapper(...).orderByDesc(&amp;quot;排序字段名&amp;quot;).last(&amp;quot;limit 1&amp;quot;));`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;拿到最小值只需改为正序排列:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`xxxMapper.selectOne(QueryWrapper(...).orderByAsc(&amp;quot;排序字段名&amp;quot;).last(&amp;quot;limit 1&amp;quot;));`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;搞定.&lt;/p&gt;&#xA;&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;&#xA;&lt;p&gt;本文的方法虽然实现了我们的目标. 但是&lt;strong&gt;仅为代码美观&lt;/strong&gt;. 实际上这样的查询效率可能不高. 生产环境的项目慎用.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
