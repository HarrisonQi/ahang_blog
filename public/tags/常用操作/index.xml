<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>常用操作 on 阿航的技术小站</title>
    <link>http://localhost:1313/tags/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
    <description>Recent content in 常用操作 on 阿航的技术小站</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 20 Jul 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flutter/Dart List去重, 去除重复列表项</title>
      <link>http://localhost:1313/posts/post/2020/flutter-dart-list%E5%8E%BB%E9%87%8D-%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%88%97%E8%A1%A8%E9%A1%B9/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-dart-list%E5%8E%BB%E9%87%8D-%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%88%97%E8%A1%A8%E9%A1%B9/</guid>
      <description>&lt;p&gt;有时我们需要过滤掉重复的列表项, 本篇文章就来介绍下Flutter/Dart 如何进行 List去重, 去除重复列表项.&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方法一-list与set互转&#34;&gt;方法一: List与Set互转&lt;/h3&gt;&#xA;&lt;p&gt;基于Set集合的不可重复特性, 我们利用该特性可轻松解决:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`void main() {   // 声明一个集合   var ids = [1, 1, 4, 4, 5, 6, 6];   // 进行去重, 存储去重后的集合   var distinctIds = ids.toSet().toList(); }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;当然, 基于该思路还有更牛逼的写法:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`var distinctIds = [...{...ids}];`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;success&amp;rdquo;]这也许是最优雅的解决方案.[/epcl_box]&lt;/p&gt;&#xA;&lt;h3 id=&#34;方法二-list与set互转保留顺序&#34;&gt;方法二: List与Set互转(保留顺序)&lt;/h3&gt;&#xA;&lt;p&gt;方案一虽然优雅, 但也不是完美的. 它无法&lt;strong&gt;保留顺序&lt;/strong&gt;. 如果我们的需求对顺序有绝对的要求时, 就需要以下方法了:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import &#39;dart:collection&#39;; void main() {   // 声明一个集合   List arr = [&amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;d&amp;quot;];   // 进行去重, 存储去重后的集合   List result = LinkedHashSet.from(arr).toList(); }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;虽然不如方法一优雅, 但是其保留了顺序.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 指定TextField输入框(文本框)初始值(初始文字)</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E6%8C%87%E5%AE%9Atextfield%E8%BE%93%E5%85%A5%E6%A1%86%E6%96%87%E6%9C%AC%E6%A1%86%E5%88%9D%E5%A7%8B%E5%80%BC%E5%88%9D%E5%A7%8B%E6%96%87%E5%AD%97/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E6%8C%87%E5%AE%9Atextfield%E8%BE%93%E5%85%A5%E6%A1%86%E6%96%87%E6%9C%AC%E6%A1%86%E5%88%9D%E5%A7%8B%E5%80%BC%E5%88%9D%E5%A7%8B%E6%96%87%E5%AD%97/</guid>
      <description>&lt;p&gt;输入框也许是最常用的表单项了. 添加数据时我们直接使用空的输入框就可以了. 编辑的时候, 我们需要把旧的数据预先放在输入框内. 那么如何为其指定初始值呢? 本篇文章就来记录下Flutter如何指定TextField输入框(文本框)初始值(初始文字).&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看一下我们的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E6%8C%87%E5%AE%9ATextField%E5%88%9D%E5%A7%8B%E5%80%BC-01.png&#34; alt=&#34;Flutter-指定TextField初始值-01&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]老规矩. 速度快的同学直接看下方的核心代码![/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编辑数据使用的输入框&lt;/li&gt;&#xA;&lt;li&gt;输入框提供默认数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方法一-textfield&#34;&gt;方法一: TextField&lt;/h3&gt;&#xA;&lt;p&gt;创建一个dart文件, 内容为以下代码:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import &#39;package:flutter/material.dart&#39;;  void main() =&amp;gt; runApp(MyApp());  class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Flutter Demo&#39;,       theme: ThemeData(         primarySwatch: Colors.blue,       ),       home: MyHomePage(title: &#39;为输入框提供初始值&#39;),     );   } }  class MyHomePage extends StatefulWidget {   MyHomePage({Key key, this.title}) : super(key: key);   final String title;    @override   _MyHomePageState createState() =&amp;gt; _MyHomePageState(); }  class _MyHomePageState extends State {    @override   Widget build(BuildContext context) {     return Scaffold(       appBar: AppBar(         title: Text(widget.title),       ),       body: Center(         child: Column(           mainAxisAlignment: MainAxisAlignment.center,           children: [             Container(               width: MediaQuery.of(context).size.width * 0.3,               child: TextField(                 controller: TextEditingController()..text=&amp;quot;你今天真好看&amp;quot;,               ),             )           ],         ),       ),     );   } }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;重点放在&lt;code&gt;TextField&lt;/code&gt;内部. 我们为其&lt;code&gt;controller&lt;/code&gt;参数赋值为&lt;code&gt;TextEditingController()..text=&amp;quot;你今天真好看&amp;quot;&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter根据屏幕尺寸(宽度/高度)的百分比设定元素(小部件/组件/Widget)尺寸</title>
      <link>http://localhost:1313/posts/post/2020/flutter%E6%A0%B9%E6%8D%AE%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E5%AE%BD%E5%BA%A6-%E9%AB%98%E5%BA%A6%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%BE%E5%AE%9A%E5%85%83%E7%B4%A0%E5%B0%8F%E9%83%A8%E4%BB%B6/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter%E6%A0%B9%E6%8D%AE%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E5%AE%BD%E5%BA%A6-%E9%AB%98%E5%BA%A6%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%BE%E5%AE%9A%E5%85%83%E7%B4%A0%E5%B0%8F%E9%83%A8%E4%BB%B6/</guid>
      <description>&lt;p&gt;最让前端开发人员头疼的问题之一就是屏幕尺寸兼容性问题了. Web端开发人员经常会对测试人员说: &amp;ldquo;换个浏览器试一下&amp;rdquo;.😂 虽然现在的主流的屏幕大小非常相似, 但是我们也要事先处理好. 本篇文章就来记录Flutter如何根据屏幕尺寸(宽度/高度)的百分比设定元素(小部件/组件/Widget)尺寸.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看一下效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%E8%AE%BE%E7%BD%AE%E5%85%83%E7%B4%A0%E5%B0%BA%E5%AF%B8-04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你掌握Flutter基础.&lt;/li&gt;&#xA;&lt;li&gt;你了解基础的Flutter布局.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章的开发环境:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]老规矩, 速度快的同学直接看最下方的核心代码![/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;&#xA;&lt;p&gt;创建一个Flutter项目, 替换&lt;code&gt;main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import &#39;package:flutter/material.dart&#39;;  void main() =&amp;gt; runApp(MyApp());  class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Flutter Demo&#39;,       theme: ThemeData(         primarySwatch: Colors.blue,       ),       home: MyHomePage(title: &#39;屏幕百分比设定元素尺寸&#39;),     );   } }  class MyHomePage extends StatefulWidget {   MyHomePage({Key key, this.title}) : super(key: key);   final String title;    @override   _MyHomePageState createState() =&amp;gt; _MyHomePageState(); }  class _MyHomePageState extends State&amp;lt;MyHomePage&amp;gt; {    @override   Widget build(BuildContext context) {     return Scaffold(       appBar: AppBar(         title: Text(widget.title),       ),       body: Row(         children: [           Container(             color: Color(0xFFFF6666),             child: Text(&amp;quot;30%&amp;quot;, style: Theme.of(context).textTheme.headline2,),           ),           Container(             color: Color(0xFFFFFF66),             child: Text(&amp;quot;70%&amp;quot;, style: Theme.of(context).textTheme.headline2,),           )         ],       ),     );   } }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;🟢 运行项目, 应该是这样的:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 隐藏/显示某widget组件、切换显示状态</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E9%9A%90%E8%97%8F-%E6%98%BE%E7%A4%BA%E6%9F%90widget%E7%BB%84%E4%BB%B6%E5%88%87%E6%8D%A2%E6%98%BE%E7%A4%BA%E7%8A%B6%E6%80%81/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E9%9A%90%E8%97%8F-%E6%98%BE%E7%A4%BA%E6%9F%90widget%E7%BB%84%E4%BB%B6%E5%88%87%E6%8D%A2%E6%98%BE%E7%A4%BA%E7%8A%B6%E6%80%81/</guid>
      <description>&lt;p&gt;在进行Flutter开发时, 我们需要对某个widget进行显示与隐藏状态的切换. 这个需求还是蛮常见的. 本篇文章就来记录下Flutter如何隐藏/显示某widget组件、切换显示状态.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们要实现的最终效果:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E9%9A%90%E8%97%8F%E6%98%BE%E7%A4%BA%E6%9F%90widget%E7%BB%84%E4%BB%B6-06.gif&#34; alt=&#34;Flutter-隐藏显示某widget组件-06&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;隐藏Widget&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E9%9A%90%E8%97%8F%E6%98%BE%E7%A4%BA%E6%9F%90widget%E7%BB%84%E4%BB%B6-08.gif&#34; alt=&#34;Flutter 隐藏显示某widget组件-08&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;隐藏且不影响布局&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你已经掌握Flutter基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章环境:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]老规矩, 速度快的同学直接去看核心代码![/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;&#xA;&lt;p&gt;创建一个Flutter项目, 替换文件&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;`import &#39;package:flutter/material.dart&#39;;  void main() =&amp;gt; runApp(MyApp());  class MyApp extends StatelessWidget {   @override   Widget build(BuildContext context) {     return MaterialApp(       title: &#39;Show Hide widget&#39;,       theme: ThemeData(         primarySwatch: Colors.blue,       ),       home: MyHomePage(title: &#39;Show &amp;amp; Hide Widget&#39;),     );   } }  class MyHomePage extends StatefulWidget {   MyHomePage({Key key, this.title}) : super(key: key);   final String title;    @override   _MyHomePageState createState() =&amp;gt; _MyHomePageState(); }  class _MyHomePageState extends State {   // 存储&amp;quot;是否显示&amp;quot;状态   bool _isShow = true;    @override   Widget build(BuildContext context) {     return Scaffold(       appBar: AppBar(         title: Text(widget.title),       ),       body: Center(         child: Column(           mainAxisAlignment: MainAxisAlignment.center,           children: [             Text(&#39;一个文本Widget&#39;, style: Theme.of(context).textTheme.headline3),             RaisedButton(               child: Text(                 _isShow ? &amp;quot;隐藏&amp;quot; : &amp;quot;显示&amp;quot;,                 style: Theme.of(context).textTheme.headline5,               ),               onPressed: () {                 setState(() {                   _isShow = !_isShow;                 });               },             )           ],         ),       ),     );   } }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;我们创建了布尔类型的实例变量&lt;code&gt;_isShow&lt;/code&gt;, 用于保存widget的显示状态.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 隐藏/移除导航栏的默认返回按钮</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E9%9A%90%E8%97%8F-%E7%A7%BB%E9%99%A4%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E9%BB%98%E8%AE%A4%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E9%9A%90%E8%97%8F-%E7%A7%BB%E9%99%A4%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E9%BB%98%E8%AE%A4%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE/</guid>
      <description>&lt;p&gt;在实际项目开发中, 我们在进行页面跳转时, 偶尔会跳到不可返回的页面(比如退出登录后). 本篇文章就来记录下 Flutter 如何隐藏/移除导航栏的默认返回按钮.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下实际效果:&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;p&gt;移除导航栏的默认返回按钮适用于:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;退出登录后禁止返回&lt;/li&gt;&#xA;&lt;li&gt;跳转至一个全新的页面, 不可返回&lt;/li&gt;&#xA;&lt;li&gt;禁止返回的任何页面&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;掌握Flutter基础&lt;/li&gt;&#xA;&lt;li&gt;掌握Flutter页面跳转的基本操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章的环境:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flutter&lt;/td&gt;&#xA;          &lt;td&gt;1.19.0-2.0.pre&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;&#xA;&lt;p&gt;创建新文件&lt;code&gt;./lib/main.dart&lt;/code&gt;(或者其他你想要的文件名):&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Remove back button&amp;#39;,&#xA;      home: FirstPage(),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class FirstPage extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(&amp;#34;First Page&amp;#34;),&#xA;      ),&#xA;      body: Center(&#xA;        child: RaisedButton(&#xA;          child: Text(&amp;#34;跳转到下一页&amp;#34;),&#xA;          onPressed: () {&#xA;            Navigator.push(context, MaterialPageRoute(builder: (context) {&#xA;              return SecondPage();&#xA;            }));&#xA;          },&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class SecondPage extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(&amp;#34;Second Page&amp;#34;),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🟢 运行, 可以看到demo提供了正常跳转:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter 禁用按钮/禁止按钮点击</title>
      <link>http://localhost:1313/posts/post/2020/flutter-%E7%A6%81%E7%94%A8%E6%8C%89%E9%92%AE-%E7%A6%81%E6%AD%A2%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-%E7%A6%81%E7%94%A8%E6%8C%89%E9%92%AE-%E7%A6%81%E6%AD%A2%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB/</guid>
      <description>&lt;p&gt;某些情况下我们需要禁用某个按钮的点击事件. 通过灵活的按钮禁止状态切换可以实现很多实际需求. 本篇文章就来记录下Flutter如何禁用按钮以及禁止按钮点击.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter-%E7%A6%81%E7%94%A8%E6%8C%89%E9%92%AE%E7%A6%81%E6%AD%A2%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB-04.gif&#34; alt=&#34;Flutter-禁用按钮禁止按钮点击-04&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户权限不足, 禁止某些按钮点击.&lt;/li&gt;&#xA;&lt;li&gt;用户表单未填完, 禁止下一步.&lt;/li&gt;&#xA;&lt;li&gt;用户阅读相关条款至少X秒, 倒数结束前锁定按钮.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你了解Flutter基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章的环境:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Windows&lt;/td&gt;&#xA;          &lt;td&gt;10&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Android Studio&lt;/td&gt;&#xA;          &lt;td&gt;3.5&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flutter&lt;/td&gt;&#xA;          &lt;td&gt;1.19.0-2.0.pre&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;&#xA;&lt;p&gt;创建一个空项目.&lt;/p&gt;&#xA;&lt;p&gt;删除&lt;code&gt;./test&lt;/code&gt;目录.&lt;/p&gt;&#xA;&lt;p&gt;替换&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/cupertino.dart&amp;#39;;&#xA;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Disable Button&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyHomePage(title: &amp;#39;Disable Button&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;&#xA;  // 是否开启按钮&#xA;  bool isEnabled = true;&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(title: Text(widget.title)),&#xA;      body: Center(&#xA;        child: Column(&#xA;          mainAxisAlignment: MainAxisAlignment.center,&#xA;          children: [&#xA;&#xA;            // 开关控件&#xA;            CupertinoSwitch(&#xA;              value: this.isEnabled,&#xA;              onChanged: (bool value) {&#xA;                setState(() {&#xA;                  this.isEnabled = value;&#xA;                });&#xA;              },&#xA;            ),&#xA;            RaisedButton(child: Text(&amp;#34;目标按钮&amp;#34;, style: TextStyle(fontSize: 25,color: Colors.white)), color: Colors.blue,onPressed: (){}),&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;🟢 运行项目, 应该会出现一个开关控件和一个&amp;quot;目标按钮&amp;quot;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter为widget添加border边框、下划线</title>
      <link>http://localhost:1313/posts/post/2020/flutter%E4%B8%BAwidget%E6%B7%BB%E5%8A%A0border%E8%BE%B9%E6%A1%86%E4%B8%8B%E5%88%92%E7%BA%BF/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter%E4%B8%BAwidget%E6%B7%BB%E5%8A%A0border%E8%BE%B9%E6%A1%86%E4%B8%8B%E5%88%92%E7%BA%BF/</guid>
      <description>&lt;p&gt;有时我们需要为Flutter的widget小部件添加各式各样的边框. 但是并不是所有widget都提供了边框的属性, 本篇文章就来记录下如何为Flutter 的 widget 添加border边框、下划线.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 先来看下我们要实现的最终效果:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E4%B8%BAwidget%E6%B7%BB%E5%8A%A0border%E8%BE%B9%E6%A1%86-11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你已经掌握Flutter基础&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本篇文章的开发环境:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;环境&lt;/th&gt;&#xA;          &lt;th&gt;版本&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;操作系统&lt;/td&gt;&#xA;          &lt;td&gt;Windows 10&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flutter&lt;/td&gt;&#xA;          &lt;td&gt;1.19.0-2.0.pre&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;IDE&lt;/td&gt;&#xA;          &lt;td&gt;Android Studio 3.5&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]速度快的同学直接复制下方的&amp;quot;全部源码&amp;quot;自行研究! 稳一点的同学请按照教程一步一步来! [/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建项目清理代码&#34;&gt;创建项目&amp;amp;清理代码&lt;/h3&gt;&#xA;&lt;p&gt;为了便于演示, 阿航在这里创建一个空项目.&lt;/p&gt;&#xA;&lt;p&gt;创建完成后, 删除&lt;code&gt;./test&lt;/code&gt;目录. 因为我们的demo无需测试类.&lt;/p&gt;&#xA;&lt;p&gt;替换&lt;code&gt;./lib/main.dart&lt;/code&gt;为:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Awesome Border&amp;#39;,&#xA;      theme: ThemeData(primarySwatch: Colors.blue),&#xA;      home: MyHomePage(title: &amp;#39;My Awesome Border&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;  // 即将渲染的边框组件集合&#xA;  List _borderWidgets;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    // 处理带边框的对象集合&#xA;    _borderWidgets = [];&#xA;    super.initState();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    // 为了美观, 将内容全部居中处理&#xA;    _borderWidgets.forEach((element) {&#xA;      _borderWidgets[_borderWidgets.indexOf(element)] = Center(child: element);&#xA;    });&#xA;&#xA;    return Scaffold(&#xA;      appBar: AppBar(title: Text(widget.title)),&#xA;      body: Center(&#xA;          child: Container(&#xA;        padding: EdgeInsets.all(20),&#xA;        child: GridView.count(&#xA;          padding: const EdgeInsets.all(8.0),&#xA;          crossAxisCount: 3,&#xA;          crossAxisSpacing: 5,&#xA;          mainAxisSpacing: 5,&#xA;          children: _borderWidgets,&#xA;        ),&#xA;      )),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&#xA;  &lt;blockquote&gt;&#xA;    &lt;p&gt;我们首先在&lt;code&gt;26&lt;/code&gt;行定义了实例变量&lt;code&gt;_borderWidgets&lt;/code&gt;, 它将保存我们所有的用来展示边框的Widget.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter Clipboard 剪贴板操作: 复制到剪贴板 / 从剪贴板中获取</title>
      <link>http://localhost:1313/posts/post/2020/flutter-clipboard-%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C-%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF-%E4%BB%8E%E5%89%AA%E8%B4%B4%E6%9D%BF%E4%B8%AD%E8%8E%B7%E5%8F%96/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/flutter-clipboard-%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C-%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF-%E4%BB%8E%E5%89%AA%E8%B4%B4%E6%9D%BF%E4%B8%AD%E8%8E%B7%E5%8F%96/</guid>
      <description>&lt;p&gt;我们在使用Flutter进行开发时, 有时会使用类似&amp;quot;复制本段文字&amp;quot;的功能. 为了提升用户体验, 我们不希望用户长按文字, 再自行复制, 我们希望提供一个按钮直接点击复制, 甚至自动复制! 反之从剪贴板获取也一样.&lt;/p&gt;&#xA;&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;&#xA;&lt;p&gt;有图有真相, 不说废话, 直接展示最终效果:&lt;/p&gt;&#xA;&lt;h4 id=&#34;复制到剪贴板&#34;&gt;复制到剪贴板&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C-03.gif&#34; alt=&#34;Flutter剪贴板操作-03&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;从剪贴板获取粘贴&#34;&gt;从剪贴板获取(粘贴)&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/Flutter%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C-04.gif&#34; alt=&#34;Flutter剪贴板操作-04&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]如果你了解阿航的技术小站, 应该会知悉每篇文章都会提供相当详细且完整的源码. [/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;h3 id=&#34;复制到剪贴板-1&#34;&gt;复制到剪贴板&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;生成了运单号, 需要用户进行保存;&lt;/li&gt;&#xA;&lt;li&gt;某些微商APP需要复制文案, 发布朋友圈;&lt;/li&gt;&#xA;&lt;li&gt;文学类APP中, 发现一段非常好的句子, 想发给好友.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;从剪贴板中获取&#34;&gt;从剪贴板中获取&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;直接填入用户复制的短信验证码.&lt;/li&gt;&#xA;&lt;li&gt;淘宝分享的东西, 复制后打开淘宝APP.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;information&amp;rdquo;]当然, 以上只是举了几种例子, 还有更多可以提升用户操作体验的实例在此不过多举例了, 直接开始.[/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;实战开始&#34;&gt;实战开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;初始化flutter项目&#34;&gt;初始化Flutter项目&lt;/h3&gt;&#xA;&lt;p&gt;创建Flutter项目, 清理一下&lt;code&gt;./lib/main.dart&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#39;package:flutter/material.dart&amp;#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &amp;#39;Flutter剪贴板操作&amp;#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: MyHomePage(title: &amp;#39;Flutter剪贴板操作&amp;#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyHomePage extends StatefulWidget {&#xA;  MyHomePage({Key key, this.title}) : super(key: key);&#xA;  final String title;&#xA;&#xA;  @override&#xA;  _MyHomePageState createState() =&amp;gt; _MyHomePageState();&#xA;}&#xA;&#xA;class _MyHomePageState extends State {&#xA;  int _counter = 0;&#xA;&#xA;  void _incrementCounter() {&#xA;    setState(() {&#xA;      _counter++;&#xA;    });&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: Text(widget.title),&#xA;      ),&#xA;      body: Center(&#xA;        child: Column(&#xA;          mainAxisAlignment: MainAxisAlignment.center,&#xA;          children: [&#xA;            Text(&#xA;              &amp;#39;You have pushed the button this many times:&amp;#39;,&#xA;            ),&#xA;            Text(&#xA;              &amp;#39;$_counter&amp;#39;,&#xA;              style: Theme.of(context).textTheme.headline4,&#xA;            ),&#xA;          ],&#xA;        ),&#xA;      ),&#xA;      floatingActionButton: FloatingActionButton(&#xA;        onPressed: _incrementCounter,&#xA;        tooltip: &amp;#39;Increment&amp;#39;,&#xA;        child: Icon(Icons.add),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行下项目, 应该空空如也:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
