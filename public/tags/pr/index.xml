<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pr on 阿航的技术小站</title>
    <link>http://localhost:1313/tags/pr/</link>
    <description>Recent content in Pr on 阿航的技术小站</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 04 Jun 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/pr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Github/Gitlab 等远程Git仓库fork后与原仓库同步</title>
      <link>http://localhost:1313/posts/post/2020/github-gitlab-%E7%AD%89%E8%BF%9C%E7%A8%8Bgit%E4%BB%93%E5%BA%93fork%E5%90%8E%E4%B8%8E%E5%8E%9F%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post/2020/github-gitlab-%E7%AD%89%E8%BF%9C%E7%A8%8Bgit%E4%BB%93%E5%BA%93fork%E5%90%8E%E4%B8%8E%E5%8E%9F%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/</guid>
      <description>&lt;p&gt;看到这篇文章, 说明你也是个勤奋的贡献者🤝🤝. 同学们在贡献代码 PR 前, 都需要将原仓库&lt;code&gt;fork&lt;/code&gt;下来. 但有时原仓库的代码比我们fork后的代码新, 并且github目前似乎并未提供自动fork的机制. 本篇文章就来记录下Github/Gitlab 等远程Git仓库fork后与原仓库同步的方法.&lt;/p&gt;&#xA;&lt;h2 id=&#34;适用场景&#34;&gt;适用场景&lt;/h2&gt;&#xA;&lt;p&gt;github等远程仓库的原仓库代码有大量变更, 需要将自己fork下来的仓库和原仓库同步.&lt;/p&gt;&#xA;&lt;h2 id=&#34;需具备的条件&#34;&gt;需具备的条件&lt;/h2&gt;&#xA;&lt;p&gt;本篇教程假定:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你已经掌握基础的CMD/Bash/Shell终端命令.&lt;/li&gt;&#xA;&lt;li&gt;你已经掌握了基本的Git命令以及Github操作.&lt;/li&gt;&#xA;&lt;li&gt;你已经有了待同步的、fork下来的代码仓库.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;[epcl_box type=&amp;ldquo;notice&amp;rdquo;]本篇教程将会尽可能减少废话, 只放干货. 所以请你仔细阅读并严谨遵循教程步骤![/epcl_box]&lt;/p&gt;&#xA;&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;&#xA;&lt;h3 id=&#34;查看当前远程仓库配置&#34;&gt;查看当前远程仓库配置&lt;/h3&gt;&#xA;&lt;p&gt;打开终端, &lt;code&gt;cd&lt;/code&gt;至仓库目录内.&lt;/p&gt;&#xA;&lt;p&gt;输入以下命令以查看当前的远程仓库:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote -v&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正常情况下, 会返回类似于:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote -v&#xA;origin  https://github.com/你的用户名/你的仓库名.git (fetch)&#xA;origin  https://github.com/你的用户名/你的仓库名.git (push)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[epcl_box type=&amp;ldquo;notice&amp;rdquo;]如果你未返回数据, 请检查你的本地仓库是否关联了远程仓库. 若格式和上面不一致, 请检查你的仓库状态.[/epcl_box]&lt;/p&gt;&#xA;&lt;h3 id=&#34;绑定上游远程仓库&#34;&gt;绑定上游远程仓库&lt;/h3&gt;&#xA;&lt;p&gt;紧接着输入以下命令行, 绑定上游仓库:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote add upstream &amp;#34;https://github.com/上游用户名/上游仓库名.git&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再次查看当前仓库:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote -v&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正常情况下, 会返回类似于:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote -v&#xA;origin  https://github.com/你的用户名/你的仓库名.git (fetch)&#xA;origin  https://github.com/你的用户名/你的仓库名.git (push)&#xA;upstream        https://github.com/上游用户名/上游仓库名.git (fetch)&#xA;upstream        https://github.com/上游用户名/上游仓库名.git (push)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;拉取上游仓库代码&#34;&gt;拉取上游仓库代码&lt;/h3&gt;&#xA;&lt;p&gt;输入以下命令, 拉取上游仓库代码:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
